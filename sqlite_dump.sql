
CREATE TABLE IF NOT EXISTS `django_migrations` (`id` integer NOT NULL PRIMARY KEY AUTO_INCREMENT, `app` varchar(255) NOT NULL, `name` varchar(255) NOT NULL, `applied` datetime NOT NULL);
INSERT INTO django_migrations VALUES(1,`contenttypes`,`0001_initial`,`2023-09-27 16:15:58.743836`);
INSERT INTO django_migrations VALUES(2,`contenttypes`,`0002_remove_content_type_name`,`2023-09-27 16:15:58.761390`);
INSERT INTO django_migrations VALUES(3,`auth`,`0001_initial`,`2023-09-27 16:15:58.788603`);
INSERT INTO django_migrations VALUES(4,`auth`,`0002_alter_permission_name_max_length`,`2023-09-27 16:15:58.801704`);
INSERT INTO django_migrations VALUES(5,`auth`,`0003_alter_user_email_max_length`,`2023-09-27 16:15:58.815589`);
INSERT INTO django_migrations VALUES(6,`auth`,`0004_alter_user_username_opts`,`2023-09-27 16:15:58.829136`);
INSERT INTO django_migrations VALUES(7,`auth`,`0005_alter_user_last_login_null`,`2023-09-27 16:15:58.840742`);
INSERT INTO django_migrations VALUES(8,`auth`,`0006_require_contenttypes_0002`,`2023-09-27 16:15:58.847016`);
INSERT INTO django_migrations VALUES(9,`auth`,`0007_alter_validators_add_error_messages`,`2023-09-27 16:15:58.861423`);
INSERT INTO django_migrations VALUES(10,`auth`,`0008_alter_user_username_max_length`,`2023-09-27 16:15:58.873788`);
INSERT INTO django_migrations VALUES(11,`auth`,`0009_alter_user_last_name_max_length`,`2023-09-27 16:15:58.885325`);
INSERT INTO django_migrations VALUES(12,`auth`,`0010_alter_group_name_max_length`,`2023-09-27 16:15:58.900968`);
INSERT INTO django_migrations VALUES(13,`auth`,`0011_update_proxy_permissions`,`2023-09-27 16:15:58.914465`);
INSERT INTO django_migrations VALUES(14,`auth`,`0012_alter_user_first_name_max_length`,`2023-09-27 16:15:58.927156`);
INSERT INTO django_migrations VALUES(15,`main_app`,`0001_initial`,`2023-09-27 16:15:58.951324`);
INSERT INTO django_migrations VALUES(16,`admin`,`0001_initial`,`2023-09-27 16:15:58.975739`);
INSERT INTO django_migrations VALUES(17,`admin`,`0002_logentry_remove_auto_add`,`2023-09-27 16:15:58.994529`);
INSERT INTO django_migrations VALUES(18,`admin`,`0003_logentry_add_action_flag_choices`,`2023-09-27 16:15:59.012028`);
INSERT INTO django_migrations VALUES(19,`sessions`,`0001_initial`,`2023-09-27 16:15:59.028539`);
INSERT INTO django_migrations VALUES(20,`main_app`,`0002_user_role`,`2023-09-27 18:25:23.814319`);
INSERT INTO django_migrations VALUES(21,`main_app`,`0003_course_tutorialcategory_usercourse_tutorial_task_and_more`,`2023-09-27 23:21:08.051346`);
INSERT INTO django_migrations VALUES(22,`main_app`,`0004_tutorial_course`,`2023-09-28 21:34:02.023771`);
INSERT INTO django_migrations VALUES(23,`main_app`,`0005_course_prerequisites_alter_tutorial_content`,`2023-10-01 11:05:45.790216`);
INSERT INTO django_migrations VALUES(24,`main_app`,`0006_rename_prerequisites_course_prerequisites`,`2023-10-01 11:13:44.697797`);
INSERT INTO django_migrations VALUES(25,`main_app`,`0007_course_is_premium`,`2023-10-01 17:08:33.840660`);
INSERT INTO django_migrations VALUES(26,`main_app`,`0008_tutorial_description`,`2023-10-02 19:59:52.108678`);
INSERT INTO django_migrations VALUES(27,`main_app`,`0009_alter_tutorial_description`,`2023-10-02 20:45:18.660267`);
INSERT INTO django_migrations VALUES(28,`main_app`,`0010_taskcategory_task_category`,`2023-10-09 17:03:24.407029`);
INSERT INTO django_migrations VALUES(29,`main_app`,`0011_user_editor_theme_alter_task_category`,`2023-10-11 23:01:36.523642`);
INSERT INTO django_migrations VALUES(30,`main_app`,`0012_performedcourse_ongoingcourse`,`2023-10-12 19:35:54.222974`);
INSERT INTO django_migrations VALUES(31,`main_app`,`0013_tasktest`,`2023-10-14 22:39:46.326679`);
INSERT INTO django_migrations VALUES(32,`main_app`,`0014_course_courselogo`,`2023-11-14 18:00:00.859996`);
INSERT INTO django_migrations VALUES(33,`main_app`,`0015_tutorial_tutoriallogo`,`2023-11-14 23:56:54.750485`);
INSERT INTO django_migrations VALUES(34,`main_app`,`0016_alter_tutorial_tutoriallogo`,`2023-11-15 00:16:38.862552`);
INSERT INTO django_migrations VALUES(35,`main_app`,`0017_alter_course_creator_usertask_user_task_uniq_and_more`,`2023-12-05 17:07:07.720310`);
CREATE TABLE IF NOT EXISTS `django_content_type` (`id` integer NOT NULL PRIMARY KEY AUTO_INCREMENT, `app_label` varchar(100) NOT NULL, `model` varchar(100) NOT NULL);
INSERT INTO django_content_type VALUES(1,`admin`,`logentry`);
INSERT INTO django_content_type VALUES(2,`auth`,`permission`);
INSERT INTO django_content_type VALUES(3,`auth`,`group`);
INSERT INTO django_content_type VALUES(4,`contenttypes`,`contenttype`);
INSERT INTO django_content_type VALUES(5,`sessions`,`session`);
INSERT INTO django_content_type VALUES(6,`main_app`,`user`);
INSERT INTO django_content_type VALUES(7,`main_app`,`answer`);
INSERT INTO django_content_type VALUES(8,`main_app`,`tutorialcategory`);
INSERT INTO django_content_type VALUES(9,`main_app`,`course`);
INSERT INTO django_content_type VALUES(10,`main_app`,`task`);
INSERT INTO django_content_type VALUES(11,`main_app`,`tutorial`);
INSERT INTO django_content_type VALUES(12,`main_app`,`usercourse`);
INSERT INTO django_content_type VALUES(13,`main_app`,`usertask`);
INSERT INTO django_content_type VALUES(14,`main_app`,`useranswer`);
INSERT INTO django_content_type VALUES(15,`main_app`,`taskcategory`);
INSERT INTO django_content_type VALUES(16,`main_app`,`ongoingcourse`);
INSERT INTO django_content_type VALUES(17,`main_app`,`performedcourse`);
INSERT INTO django_content_type VALUES(18,`main_app`,`tasktest`);
CREATE TABLE IF NOT EXISTS `auth_group_permissions` (`id` integer NOT NULL PRIMARY KEY AUTO_INCREMENT, `group_id` integer NOT NULL REFERENCES `auth_group` (`id`) , `permission_id` integer NOT NULL REFERENCES `auth_permission` (`id`) );
CREATE TABLE IF NOT EXISTS `auth_permission` (`id` integer NOT NULL PRIMARY KEY AUTO_INCREMENT, `content_type_id` integer NOT NULL REFERENCES `django_content_type` (`id`) , `codename` varchar(100) NOT NULL, `name` varchar(255) NOT NULL);
INSERT INTO auth_permission VALUES(1,1,`add_logentry`,`Can add log entry`);
INSERT INTO auth_permission VALUES(2,1,`change_logentry`,`Can change log entry`);
INSERT INTO auth_permission VALUES(3,1,`delete_logentry`,`Can delete log entry`);
INSERT INTO auth_permission VALUES(4,1,`view_logentry`,`Can view log entry`);
INSERT INTO auth_permission VALUES(5,2,`add_permission`,`Can add permission`);
INSERT INTO auth_permission VALUES(6,2,`change_permission`,`Can change permission`);
INSERT INTO auth_permission VALUES(7,2,`delete_permission`,`Can delete permission`);
INSERT INTO auth_permission VALUES(8,2,`view_permission`,`Can view permission`);
INSERT INTO auth_permission VALUES(9,3,`add_group`,`Can add group`);
INSERT INTO auth_permission VALUES(10,3,`change_group`,`Can change group`);
INSERT INTO auth_permission VALUES(11,3,`delete_group`,`Can delete group`);
INSERT INTO auth_permission VALUES(12,3,`view_group`,`Can view group`);
INSERT INTO auth_permission VALUES(13,4,`add_contenttype`,`Can add content type`);
INSERT INTO auth_permission VALUES(14,4,`change_contenttype`,`Can change content type`);
INSERT INTO auth_permission VALUES(15,4,`delete_contenttype`,`Can delete content type`);
INSERT INTO auth_permission VALUES(16,4,`view_contenttype`,`Can view content type`);
INSERT INTO auth_permission VALUES(17,5,`add_session`,`Can add session`);
INSERT INTO auth_permission VALUES(18,5,`change_session`,`Can change session`);
INSERT INTO auth_permission VALUES(19,5,`delete_session`,`Can delete session`);
INSERT INTO auth_permission VALUES(20,5,`view_session`,`Can view session`);
INSERT INTO auth_permission VALUES(21,6,`add_user`,`Can add user`);
INSERT INTO auth_permission VALUES(22,6,`change_user`,`Can change user`);
INSERT INTO auth_permission VALUES(23,6,`delete_user`,`Can delete user`);
INSERT INTO auth_permission VALUES(24,6,`view_user`,`Can view user`);
INSERT INTO auth_permission VALUES(25,7,`add_answer`,`Can add answer`);
INSERT INTO auth_permission VALUES(26,7,`change_answer`,`Can change answer`);
INSERT INTO auth_permission VALUES(27,7,`delete_answer`,`Can delete answer`);
INSERT INTO auth_permission VALUES(28,7,`view_answer`,`Can view answer`);
INSERT INTO auth_permission VALUES(29,8,`add_tutorialcategory`,`Can add tutorial category`);
INSERT INTO auth_permission VALUES(30,8,`change_tutorialcategory`,`Can change tutorial category`);
INSERT INTO auth_permission VALUES(31,8,`delete_tutorialcategory`,`Can delete tutorial category`);
INSERT INTO auth_permission VALUES(32,8,`view_tutorialcategory`,`Can view tutorial category`);
INSERT INTO auth_permission VALUES(33,9,`add_course`,`Can add course`);
INSERT INTO auth_permission VALUES(34,9,`change_course`,`Can change course`);
INSERT INTO auth_permission VALUES(35,9,`delete_course`,`Can delete course`);
INSERT INTO auth_permission VALUES(36,9,`view_course`,`Can view course`);
INSERT INTO auth_permission VALUES(37,10,`add_task`,`Can add task`);
INSERT INTO auth_permission VALUES(38,10,`change_task`,`Can change task`);
INSERT INTO auth_permission VALUES(39,10,`delete_task`,`Can delete task`);
INSERT INTO auth_permission VALUES(40,10,`view_task`,`Can view task`);
INSERT INTO auth_permission VALUES(41,11,`add_tutorial`,`Can add tutorial`);
INSERT INTO auth_permission VALUES(42,11,`change_tutorial`,`Can change tutorial`);
INSERT INTO auth_permission VALUES(43,11,`delete_tutorial`,`Can delete tutorial`);
INSERT INTO auth_permission VALUES(44,11,`view_tutorial`,`Can view tutorial`);
INSERT INTO auth_permission VALUES(45,12,`add_usercourse`,`Can add user course`);
INSERT INTO auth_permission VALUES(46,12,`change_usercourse`,`Can change user course`);
INSERT INTO auth_permission VALUES(47,12,`delete_usercourse`,`Can delete user course`);
INSERT INTO auth_permission VALUES(48,12,`view_usercourse`,`Can view user course`);
INSERT INTO auth_permission VALUES(49,13,`add_usertask`,`Can add user task`);
INSERT INTO auth_permission VALUES(50,13,`change_usertask`,`Can change user task`);
INSERT INTO auth_permission VALUES(51,13,`delete_usertask`,`Can delete user task`);
INSERT INTO auth_permission VALUES(52,13,`view_usertask`,`Can view user task`);
INSERT INTO auth_permission VALUES(53,14,`add_useranswer`,`Can add user answer`);
INSERT INTO auth_permission VALUES(54,14,`change_useranswer`,`Can change user answer`);
INSERT INTO auth_permission VALUES(55,14,`delete_useranswer`,`Can delete user answer`);
INSERT INTO auth_permission VALUES(56,14,`view_useranswer`,`Can view user answer`);
INSERT INTO auth_permission VALUES(57,15,`add_taskcategory`,`Can add task category`);
INSERT INTO auth_permission VALUES(58,15,`change_taskcategory`,`Can change task category`);
INSERT INTO auth_permission VALUES(59,15,`delete_taskcategory`,`Can delete task category`);
INSERT INTO auth_permission VALUES(60,15,`view_taskcategory`,`Can view task category`);
INSERT INTO auth_permission VALUES(61,16,`add_ongoingcourse`,`Can add ongoing course`);
INSERT INTO auth_permission VALUES(62,16,`change_ongoingcourse`,`Can change ongoing course`);
INSERT INTO auth_permission VALUES(63,16,`delete_ongoingcourse`,`Can delete ongoing course`);
INSERT INTO auth_permission VALUES(64,16,`view_ongoingcourse`,`Can view ongoing course`);
INSERT INTO auth_permission VALUES(65,17,`add_performedcourse`,`Can add performed course`);
INSERT INTO auth_permission VALUES(66,17,`change_performedcourse`,`Can change performed course`);
INSERT INTO auth_permission VALUES(67,17,`delete_performedcourse`,`Can delete performed course`);
INSERT INTO auth_permission VALUES(68,17,`view_performedcourse`,`Can view performed course`);
INSERT INTO auth_permission VALUES(69,18,`add_tasktest`,`Can add task test`);
INSERT INTO auth_permission VALUES(70,18,`change_tasktest`,`Can change task test`);
INSERT INTO auth_permission VALUES(71,18,`delete_tasktest`,`Can delete task test`);
INSERT INTO auth_permission VALUES(72,18,`view_tasktest`,`Can view task test`);
CREATE TABLE IF NOT EXISTS `auth_group` (`id` integer NOT NULL PRIMARY KEY AUTO_INCREMENT, `name` varchar(150) NOT NULL UNIQUE);
CREATE TABLE IF NOT EXISTS `main_app_user_groups` (`id` integer NOT NULL PRIMARY KEY AUTO_INCREMENT, `user_id` bigint NOT NULL REFERENCES `main_app_user` (`id`) , `group_id` integer NOT NULL REFERENCES `auth_group` (`id`) );
CREATE TABLE IF NOT EXISTS `main_app_user_user_permissions` (`id` integer NOT NULL PRIMARY KEY AUTO_INCREMENT, `user_id` bigint NOT NULL REFERENCES `main_app_user` (`id`) , `permission_id` integer NOT NULL REFERENCES `auth_permission` (`id`) );
CREATE TABLE IF NOT EXISTS `django_admin_log` (`id` integer NOT NULL PRIMARY KEY AUTO_INCREMENT, `object_id` text NULL, `object_repr` varchar(200) NOT NULL, `action_flag` smallint unsigned NOT NULL CHECK (`action_flag` >= 0), `change_message` text NOT NULL, `content_type_id` integer NULL REFERENCES `django_content_type` (`id`) , `user_id` bigint NOT NULL REFERENCES `main_app_user` (`id`) , `action_time` datetime NOT NULL);
INSERT INTO django_admin_log VALUES(1,`1`,`pete`,2,`[{`changed`: {`fields`: [`Etunimi`, `Sukunimi`]}}]`,6,1,`2023-09-27 18:33:56.412212`);
INSERT INTO django_admin_log VALUES(2,`2`,`pelammin`,1,`[{`added`: {}}]`,6,1,`2023-09-27 18:40:11.090623`);
INSERT INTO django_admin_log VALUES(3,`1`,`Python ohjelmoinnin perusteet`,1,`[{`added`: {}}]`,9,1,`2023-09-28 18:57:04.984737`);
INSERT INTO django_admin_log VALUES(4,`1`,`Python ohjelmoinnin perusteet`,2,`[]`,9,1,`2023-09-28 19:12:58.058358`);
INSERT INTO django_admin_log VALUES(5,`2`,`C ohjelmoinnin perusteet`,1,`[{`added`: {}}]`,9,1,`2023-09-28 20:27:55.894228`);
INSERT INTO django_admin_log VALUES(6,`3`,`JavaScript ohjelmoinnin perusteet`,1,`[{`added`: {}}]`,9,1,`2023-09-28 20:31:14.335322`);
INSERT INTO django_admin_log VALUES(7,`4`,`C++ ohjelmoinnin perusteet`,1,`[{`added`: {}}]`,9,1,`2023-09-28 20:33:44.191208`);
INSERT INTO django_admin_log VALUES(8,`3`,`hannuK`,1,`[{`added`: {}}]`,6,1,`2023-09-29 18:58:22.172993`);
INSERT INTO django_admin_log VALUES(9,`2`,`Python jatkokurssi`,2,`[{`changed`: {`fields`: [`CourseTitle`, `CourseDescription`]}}]`,9,1,`2023-09-30 01:58:01.888161`);
INSERT INTO django_admin_log VALUES(10,`3`,`Tietorakenteet ja algoritmit Pythonilla`,2,`[{`changed`: {`fields`: [`CourseTitle`, `CourseDescription`]}}]`,9,1,`2023-09-30 02:00:56.506285`);
INSERT INTO django_admin_log VALUES(11,`4`,`Python ohjelmointipähkinöitä`,2,`[{`changed`: {`fields`: [`CourseTitle`, `CourseDescription`]}}]`,9,1,`2023-09-30 02:04:14.898946`);
INSERT INTO django_admin_log VALUES(12,`1`,`Pythonin perusasiat`,1,`[{`added`: {}}]`,11,1,`2023-09-30 15:11:11.980309`);
INSERT INTO django_admin_log VALUES(13,`2`,`Python Ohjelman Rakenne`,1,`[{`added`: {}}]`,11,1,`2023-09-30 15:20:10.733463`);
INSERT INTO django_admin_log VALUES(14,`2`,`Python Ohjelman Rakenne`,2,`[{`changed`: {`fields`: [`Content`]}}]`,11,1,`2023-09-30 15:49:15.701468`);
INSERT INTO django_admin_log VALUES(15,`3`,`Tulostus ja Tiedon Kysyminen käyttäjältä`,1,`[{`added`: {}}]`,11,1,`2023-09-30 16:06:39.397526`);
INSERT INTO django_admin_log VALUES(16,`3`,`Tulostus ja Tiedon Kysyminen käyttäjältä`,2,`[{`changed`: {`fields`: [`Content`]}}]`,11,1,`2023-10-01 00:17:36.733948`);
INSERT INTO django_admin_log VALUES(17,`3`,`Tulostus ja Tiedon Kysyminen käyttäjältä`,2,`[{`changed`: {`fields`: [`Content`]}}]`,11,1,`2023-10-01 00:42:10.330855`);
INSERT INTO django_admin_log VALUES(18,`3`,`Tulostus ja Tiedon Kysyminen käyttäjältä`,2,`[{`changed`: {`fields`: [`Content`]}}]`,11,1,`2023-10-01 00:52:36.646096`);
INSERT INTO django_admin_log VALUES(19,`4`,`Luvut Pythonissa`,1,`[{`added`: {}}]`,11,1,`2023-10-01 00:53:35.340882`);
INSERT INTO django_admin_log VALUES(20,`2`,`Python Ohjelman Rakenne`,2,`[{`changed`: {`fields`: [`Content`]}}]`,11,1,`2023-10-01 01:08:55.783170`);
INSERT INTO django_admin_log VALUES(21,`2`,`Python Ohjelman Rakenne ja muuttujat`,2,`[{`changed`: {`fields`: [`Title`]}}]`,11,1,`2023-10-01 01:10:29.110042`);
INSERT INTO django_admin_log VALUES(22,`1`,`Hello world ohjelma Pythonilla`,1,`[{`added`: {}}, {`added`: {`name`: `answer`, `object`: `Answer object (1)`}}]`,10,1,`2023-10-01 06:44:41.142985`);
INSERT INTO django_admin_log VALUES(23,`1`,`Hello world ohjelma Pythonilla`,2,`[{`changed`: {`name`: `answer`, `object`: `Answer object (1)`, `fields`: [`AnswerOutput`]}}]`,10,1,`2023-10-01 06:46:27.175349`);
INSERT INTO django_admin_log VALUES(24,`1`,`Python ohjelmoinnin perusteet`,2,`[]`,9,1,`2023-10-01 11:07:31.496765`);
INSERT INTO django_admin_log VALUES(25,`2`,`Python jatkokurssi`,2,`[{`changed`: {`fields`: [`Prerequisites`]}}]`,9,1,`2023-10-01 11:08:20.848060`);
INSERT INTO django_admin_log VALUES(26,`1`,`Python ohjelmoinnin perusteet`,2,`[]`,9,1,`2023-10-01 11:16:02.935599`);
INSERT INTO django_admin_log VALUES(27,`5`,`Merkkijonot`,1,`[{`added`: {}}]`,11,1,`2023-10-01 14:25:18.468385`);
INSERT INTO django_admin_log VALUES(28,`2`,`Syötteen kysyminen käyttäjältä`,1,`[{`added`: {}}]`,10,1,`2023-10-01 15:15:44.021529`);
INSERT INTO django_admin_log VALUES(29,`1`,`Python perusteet`,2,`[{`changed`: {`fields`: [`CourseTitle`]}}]`,9,1,`2023-10-01 15:16:28.183698`);
INSERT INTO django_admin_log VALUES(30,`3`,`Luokat periminen`,1,`[{`added`: {}}, {`added`: {`name`: `answer`, `object`: `Answer object (2)`}}]`,10,1,`2023-10-01 15:19:36.604770`);
INSERT INTO django_admin_log VALUES(31,`4`,`Python koodaus ongelmat`,2,`[{`changed`: {`fields`: [`CourseTitle`]}}]`,9,1,`2023-10-01 15:52:32.011907`);
INSERT INTO django_admin_log VALUES(32,`4`,`Koodaushaastattelutehtävät Pythonilla`,2,`[{`changed`: {`fields`: [`CourseTitle`, `CourseDescription`]}}]`,9,1,`2023-10-01 16:18:39.928768`);
INSERT INTO django_admin_log VALUES(33,`4`,`Koodaushaastattelutehtävät Pythonilla`,2,`[{`changed`: {`fields`: [`CourseDescription`]}}]`,9,1,`2023-10-01 16:19:36.807583`);
INSERT INTO django_admin_log VALUES(34,`1`,`Python perusteet`,2,`[{`changed`: {`fields`: [`CourseDescription`]}}]`,9,1,`2023-10-01 16:22:10.909920`);
INSERT INTO django_admin_log VALUES(35,`3`,`Tietorakenteet ja algoritmit Pythonilla`,2,`[{`changed`: {`fields`: [`Is premium`]}}]`,9,1,`2023-10-01 17:10:53.551818`);
INSERT INTO django_admin_log VALUES(36,`4`,`Koodaushaastattelutehtävät Pythonilla`,2,`[{`changed`: {`fields`: [`Is premium`]}}]`,9,1,`2023-10-01 17:11:06.142973`);
INSERT INTO django_admin_log VALUES(37,`1`,`Pythonin perusasiat`,2,`[{`changed`: {`fields`: [`Description`]}}]`,11,1,`2023-10-02 20:01:33.638431`);
INSERT INTO django_admin_log VALUES(38,`1`,`Pythonin perusasiat`,2,`[{`changed`: {`fields`: [`Description`]}}]`,11,1,`2023-10-02 20:47:13.836901`);
INSERT INTO django_admin_log VALUES(39,`1`,`Pythonin perusasiat`,2,`[{`changed`: {`fields`: [`Description`]}}]`,11,1,`2023-10-02 20:57:34.840501`);
INSERT INTO django_admin_log VALUES(40,`1`,`Pythonin perusasiat`,2,`[{`changed`: {`fields`: [`Description`]}}]`,11,1,`2023-10-02 21:02:15.754512`);
INSERT INTO django_admin_log VALUES(41,`1`,`Pythonin perusasiat`,2,`[{`changed`: {`fields`: [`Description`]}}]`,11,1,`2023-10-02 21:03:19.745170`);
INSERT INTO django_admin_log VALUES(42,`1`,`Pythonin perusasiat`,2,`[{`changed`: {`fields`: [`Description`]}}]`,11,1,`2023-10-02 21:04:21.792408`);
INSERT INTO django_admin_log VALUES(43,`1`,`Python pähkinänkuoressa`,2,`[{`changed`: {`fields`: [`Title`]}}]`,11,1,`2023-10-02 21:06:46.018481`);
INSERT INTO django_admin_log VALUES(44,`1`,`Python pähkinänkuoressa`,2,`[{`changed`: {`fields`: [`Description`]}}]`,11,1,`2023-10-02 21:11:12.784277`);
INSERT INTO django_admin_log VALUES(45,`2`,`Python Ohjelman Rakenne ja muuttujat`,2,`[{`changed`: {`fields`: [`Description`]}}]`,11,1,`2023-10-02 21:14:00.069814`);
INSERT INTO django_admin_log VALUES(46,`3`,`Tulostus ja Tiedon Kysyminen käyttäjältä`,2,`[{`changed`: {`fields`: [`Description`]}}]`,11,1,`2023-10-03 17:00:53.501328`);
INSERT INTO django_admin_log VALUES(47,`3`,`Tulostus ja Tiedon Kysyminen käyttäjältä`,2,`[{`changed`: {`fields`: [`Description`]}}]`,11,1,`2023-10-03 17:01:45.863374`);
INSERT INTO django_admin_log VALUES(48,`2`,`Syötteen kysyminen käyttäjältä`,2,`[{`added`: {`name`: `answer`, `object`: `Answer object (3)`}}]`,10,1,`2023-10-03 22:16:33.312235`);
INSERT INTO django_admin_log VALUES(49,`4`,`Luvut Pythonissa`,2,`[{`changed`: {`fields`: [`Description`]}}]`,11,1,`2023-10-04 17:13:59.326843`);
INSERT INTO django_admin_log VALUES(50,`4`,`Luvut Pythonissa`,2,`[{`changed`: {`fields`: [`Content`]}}]`,11,1,`2023-10-04 17:51:49.174139`);
INSERT INTO django_admin_log VALUES(51,`4`,`Luvut Pythonissa`,2,`[{`changed`: {`fields`: [`Description`, `Content`]}}]`,11,1,`2023-10-04 18:12:18.532405`);
INSERT INTO django_admin_log VALUES(52,`4`,`Luvut Pythonissa`,2,`[{`changed`: {`fields`: [`Description`]}}]`,11,1,`2023-10-04 18:13:05.734658`);
INSERT INTO django_admin_log VALUES(53,`4`,`Luvut Pythonissa`,2,`[{`changed`: {`fields`: [`Content`]}}]`,11,1,`2023-10-04 18:16:01.489763`);
INSERT INTO django_admin_log VALUES(54,`4`,`Luvut Pythonissa`,2,`[{`changed`: {`fields`: [`Content`]}}]`,11,1,`2023-10-04 18:17:18.038462`);
INSERT INTO django_admin_log VALUES(55,`2`,`Syötteen kysyminen käyttäjältä`,2,`[{`changed`: {`fields`: [`TaskDescription`, `TaskStarterCode`, `TaskInputs`]}}, {`changed`: {`name`: `answer`, `object`: `Answer object (3)`, `fields`: [`AnswerText`, `AnswerOutput`]}}]`,10,1,`2023-10-04 19:46:37.167944`);
INSERT INTO django_admin_log VALUES(56,`4`,`Kokonaislukujen yhteenlasku ja tuloksen tulostaminen Python 3 kielessä`,1,`[{`added`: {}}, {`added`: {`name`: `answer`, `object`: `Answer object (4)`}}]`,10,1,`2023-10-04 19:55:23.063688`);
INSERT INTO django_admin_log VALUES(57,`5`,`Liukuluku muutujien yhteenlasku Python 3 kielessä`,1,`[{`added`: {}}, {`added`: {`name`: `answer`, `object`: `Answer object (5)`}}]`,10,1,`2023-10-04 20:01:00.390958`);
INSERT INTO django_admin_log VALUES(58,`1`,`Python pähkinänkuoressa`,2,`[{`changed`: {`fields`: [`Description`]}}]`,11,1,`2023-10-04 20:46:45.110959`);
INSERT INTO django_admin_log VALUES(59,`4`,`Luvut Pythonissa`,2,`[{`changed`: {`fields`: [`Description`]}}]`,11,1,`2023-10-04 20:47:03.120515`);
INSERT INTO django_admin_log VALUES(60,`4`,`Luvut Pythonissa`,2,`[]`,11,1,`2023-10-04 20:47:26.167856`);
INSERT INTO django_admin_log VALUES(61,`3`,`Tulostus ja Tiedon Kysyminen`,2,`[{`changed`: {`fields`: [`Title`, `Description`]}}]`,11,1,`2023-10-04 20:58:38.417152`);
INSERT INTO django_admin_log VALUES(62,`1`,`Python pähkinänkuoressa`,2,`[{`changed`: {`fields`: [`Description`]}}]`,11,1,`2023-10-04 21:00:16.897838`);
INSERT INTO django_admin_log VALUES(63,`5`,`Merkkijonot`,2,`[{`changed`: {`fields`: [`Description`]}}]`,11,1,`2023-10-04 21:04:38.326686`);
INSERT INTO django_admin_log VALUES(64,`1`,`Python pähkinänkuoressa`,2,`[]`,11,1,`2023-10-04 21:18:23.498882`);
INSERT INTO django_admin_log VALUES(65,`1`,`Python pähkinänkuoressa`,2,`[{`changed`: {`fields`: [`Content`]}}]`,11,1,`2023-10-04 21:22:40.143364`);
INSERT INTO django_admin_log VALUES(66,`1`,`Python pähkinänkuoressa`,2,`[{`changed`: {`fields`: [`Content`]}}]`,11,1,`2023-10-04 21:25:09.925907`);
INSERT INTO django_admin_log VALUES(67,`5`,`Liukuluku muutujien yhteenlasku Python 3 kielessä`,2,`[{`changed`: {`fields`: [`TaskStarterCode`]}}]`,10,1,`2023-10-04 22:06:33.140762`);
INSERT INTO django_admin_log VALUES(68,`4`,`Kokonaislukujen yhteenlasku ja tuloksen tulostaminen Python 3 kielessä`,2,`[{`changed`: {`fields`: [`TaskStarterCode`]}}]`,10,1,`2023-10-04 22:07:27.574790`);
INSERT INTO django_admin_log VALUES(69,`4`,`pehella`,1,`[{`added`: {}}]`,6,1,`2023-10-05 15:53:42.895609`);
INSERT INTO django_admin_log VALUES(70,`6`,`Toistolauseet`,1,`[{`added`: {}}]`,11,1,`2023-10-05 16:19:12.666483`);
INSERT INTO django_admin_log VALUES(71,`7`,`Ehtolauseet`,1,`[{`added`: {}}]`,11,1,`2023-10-05 16:24:42.580986`);
INSERT INTO django_admin_log VALUES(72,`8`,`Perus säiliöluokat Listat, tuplet ja setit`,1,`[{`added`: {}}]`,11,1,`2023-10-05 16:30:22.346546`);
INSERT INTO django_admin_log VALUES(73,`9`,`Python aliohjelmat`,1,`[{`added`: {}}]`,11,1,`2023-10-05 16:36:03.072332`);
INSERT INTO django_admin_log VALUES(74,`6`,`Toistolauseet`,2,`[{`changed`: {`fields`: [`Description`]}}]`,11,1,`2023-10-05 16:36:55.837748`);
INSERT INTO django_admin_log VALUES(75,`10`,`Dicinary(sanakirjat)`,1,`[{`added`: {}}]`,11,1,`2023-10-05 16:38:44.387782`);
INSERT INTO django_admin_log VALUES(76,`11`,`Luokat/Oliot Pythonissa`,1,`[{`added`: {}}]`,11,1,`2023-10-05 16:40:40.930100`);
INSERT INTO django_admin_log VALUES(77,`4`,`Kokonaislukujen yhteenlasku ja tuloksen tulostaminen Python 3 kielessä`,2,`[]`,10,1,`2023-10-05 19:22:32.932220`);
INSERT INTO django_admin_log VALUES(78,`5`,`Liukuluku muutujien yhteenlasku Python 3 kielessä`,2,`[]`,10,1,`2023-10-05 19:22:48.073349`);
INSERT INTO django_admin_log VALUES(79,`6`,`Yksinkertaisen merkkijonon luominen Pythonissa`,1,`[{`added`: {}}, {`added`: {`name`: `answer`, `object`: `Answer object (6)`}}]`,10,1,`2023-10-05 19:27:18.326703`);
INSERT INTO django_admin_log VALUES(80,`7`,`Monirivisten merkkijonojen luominen`,1,`[{`added`: {}}, {`added`: {`name`: `answer`, `object`: `Answer object (7)`}}]`,10,1,`2023-10-05 19:29:46.083951`);
INSERT INTO django_admin_log VALUES(81,`8`,`Merkkijonot ja erikoismerkit Pythonissa`,1,`[{`added`: {}}, {`added`: {`name`: `answer`, `object`: `Answer object (8)`}}]`,10,1,`2023-10-05 19:33:14.033485`);
INSERT INTO django_admin_log VALUES(82,`9`,`Yksittäiset ja kaksoislainausmerkit merkkijonossa`,1,`[{`added`: {}}, {`added`: {`name`: `answer`, `object`: `Answer object (9)`}}]`,10,1,`2023-10-05 19:36:34.011031`);
INSERT INTO django_admin_log VALUES(83,`10`,`Merkkijonon merkkeihin viittaaminen`,1,`[{`added`: {}}, {`added`: {`name`: `answer`, `object`: `Answer object (10)`}}]`,10,1,`2023-10-05 19:39:48.956035`);
INSERT INTO django_admin_log VALUES(84,`2`,`Olio-ohjelmoint Pythonilla`,2,`[{`changed`: {`fields`: [`CourseTitle`, `CourseDescription`, `Is premium`]}}]`,9,1,`2023-10-06 13:31:20.995199`);
INSERT INTO django_admin_log VALUES(85,`5`,`Merkkijonot`,2,`[{`changed`: {`fields`: [`Description`]}}]`,11,1,`2023-10-06 15:59:49.155546`);
INSERT INTO django_admin_log VALUES(86,`1`,`Hello world ohjelma Pythonilla`,2,`[{`changed`: {`fields`: [`Tutorial`]}}]`,10,1,`2023-10-06 16:01:57.569004`);
INSERT INTO django_admin_log VALUES(87,`2`,`Syötteen kysyminen käyttäjältä`,2,`[{`changed`: {`fields`: [`Tutorial`]}}]`,10,1,`2023-10-06 16:02:44.688501`);
INSERT INTO django_admin_log VALUES(88,`5`,`Merkkijonot`,2,`[{`changed`: {`fields`: [`Content`]}}]`,11,1,`2023-10-06 18:58:18.683026`);
INSERT INTO django_admin_log VALUES(89,`6`,`Toistolauseet/silmukat`,2,`[{`changed`: {`fields`: [`Title`, `Content`]}}]`,11,1,`2023-10-06 19:42:33.327786`);
INSERT INTO django_admin_log VALUES(90,`8`,`Pythonin säiliöluokat Listat, tuplet ja setit`,2,`[{`changed`: {`fields`: [`Title`]}}]`,11,1,`2023-10-06 19:43:24.096858`);
INSERT INTO django_admin_log VALUES(91,`8`,`Pythonin säiliöluokat Listat, tuplet ja setit`,2,`[{`changed`: {`fields`: [`Description`]}}]`,11,1,`2023-10-06 19:45:02.809125`);
INSERT INTO django_admin_log VALUES(92,`6`,`Toistolauseet/silmukat`,2,`[{`changed`: {`fields`: [`Description`]}}]`,11,1,`2023-10-06 19:45:19.185353`);
INSERT INTO django_admin_log VALUES(93,`7`,`Ehtolauseet`,2,`[{`changed`: {`fields`: [`Content`]}}]`,11,1,`2023-10-07 00:23:45.572353`);
INSERT INTO django_admin_log VALUES(94,`8`,`Pythonin tietorakenteet`,2,`[{`changed`: {`fields`: [`Title`]}}]`,11,1,`2023-10-07 00:29:55.142054`);
INSERT INTO django_admin_log VALUES(95,`10`,`Tiedosyojen käsittely`,2,`[{`changed`: {`fields`: [`Title`]}}]`,11,1,`2023-10-07 00:30:40.368128`);
INSERT INTO django_admin_log VALUES(96,`12`,`Lambda funktio Pythonissa`,1,`[{`added`: {}}]`,11,1,`2023-10-07 00:31:41.931090`);
INSERT INTO django_admin_log VALUES(97,`13`,`Poikkeuksien käsittely Pythonissa`,1,`[{`added`: {}}]`,11,1,`2023-10-07 00:33:22.064059`);
INSERT INTO django_admin_log VALUES(98,`8`,`Pythonin tietorakenteet`,2,`[{`changed`: {`fields`: [`Content`]}}]`,11,1,`2023-10-07 17:23:30.137214`);
INSERT INTO django_admin_log VALUES(99,`9`,`Python aliohjelmat`,2,`[{`changed`: {`fields`: [`Content`]}}]`,11,1,`2023-10-07 17:33:56.795499`);
INSERT INTO django_admin_log VALUES(100,`10`,`Tiedostojen käsittely Pythonissa`,2,`[{`changed`: {`fields`: [`Title`, `Description`, `Content`]}}]`,11,1,`2023-10-07 17:45:39.328067`);
INSERT INTO django_admin_log VALUES(101,`11`,`Luokat/Oliot Pythonissa`,2,`[{`changed`: {`fields`: [`Content`]}}]`,11,1,`2023-10-07 17:53:06.568326`);
INSERT INTO django_admin_log VALUES(102,`11`,`Luokat/Oliot Pythonissa`,2,`[{`changed`: {`fields`: [`Content`]}}]`,11,1,`2023-10-07 17:54:31.608186`);
INSERT INTO django_admin_log VALUES(103,`11`,`Luokat/Oliot Pythonissa`,2,`[{`changed`: {`fields`: [`Content`]}}]`,11,1,`2023-10-07 19:49:33.264191`);
INSERT INTO django_admin_log VALUES(104,`11`,`Luokat/Oliot Pythonissa`,2,`[{`changed`: {`fields`: [`Content`]}}]`,11,1,`2023-10-07 19:54:44.312524`);
INSERT INTO django_admin_log VALUES(105,`12`,`Lambda funktio Pythonissa`,2,`[{`changed`: {`fields`: [`Description`, `Content`]}}]`,11,1,`2023-10-07 19:59:02.256232`);
INSERT INTO django_admin_log VALUES(106,`11`,`Luokat/Oliot Pythonissa`,2,`[{`changed`: {`fields`: [`Description`]}}]`,11,1,`2023-10-07 20:01:28.220653`);
INSERT INTO django_admin_log VALUES(107,`13`,`Poikkeuksien käsittely Pythonissa`,2,`[{`changed`: {`fields`: [`Content`]}}]`,11,1,`2023-10-07 20:03:58.457753`);
INSERT INTO django_admin_log VALUES(108,`13`,`Poikkeuksien käsittely Pythonissa`,2,`[{`changed`: {`fields`: [`Description`, `Content`]}}]`,11,1,`2023-10-07 20:11:42.233639`);
INSERT INTO django_admin_log VALUES(109,`13`,`Poikkeuksien käsittely Pythonissa`,2,`[{`changed`: {`fields`: [`Content`]}}]`,11,1,`2023-10-07 20:12:33.955496`);
INSERT INTO django_admin_log VALUES(110,`4`,`Kokonaislukujen yhteenlasku ja tuloksen tulostaminen Python 3 kielessä`,2,`[]`,10,1,`2023-10-09 14:42:17.350732`);
INSERT INTO django_admin_log VALUES(111,`5`,`Liukuluku muutujien yhteenlasku Python 3 kielessä`,2,`[]`,10,1,`2023-10-09 14:42:35.584111`);
INSERT INTO django_admin_log VALUES(112,`6`,`Yksinkertaisen merkkijonon luominen Pythonissa`,2,`[]`,10,1,`2023-10-09 14:42:57.517472`);
INSERT INTO django_admin_log VALUES(113,`11`,`Tulostus aliohjelma`,1,`[{`added`: {}}, {`added`: {`name`: `answer`, `object`: `Answer object (11)`}}]`,10,1,`2023-10-09 14:49:12.447707`);
INSERT INTO django_admin_log VALUES(114,`12`,`Parametrien välitys Python aliohjelmissa`,1,`[{`added`: {}}, {`added`: {`name`: `answer`, `object`: `Answer object (12)`}}]`,10,1,`2023-10-09 14:52:40.666149`);
INSERT INTO django_admin_log VALUES(115,`13`,`Yhteenlasku aliohjelma`,1,`[{`added`: {}}, {`added`: {`name`: `answer`, `object`: `Answer object (13)`}}]`,10,1,`2023-10-09 14:54:56.161167`);
INSERT INTO django_admin_log VALUES(116,`14`,`Liukulukujen laskeminen aliohjelmilla`,1,`[{`added`: {}}]`,10,1,`2023-10-09 14:56:58.577409`);
INSERT INTO django_admin_log VALUES(117,`15`,`Listojen perusteita Pythonissa`,1,`[{`added`: {}}, {`added`: {`name`: `answer`, `object`: `Answer object (14)`}}]`,10,1,`2023-10-09 15:00:24.446759`);
INSERT INTO django_admin_log VALUES(118,`16`,`Listan muokkaus ja pituuden tutkiminen`,1,`[{`added`: {}}, {`added`: {`name`: `answer`, `object`: `Answer object (15)`}}]`,10,1,`2023-10-09 15:04:33.889111`);
INSERT INTO django_admin_log VALUES(119,`17`,`Moniulotteisten listojen perusteet`,1,`[{`added`: {}}, {`added`: {`name`: `answer`, `object`: `Answer object (16)`}}]`,10,1,`2023-10-09 15:08:25.100006`);
INSERT INTO django_admin_log VALUES(120,`18`,`For-silmukan perusteet Pythonissa`,1,`[{`added`: {}}, {`added`: {`name`: `answer`, `object`: `Answer object (17)`}}]`,10,1,`2023-10-09 15:10:29.427312`);
INSERT INTO django_admin_log VALUES(121,`1`,`Tulostus/syöteen kysyminen`,1,`[{`added`: {}}]`,15,1,`2023-10-09 17:13:20.022489`);
INSERT INTO django_admin_log VALUES(122,`2`,`Luvut`,1,`[{`added`: {}}]`,15,1,`2023-10-09 17:13:41.163904`);
INSERT INTO django_admin_log VALUES(123,`3`,`tietorakenteet`,1,`[{`added`: {}}]`,15,1,`2023-10-09 17:14:10.001299`);
INSERT INTO django_admin_log VALUES(124,`4`,`Silmukat`,1,`[{`added`: {}}]`,15,1,`2023-10-09 17:14:22.020195`);
INSERT INTO django_admin_log VALUES(125,`5`,`Ehtolauseet`,1,`[{`added`: {}}]`,15,1,`2023-10-09 17:14:36.107615`);
INSERT INTO django_admin_log VALUES(126,`6`,`Tiedostot`,1,`[{`added`: {}}]`,15,1,`2023-10-09 17:14:57.186700`);
INSERT INTO django_admin_log VALUES(127,`7`,`Luokat`,1,`[{`added`: {}}]`,15,1,`2023-10-09 17:15:25.066037`);
INSERT INTO django_admin_log VALUES(128,`8`,`Poikkeukset`,1,`[{`added`: {}}]`,15,1,`2023-10-09 17:15:45.604295`);
INSERT INTO django_admin_log VALUES(129,`9`,`funktiot`,1,`[{`added`: {}}]`,15,1,`2023-10-09 17:16:31.252591`);
INSERT INTO django_admin_log VALUES(130,`1`,`Hello world ohjelma Pythonilla`,2,`[]`,10,1,`2023-10-09 17:17:22.509790`);
INSERT INTO django_admin_log VALUES(131,`2`,`Syötteen kysyminen käyttäjältä`,2,`[{`changed`: {`fields`: [`Category`]}}]`,10,1,`2023-10-09 17:30:43.910928`);
INSERT INTO django_admin_log VALUES(132,`4`,`Kokonaislukujen yhteenlasku ja tuloksen tulostaminen Python 3 kielessä`,2,`[{`changed`: {`fields`: [`Category`]}}]`,10,1,`2023-10-09 17:31:50.401751`);
INSERT INTO django_admin_log VALUES(133,`3`,`Funktiot`,2,`[{`changed`: {`fields`: [`Name`]}}]`,15,1,`2023-10-09 17:32:48.751802`);
INSERT INTO django_admin_log VALUES(134,`7`,`Tietorakentet`,2,`[{`changed`: {`fields`: [`Name`]}}]`,15,1,`2023-10-09 17:33:30.680277`);
INSERT INTO django_admin_log VALUES(135,`9`,`Luokat`,2,`[{`changed`: {`fields`: [`Name`]}}]`,15,1,`2023-10-09 17:34:00.430369`);
INSERT INTO django_admin_log VALUES(136,`1`,`Hello world ohjelma Pythonilla`,2,`[{`changed`: {`fields`: [`Category`]}}]`,10,1,`2023-10-09 17:35:08.408486`);
INSERT INTO django_admin_log VALUES(137,`2`,`Syötteen kysyminen käyttäjältä`,2,`[]`,10,1,`2023-10-09 17:35:26.642680`);
INSERT INTO django_admin_log VALUES(138,`4`,`Kokonaislukujen yhteenlasku ja tuloksen tulostaminen Python 3 kielessä`,2,`[]`,10,1,`2023-10-09 17:35:55.287623`);
INSERT INTO django_admin_log VALUES(139,`5`,`Liukuluku muutujien yhteenlasku Python 3 kielessä`,2,`[{`changed`: {`fields`: [`Category`]}}]`,10,1,`2023-10-09 17:37:23.205219`);
INSERT INTO django_admin_log VALUES(140,`3`,`Merkkijonot`,2,`[{`changed`: {`fields`: [`Name`]}}]`,15,1,`2023-10-09 17:38:36.207316`);
INSERT INTO django_admin_log VALUES(141,`6`,`Funktiot`,2,`[{`changed`: {`fields`: [`Name`]}}]`,15,1,`2023-10-09 17:39:03.890651`);
INSERT INTO django_admin_log VALUES(142,`8`,`Tiedostot`,2,`[{`changed`: {`fields`: [`Name`]}}]`,15,1,`2023-10-09 17:39:45.162741`);
INSERT INTO django_admin_log VALUES(143,`10`,`Poikkeukset`,1,`[{`added`: {}}]`,15,1,`2023-10-09 17:40:09.584625`);
INSERT INTO django_admin_log VALUES(144,`18`,`For-silmukan perusteet Pythonissa`,2,`[{`changed`: {`fields`: [`Category`]}}]`,10,1,`2023-10-09 18:33:38.595453`);
INSERT INTO django_admin_log VALUES(145,`17`,`Moniulotteisten listojen perusteet`,2,`[{`changed`: {`fields`: [`Category`]}}]`,10,1,`2023-10-09 18:34:00.260875`);
INSERT INTO django_admin_log VALUES(146,`16`,`Listan muokkaus ja pituuden tutkiminen`,2,`[{`changed`: {`fields`: [`Category`]}}]`,10,1,`2023-10-09 18:34:23.882682`);
INSERT INTO django_admin_log VALUES(147,`15`,`Listojen perusteita Pythonissa`,2,`[{`changed`: {`fields`: [`Category`]}}]`,10,1,`2023-10-09 18:34:47.362701`);
INSERT INTO django_admin_log VALUES(148,`14`,`Liukulukujen laskeminen aliohjelmilla`,2,`[{`changed`: {`fields`: [`Category`]}}]`,10,1,`2023-10-09 18:35:09.029954`);
INSERT INTO django_admin_log VALUES(149,`13`,`Yhteenlasku aliohjelma`,2,`[]`,10,1,`2023-10-09 18:35:21.518888`);
INSERT INTO django_admin_log VALUES(150,`13`,`Yhteenlasku aliohjelma`,2,`[{`changed`: {`fields`: [`Category`]}}]`,10,1,`2023-10-09 18:35:57.350866`);
INSERT INTO django_admin_log VALUES(151,`12`,`Parametrien välitys Python aliohjelmissa`,2,`[{`changed`: {`fields`: [`Category`]}}]`,10,1,`2023-10-09 18:36:15.122878`);
INSERT INTO django_admin_log VALUES(152,`12`,`Parametrien välitys Python aliohjelmissa`,2,`[]`,10,1,`2023-10-09 18:36:43.416636`);
INSERT INTO django_admin_log VALUES(153,`12`,`Parametrien välitys Python aliohjelmissa`,2,`[]`,10,1,`2023-10-09 18:37:02.645314`);
INSERT INTO django_admin_log VALUES(154,`11`,`Tulostus aliohjelma`,2,`[{`changed`: {`fields`: [`Category`]}}]`,10,1,`2023-10-09 18:40:10.669252`);
INSERT INTO django_admin_log VALUES(155,`10`,`Merkkijonon merkkeihin viittaaminen`,2,`[{`changed`: {`fields`: [`Category`]}}]`,10,1,`2023-10-09 18:42:05.315227`);
INSERT INTO django_admin_log VALUES(156,`9`,`Yksittäiset ja kaksoislainausmerkit merkkijonossa`,2,`[{`changed`: {`fields`: [`Category`]}}]`,10,1,`2023-10-09 18:42:29.871840`);
INSERT INTO django_admin_log VALUES(157,`7`,`Monirivisten merkkijonojen luominen`,2,`[{`changed`: {`fields`: [`Category`]}}]`,10,1,`2023-10-09 18:42:47.842582`);
INSERT INTO django_admin_log VALUES(158,`8`,`Merkkijonot ja erikoismerkit Pythonissa`,2,`[{`changed`: {`fields`: [`Category`]}}]`,10,1,`2023-10-09 18:43:10.983809`);
INSERT INTO django_admin_log VALUES(159,`6`,`Yksinkertaisen merkkijonon luominen Pythonissa`,2,`[{`changed`: {`fields`: [`Category`]}}]`,10,1,`2023-10-09 18:45:20.414874`);
INSERT INTO django_admin_log VALUES(160,`13`,`Yhteenlasku aliohjelma`,2,`[{`changed`: {`fields`: [`Category`]}}]`,10,1,`2023-10-09 18:49:48.507853`);
INSERT INTO django_admin_log VALUES(161,`14`,`Liukulukujen laskeminen aliohjelmilla`,2,`[{`changed`: {`fields`: [`Category`]}}]`,10,1,`2023-10-09 18:50:39.449048`);
INSERT INTO django_admin_log VALUES(162,`5`,`focus`,1,`[{`added`: {}}]`,6,1,`2023-10-09 19:15:35.983379`);
INSERT INTO django_admin_log VALUES(163,`5`,`focus`,2,`[]`,6,1,`2023-10-09 23:24:50.485876`);
INSERT INTO django_admin_log VALUES(164,`5`,`Liukuluku muutujien yhteenlasku Python 3 kielessä`,2,`[{`changed`: {`fields`: [`TaskStarterCode`]}}]`,10,1,`2023-10-10 20:28:35.548958`);
INSERT INTO django_admin_log VALUES(165,`6`,`Toistolauseet/silmukat`,2,`[{`changed`: {`fields`: [`Content`]}}]`,11,1,`2023-10-14 14:32:02.685852`);
INSERT INTO django_admin_log VALUES(166,`13`,`Poikkeuksien käsittely Pythonissa`,2,`[{`changed`: {`fields`: [`Content`]}}]`,11,1,`2023-10-14 14:43:43.829671`);
INSERT INTO django_admin_log VALUES(167,`12`,`Lambda funktio Pythonissa`,2,`[{`changed`: {`fields`: [`Content`]}}]`,11,1,`2023-10-14 14:46:48.939855`);
INSERT INTO django_admin_log VALUES(168,`11`,`Luokat/Oliot Pythonissa`,2,`[{`changed`: {`fields`: [`Content`]}}]`,11,1,`2023-10-14 14:52:00.348222`);
INSERT INTO django_admin_log VALUES(169,`10`,`Tiedostojen käsittely Pythonissa`,2,`[]`,11,1,`2023-10-14 14:52:33.250429`);
INSERT INTO django_admin_log VALUES(170,`9`,`Python aliohjelmat`,2,`[]`,11,1,`2023-10-14 14:53:34.706034`);
INSERT INTO django_admin_log VALUES(171,`12`,`Lambda funktio Pythonissa`,2,`[{`changed`: {`fields`: [`Content`]}}]`,11,1,`2023-10-14 14:54:31.067375`);
INSERT INTO django_admin_log VALUES(172,`2`,`Python Ohjelman Rakenne ja muuttujat`,2,`[{`changed`: {`fields`: [`Description`]}}]`,11,1,`2023-10-14 14:56:06.793593`);
INSERT INTO django_admin_log VALUES(173,`2`,`Python Ohjelman Rakenne ja muuttujat`,2,`[{`changed`: {`fields`: [`Content`]}}]`,11,1,`2023-10-14 15:28:15.143474`);
INSERT INTO django_admin_log VALUES(174,`9`,`Python aliohjelmat`,2,`[{`changed`: {`fields`: [`Description`]}}]`,11,1,`2023-10-14 15:30:02.214465`);
INSERT INTO django_admin_log VALUES(175,`2`,`Olio-ohjelmointi Pythonilla`,2,`[{`changed`: {`fields`: [`CourseTitle`]}}]`,9,1,`2023-10-14 15:31:32.429043`);
INSERT INTO django_admin_log VALUES(176,`4`,`Kokonaislukujen yhteenlasku`,2,`[{`changed`: {`fields`: [`TaskTitle`]}}]`,10,1,`2023-10-14 18:01:54.380778`);
INSERT INTO django_admin_log VALUES(177,`5`,`Liukuluku muutujien yhteenlasku`,2,`[{`changed`: {`fields`: [`TaskTitle`]}}]`,10,1,`2023-10-14 18:32:56.405251`);
INSERT INTO django_admin_log VALUES(178,`6`,`Merkkijonon luominen Pythonissa`,2,`[{`changed`: {`fields`: [`TaskTitle`, `TaskDescription`]}}]`,10,1,`2023-10-14 18:33:52.367899`);
INSERT INTO django_admin_log VALUES(179,`6`,`Merkkijonon luominen Pythonissa`,2,`[{`changed`: {`name`: `answer`, `object`: `Vastaus teht\u00e4v\u00e4\u00e4n: Merkkijonon luominen Pythonissa`, `fields`: [`AnswerText`]}}]`,10,1,`2023-10-14 23:02:32.259500`);
INSERT INTO django_admin_log VALUES(180,`4`,`Kokonaislukujen yhteenlasku`,2,`[{`added`: {`name`: `task test`, `object`: `Test for Kokonaislukujen yhteenlasku`}}]`,10,1,`2023-10-16 20:01:22.038025`);
INSERT INTO django_admin_log VALUES(181,`4`,`Kokonaislukujen yhteenlasku`,2,`[{`changed`: {`fields`: [`TaskDescription`]}}, {`changed`: {`name`: `task test`, `object`: `Test for Kokonaislukujen yhteenlasku`, `fields`: [`Test code`]}}]`,10,1,`2023-10-17 15:02:50.373605`);
INSERT INTO django_admin_log VALUES(182,`5`,`Liukuluku muutujien yhteenlasku`,2,`[{`added`: {`name`: `task test`, `object`: `Test for Liukuluku muutujien yhteenlasku`}}]`,10,1,`2023-10-18 14:43:14.902748`);
INSERT INTO django_admin_log VALUES(183,`6`,`Merkkijonon luominen Pythonissa`,2,`[{`added`: {`name`: `task test`, `object`: `Test for Merkkijonon luominen Pythonissa`}}]`,10,1,`2023-10-18 14:58:53.100879`);
INSERT INTO django_admin_log VALUES(184,`7`,`Monirivisten merkkijonojen luominen`,2,`[{`changed`: {`fields`: [`TaskDescription`]}}, {`added`: {`name`: `task test`, `object`: `Test for Monirivisten merkkijonojen luominen`}}]`,10,1,`2023-10-18 15:03:30.657361`);
INSERT INTO django_admin_log VALUES(185,`8`,`Merkkijonot ja erikoismerkit Pythonissa`,2,`[{`added`: {`name`: `task test`, `object`: `Test for Merkkijonot ja erikoismerkit Pythonissa`}}]`,10,1,`2023-10-18 15:06:29.613883`);
INSERT INTO django_admin_log VALUES(186,`9`,`Yksittäiset ja kaksoislainausmerkit merkkijonossa`,2,`[{`added`: {`name`: `task test`, `object`: `Test for Yksitt\u00e4iset ja kaksoislainausmerkit merkkijonossa`}}]`,10,1,`2023-10-18 15:09:58.628538`);
INSERT INTO django_admin_log VALUES(187,`10`,`Merkkijonon merkkeihin viittaaminen`,2,`[{`added`: {`name`: `task test`, `object`: `Test for Merkkijonon merkkeihin viittaaminen`}}]`,10,1,`2023-10-18 15:14:10.615654`);
INSERT INTO django_admin_log VALUES(188,`11`,`Tulostus aliohjelma`,2,`[{`added`: {`name`: `task test`, `object`: `Test for Tulostus aliohjelma`}}]`,10,1,`2023-10-18 15:18:23.318336`);
INSERT INTO django_admin_log VALUES(189,`11`,`Tulostus aliohjelma`,2,`[]`,10,1,`2023-10-18 15:44:54.815973`);
INSERT INTO django_admin_log VALUES(190,`8`,`Merkkijonot ja erikoismerkit Pythonissa`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for Merkkijonot ja erikoismerkit Pythonissa`, `fields`: [`Test code`]}}]`,10,1,`2023-10-18 15:45:56.052206`);
INSERT INTO django_admin_log VALUES(191,`9`,`Yksittäiset ja kaksoislainausmerkit merkkijonossa`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for Yksitt\u00e4iset ja kaksoislainausmerkit merkkijonossa`, `fields`: [`Test code`]}}]`,10,1,`2023-10-18 15:47:01.915728`);
INSERT INTO django_admin_log VALUES(192,`10`,`Merkkijonon merkkeihin viittaaminen`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for Merkkijonon merkkeihin viittaaminen`, `fields`: [`Test code`]}}]`,10,1,`2023-10-18 15:49:19.935257`);
INSERT INTO django_admin_log VALUES(193,`9`,`Yksittäiset ja kaksoislainausmerkit merkkijonossa`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for Yksitt\u00e4iset ja kaksoislainausmerkit merkkijonossa`, `fields`: [`Test code`]}}]`,10,1,`2023-10-18 15:50:05.389735`);
INSERT INTO django_admin_log VALUES(194,`6`,`Merkkijonon luominen Pythonissa`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for Merkkijonon luominen Pythonissa`, `fields`: [`Answer`, `Test code`]}}]`,10,1,`2023-10-18 15:50:57.682696`);
INSERT INTO django_admin_log VALUES(195,`5`,`Liukuluku muutujien yhteenlasku`,2,`[]`,10,1,`2023-10-18 15:53:51.169481`);
INSERT INTO django_admin_log VALUES(196,`6`,`Merkkijonon luominen Pythonissa`,2,`[]`,10,1,`2023-10-18 15:54:21.424180`);
INSERT INTO django_admin_log VALUES(197,`5`,`Liukuluku muutujien yhteenlasku`,2,`[]`,10,1,`2023-10-18 16:03:11.282778`);
INSERT INTO django_admin_log VALUES(198,`12`,`Parametrien välitys Python aliohjelmissa`,2,`[{`added`: {`name`: `task test`, `object`: `Test for Parametrien v\u00e4litys Python aliohjelmissa`}}]`,10,1,`2023-10-18 16:17:40.398465`);
INSERT INTO django_admin_log VALUES(199,`12`,`Parametrien välitys Python aliohjelmissa`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for Parametrien v\u00e4litys Python aliohjelmissa`, `fields`: [`Test code`]}}]`,10,1,`2023-10-18 16:20:58.784035`);
INSERT INTO django_admin_log VALUES(200,`12`,`Parametrien välitys Python aliohjelmissa`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for Parametrien v\u00e4litys Python aliohjelmissa`, `fields`: [`Test code`]}}]`,10,1,`2023-10-18 16:32:25.245599`);
INSERT INTO django_admin_log VALUES(201,`13`,`Yhteenlasku aliohjelma`,2,`[{`added`: {`name`: `task test`, `object`: `Test for Yhteenlasku aliohjelma`}}]`,10,1,`2023-10-18 17:27:20.298038`);
INSERT INTO django_admin_log VALUES(202,`1`,`Hello world ohjelma Pythonilla`,2,`[{`added`: {`name`: `task test`, `object`: `Test for Hello world ohjelma Pythonilla`}}]`,10,1,`2023-10-18 18:38:18.012316`);
INSERT INTO django_admin_log VALUES(203,`1`,`Hello world ohjelma Pythonilla`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for Hello world ohjelma Pythonilla`, `fields`: [`Test code`]}}]`,10,1,`2023-10-18 18:45:40.523229`);
INSERT INTO django_admin_log VALUES(204,`1`,`Hello world ohjelma Pythonilla`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for Hello world ohjelma Pythonilla`, `fields`: [`Test code`]}}]`,10,1,`2023-10-18 18:47:44.303622`);
INSERT INTO django_admin_log VALUES(205,`1`,`Hello world ohjelma Pythonilla`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for Hello world ohjelma Pythonilla`, `fields`: [`Test code`]}}]`,10,1,`2023-10-18 19:03:58.627986`);
INSERT INTO django_admin_log VALUES(206,`1`,`Hello world ohjelma Pythonilla`,2,`[{`added`: {`name`: `task test`, `object`: `Test for Hello world ohjelma Pythonilla`}}]`,10,1,`2023-10-18 19:12:20.676799`);
INSERT INTO django_admin_log VALUES(207,`1`,`Hello world ohjelma Pythonilla`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for Hello world ohjelma Pythonilla`, `fields`: [`Test code`]}}, {`changed`: {`name`: `task test`, `object`: `Test for Hello world ohjelma Pythonilla`, `fields`: [`Test code`]}}]`,10,1,`2023-10-18 19:15:12.346705`);
INSERT INTO django_admin_log VALUES(208,`1`,`Hello world ohjelma Pythonilla`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for Hello world ohjelma Pythonilla`, `fields`: [`Test code`]}}]`,10,1,`2023-10-18 19:17:21.698917`);
INSERT INTO django_admin_log VALUES(209,`1`,`Hello world ohjelma Pythonilla`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for Hello world ohjelma Pythonilla`, `fields`: [`Test code`]}}]`,10,1,`2023-10-18 19:31:14.136540`);
INSERT INTO django_admin_log VALUES(210,`1`,`Hello world ohjelma Pythonilla`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for Hello world ohjelma Pythonilla`, `fields`: [`Test code`]}}]`,10,1,`2023-10-18 19:32:52.338705`);
INSERT INTO django_admin_log VALUES(211,`1`,`Hello world ohjelma Pythonilla`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for Hello world ohjelma Pythonilla`, `fields`: [`Test code`]}}]`,10,1,`2023-10-18 19:36:31.085021`);
INSERT INTO django_admin_log VALUES(212,`1`,`Hello world ohjelma Pythonilla`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for Hello world ohjelma Pythonilla`, `fields`: [`Test code`]}}]`,10,1,`2023-10-18 19:39:17.779483`);
INSERT INTO django_admin_log VALUES(213,`1`,`Hello world ohjelma Pythonilla`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for Hello world ohjelma Pythonilla`, `fields`: [`Test code`]}}]`,10,1,`2023-10-18 19:40:26.291882`);
INSERT INTO django_admin_log VALUES(214,`5`,`Liukuluku muutujien yhteenlasku`,2,`[]`,10,1,`2023-10-18 20:00:46.200739`);
INSERT INTO django_admin_log VALUES(215,`11`,`Tulostus aliohjelma`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for Tulostus aliohjelma`, `fields`: [`Test code`]}}]`,10,1,`2023-10-18 20:11:08.441177`);
INSERT INTO django_admin_log VALUES(216,`11`,`Tulostus aliohjelma`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for Tulostus aliohjelma`, `fields`: [`Test code`]}}]`,10,1,`2023-10-18 20:34:05.636349`);
INSERT INTO django_admin_log VALUES(217,`11`,`Tulostus aliohjelma`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for Tulostus aliohjelma`, `fields`: [`Test code`]}}]`,10,1,`2023-10-18 20:38:04.307564`);
INSERT INTO django_admin_log VALUES(218,`11`,`Tulostus aliohjelma`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for Tulostus aliohjelma`, `fields`: [`Test code`]}}]`,10,1,`2023-10-18 21:08:15.553272`);
INSERT INTO django_admin_log VALUES(219,`11`,`Tulostus aliohjelma`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for Tulostus aliohjelma`, `fields`: [`Test code`]}}]`,10,1,`2023-10-18 21:12:24.816151`);
INSERT INTO django_admin_log VALUES(220,`11`,`Tulostus aliohjelma`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for Tulostus aliohjelma`, `fields`: [`Test code`]}}]`,10,1,`2023-10-18 21:14:09.045139`);
INSERT INTO django_admin_log VALUES(221,`11`,`Tulostus aliohjelma`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for Tulostus aliohjelma`, `fields`: [`Test code`]}}]`,10,1,`2023-10-18 21:20:19.652439`);
INSERT INTO django_admin_log VALUES(222,`11`,`Tulostus aliohjelma`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for Tulostus aliohjelma`, `fields`: [`Test code`]}}]`,10,1,`2023-10-18 21:21:52.043644`);
INSERT INTO django_admin_log VALUES(223,`12`,`Parametrien välitys Python aliohjelmissa`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for Parametrien v\u00e4litys Python aliohjelmissa`, `fields`: [`Test code`]}}]`,10,1,`2023-10-18 21:32:20.685717`);
INSERT INTO django_admin_log VALUES(224,`12`,`Parametrien välitys Python aliohjelmissa`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for Parametrien v\u00e4litys Python aliohjelmissa`, `fields`: [`Test code`]}}]`,10,1,`2023-10-18 21:35:58.164916`);
INSERT INTO django_admin_log VALUES(225,`13`,`Yhteenlasku aliohjelma`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for Yhteenlasku aliohjelma`, `fields`: [`Test code`]}}]`,10,1,`2023-10-18 22:01:40.064596`);
INSERT INTO django_admin_log VALUES(226,`13`,`Yhteenlasku aliohjelma`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for Yhteenlasku aliohjelma`, `fields`: [`Test code`]}}]`,10,1,`2023-10-18 22:09:03.896273`);
INSERT INTO django_admin_log VALUES(227,`13`,`Yhteenlasku aliohjelma`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for Yhteenlasku aliohjelma`, `fields`: [`Test code`]}}]`,10,1,`2023-10-18 22:12:15.418793`);
INSERT INTO django_admin_log VALUES(228,`13`,`Yhteenlasku aliohjelma`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for Yhteenlasku aliohjelma`, `fields`: [`Test code`]}}]`,10,1,`2023-10-18 22:13:45.090116`);
INSERT INTO django_admin_log VALUES(229,`13`,`Yhteenlasku aliohjelma`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for Yhteenlasku aliohjelma`, `fields`: [`Test code`]}}]`,10,1,`2023-10-18 22:20:25.206242`);
INSERT INTO django_admin_log VALUES(230,`15`,`Listojen perusteita Pythonissa`,2,`[{`added`: {`name`: `task test`, `object`: `Test for Listojen perusteita Pythonissa`}}]`,10,1,`2023-10-18 22:57:05.492138`);
INSERT INTO django_admin_log VALUES(231,`16`,`Listan muokkaus ja pituuden tutkiminen`,2,`[{`added`: {`name`: `task test`, `object`: `Test for Listan muokkaus ja pituuden tutkiminen`}}]`,10,1,`2023-10-18 23:13:31.201267`);
INSERT INTO django_admin_log VALUES(232,`17`,`Moniulotteisten listojen perusteet`,2,`[{`added`: {`name`: `task test`, `object`: `Test for Moniulotteisten listojen perusteet`}}]`,10,1,`2023-10-18 23:19:56.340374`);
INSERT INTO django_admin_log VALUES(233,`17`,`Moniulotteisten listojen perusteet`,2,`[]`,10,1,`2023-10-18 23:31:19.620175`);
INSERT INTO django_admin_log VALUES(234,`18`,`For-silmukan perusteet Pythonissa`,2,`[{`changed`: {`name`: `answer`, `object`: `Vastaus teht\u00e4v\u00e4\u00e4n: For-silmukan perusteet Pythonissa`, `fields`: [`AnswerText`]}}, {`added`: {`name`: `task test`, `object`: `Test for For-silmukan perusteet Pythonissa`}}]`,10,1,`2023-10-18 23:44:22.437881`);
INSERT INTO django_admin_log VALUES(235,`18`,`For-silmukan perusteet Pythonissa`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for For-silmukan perusteet Pythonissa`, `fields`: [`Test code`]}}]`,10,1,`2023-10-19 00:08:12.903650`);
INSERT INTO django_admin_log VALUES(236,`14`,`Liukulukujen laskeminen aliohjelmilla`,2,`[{`added`: {`name`: `answer`, `object`: `Vastaus teht\u00e4v\u00e4\u00e4n: Liukulukujen laskeminen aliohjelmilla`}}]`,10,1,`2023-10-19 14:29:34.082411`);
INSERT INTO django_admin_log VALUES(237,`19`,`If-lause Käyttäjätunnustun kysyminen`,1,`[{`added`: {}}, {`added`: {`name`: `answer`, `object`: `Vastaus teht\u00e4v\u00e4\u00e4n: If-lause K\u00e4ytt\u00e4j\u00e4tunnustun kysyminen`}}]`,10,1,`2023-10-19 15:20:46.985676`);
INSERT INTO django_admin_log VALUES(238,`19`,`If-lause Käyttäjätunnustun kysyminen`,2,`[{`changed`: {`fields`: [`TaskInputs`]}}, {`added`: {`name`: `task test`, `object`: `Test for If-lause K\u00e4ytt\u00e4j\u00e4tunnustun kysyminen`}}]`,10,1,`2023-10-19 15:25:09.170763`);
INSERT INTO django_admin_log VALUES(239,`19`,`If-lause Käyttäjätunnustun kysyminen`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for If-lause K\u00e4ytt\u00e4j\u00e4tunnustun kysyminen`, `fields`: [`Test code`]}}]`,10,1,`2023-10-19 15:26:00.025528`);
INSERT INTO django_admin_log VALUES(240,`19`,`If-lause Käyttäjätunnustun kysyminen`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for If-lause K\u00e4ytt\u00e4j\u00e4tunnustun kysyminen`, `fields`: [`Test code`]}}]`,10,1,`2023-10-19 15:29:27.860934`);
INSERT INTO django_admin_log VALUES(241,`19`,`If-lause Käyttäjätunnustun kysyminen`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for If-lause K\u00e4ytt\u00e4j\u00e4tunnustun kysyminen`, `fields`: [`Test code`]}}]`,10,1,`2023-10-19 15:41:04.278569`);
INSERT INTO django_admin_log VALUES(242,`19`,`If-lause Käyttäjätunnustun kysyminen`,2,`[{`changed`: {`name`: `answer`, `object`: `Vastaus teht\u00e4v\u00e4\u00e4n: If-lause K\u00e4ytt\u00e4j\u00e4tunnustun kysyminen`, `fields`: [`AnswerOutput`]}}]`,10,1,`2023-10-19 15:45:35.587703`);
INSERT INTO django_admin_log VALUES(243,`19`,`If-lause Käyttäjätunnustun kysyminen`,2,`[{`changed`: {`name`: `answer`, `object`: `Vastaus teht\u00e4v\u00e4\u00e4n: If-lause K\u00e4ytt\u00e4j\u00e4tunnustun kysyminen`, `fields`: [`AnswerOutput`]}}]`,10,1,`2023-10-19 15:46:53.009598`);
INSERT INTO django_admin_log VALUES(244,`19`,`If-lause Käyttäjätunnustun kysyminen`,2,`[{`changed`: {`name`: `answer`, `object`: `Vastaus teht\u00e4v\u00e4\u00e4n: If-lause K\u00e4ytt\u00e4j\u00e4tunnustun kysyminen`, `fields`: [`AnswerOutput`]}}]`,10,1,`2023-10-19 15:48:10.149172`);
INSERT INTO django_admin_log VALUES(245,`19`,`If-lause Käyttäjätunnustun kysyminen`,2,`[{`changed`: {`fields`: [`TaskDescription`]}}]`,10,1,`2023-10-19 19:09:18.645367`);
INSERT INTO django_admin_log VALUES(246,`19`,`If-lause Käyttäjätunnustun kysyminen`,2,`[{`changed`: {`fields`: [`TaskDescription`]}}]`,10,1,`2023-10-19 19:11:11.653484`);
INSERT INTO django_admin_log VALUES(247,`19`,`If-lause Käyttäjätunnustun kysyminen`,2,`[{`changed`: {`fields`: [`TaskDescription`, `TaskStarterCode`]}}]`,10,1,`2023-10-19 19:15:37.303212`);
INSERT INTO django_admin_log VALUES(248,`19`,`If-lause Käyttäjätunnustun kysyminen`,2,`[{`changed`: {`fields`: [`TaskDescription`]}}]`,10,1,`2023-10-19 19:17:51.819960`);
INSERT INTO django_admin_log VALUES(249,`19`,`If-lause Käyttäjätunnustun kysyminen`,2,`[{`changed`: {`fields`: [`TaskDescription`]}}]`,10,1,`2023-10-19 19:21:02.800567`);
INSERT INTO django_admin_log VALUES(250,`19`,`If-lause Käyttäjätunnustun kysyminen`,2,`[{`changed`: {`fields`: [`TaskDescription`]}}]`,10,1,`2023-10-19 19:23:35.944360`);
INSERT INTO django_admin_log VALUES(251,`19`,`If-lause Käyttäjätunnustun kysyminen`,2,`[{`changed`: {`fields`: [`TaskDescription`, `TaskStarterCode`]}}]`,10,1,`2023-10-19 19:26:03.325301`);
INSERT INTO django_admin_log VALUES(252,`19`,`If-lause Käyttäjätunnustun kysyminen`,2,`[{`changed`: {`fields`: [`TaskDescription`]}}]`,10,1,`2023-10-19 19:30:16.729073`);
INSERT INTO django_admin_log VALUES(253,`19`,`If-lause Käyttäjätunnustun kysyminen`,2,`[{`changed`: {`fields`: [`TaskDescription`]}}]`,10,1,`2023-10-19 19:32:25.540909`);
INSERT INTO django_admin_log VALUES(254,`19`,`If-lause Käyttäjätunnustun kysyminen`,2,`[{`changed`: {`fields`: [`Category`]}}]`,10,1,`2023-10-19 19:36:47.798234`);
INSERT INTO django_admin_log VALUES(255,`19`,`If-lause Käyttäjätunnuksen/salasanan tarkistamuinen`,2,`[{`changed`: {`fields`: [`TaskTitle`, `Difficulty`]}}]`,10,1,`2023-10-19 19:38:10.290445`);
INSERT INTO django_admin_log VALUES(256,`19`,`If-lause Käyttäjätunnuksen/salasanan tarkistamuinen`,2,`[{`changed`: {`fields`: [`TaskDescription`]}}]`,10,1,`2023-10-19 19:39:55.746219`);
INSERT INTO django_admin_log VALUES(257,`19`,`If-lause Käyttäjätunnuksen/salasanan tarkistamuinen`,2,`[{`changed`: {`fields`: [`TaskDescription`]}}]`,10,1,`2023-10-19 19:41:01.034572`);
INSERT INTO django_admin_log VALUES(258,`19`,`If-lause Käyttäjätunnuksen/salasanan tarkistamuinen`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for If-lause K\u00e4ytt\u00e4j\u00e4tunnuksen/salasanan tarkistamuinen`, `fields`: [`Test code`]}}]`,10,1,`2023-10-19 20:03:11.449947`);
INSERT INTO django_admin_log VALUES(259,`19`,`If-lause Käyttäjätunnuksen/salasanan tarkistamuinen`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for If-lause K\u00e4ytt\u00e4j\u00e4tunnuksen/salasanan tarkistamuinen`, `fields`: [`Test code`]}}]`,10,1,`2023-10-19 20:07:08.187919`);
INSERT INTO django_admin_log VALUES(260,`19`,`If-lause Käyttäjätunnuksen/salasanan tarkistamuinen`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for If-lause K\u00e4ytt\u00e4j\u00e4tunnuksen/salasanan tarkistamuinen`, `fields`: [`Test code`]}}]`,10,1,`2023-10-19 20:12:01.333533`);
INSERT INTO django_admin_log VALUES(261,`19`,`If-lause Käyttäjätunnuksen/salasanan tarkistamuinen`,2,`[{`changed`: {`name`: `answer`, `object`: `Vastaus teht\u00e4v\u00e4\u00e4n: If-lause K\u00e4ytt\u00e4j\u00e4tunnuksen/salasanan tarkistamuinen`, `fields`: [`AnswerOutput`]}}]`,10,1,`2023-10-19 20:15:29.239518`);
INSERT INTO django_admin_log VALUES(262,`19`,`If-lause Käyttäjätunnuksen/salasanan tarkistamuinen`,2,`[{`changed`: {`fields`: [`TaskInputs`]}}, {`changed`: {`name`: `answer`, `object`: `Vastaus teht\u00e4v\u00e4\u00e4n: If-lause K\u00e4ytt\u00e4j\u00e4tunnuksen/salasanan tarkistamuinen`, `fields`: [`AnswerOutput`]}}]`,10,1,`2023-10-19 20:36:09.750984`);
INSERT INTO django_admin_log VALUES(263,`19`,`If-lause Käyttäjätunnuksen/salasanan tarkistamuinen`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for If-lause K\u00e4ytt\u00e4j\u00e4tunnuksen/salasanan tarkistamuinen`, `fields`: [`Test code`]}}]`,10,1,`2023-10-19 20:51:28.978414`);
INSERT INTO django_admin_log VALUES(264,`19`,`If-lause Käyttäjätunnuksen/salasanan tarkistamuinen`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for If-lause K\u00e4ytt\u00e4j\u00e4tunnuksen/salasanan tarkistamuinen`, `fields`: [`Test code`]}}]`,10,1,`2023-10-19 20:53:56.446521`);
INSERT INTO django_admin_log VALUES(265,`19`,`If-lause Käyttäjätunnuksen/salasanan tarkistamuinen`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for If-lause K\u00e4ytt\u00e4j\u00e4tunnuksen/salasanan tarkistamuinen`, `fields`: [`Test code`]}}]`,10,1,`2023-10-19 20:56:11.662874`);
INSERT INTO django_admin_log VALUES(266,`19`,`If-lause Käyttäjätunnuksen/salasanan tarkistamuinen`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for If-lause K\u00e4ytt\u00e4j\u00e4tunnuksen/salasanan tarkistamuinen`, `fields`: [`Test code`]}}]`,10,1,`2023-10-19 20:59:31.252827`);
INSERT INTO django_admin_log VALUES(267,`1`,`Hello world ohjelma Pythonilla`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for Hello world ohjelma Pythonilla`, `fields`: [`Test code`]}}]`,10,1,`2023-10-19 21:27:44.454992`);
INSERT INTO django_admin_log VALUES(268,`1`,`Hello world ohjelma Pythonilla`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for Hello world ohjelma Pythonilla`, `fields`: [`Test code`]}}]`,10,1,`2023-10-19 21:29:35.773323`);
INSERT INTO django_admin_log VALUES(269,`1`,`Hello world ohjelma Pythonilla`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for Hello world ohjelma Pythonilla`, `fields`: [`Test code`]}}]`,10,1,`2023-10-19 21:35:02.524239`);
INSERT INTO django_admin_log VALUES(270,`1`,`Hello world ohjelma Pythonilla`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for Hello world ohjelma Pythonilla`, `fields`: [`Test code`]}}]`,10,1,`2023-10-19 21:39:07.158220`);
INSERT INTO django_admin_log VALUES(271,`1`,`Hello world ohjelma Pythonilla`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for Hello world ohjelma Pythonilla`, `fields`: [`Test code`]}}]`,10,1,`2023-10-19 21:45:23.130670`);
INSERT INTO django_admin_log VALUES(272,`1`,`Hello world ohjelma Pythonilla`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for Hello world ohjelma Pythonilla`, `fields`: [`Test code`]}}]`,10,1,`2023-10-19 21:47:56.641998`);
INSERT INTO django_admin_log VALUES(273,`1`,`Hello world ohjelma Pythonilla`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for Hello world ohjelma Pythonilla`, `fields`: [`Test code`]}}]`,10,1,`2023-10-19 21:48:37.898952`);
INSERT INTO django_admin_log VALUES(274,`1`,`Hello world ohjelma Pythonilla`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for Hello world ohjelma Pythonilla`, `fields`: [`Test code`]}}]`,10,1,`2023-10-19 21:59:34.189867`);
INSERT INTO django_admin_log VALUES(275,`1`,`Hello world ohjelma Pythonilla`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for Hello world ohjelma Pythonilla`, `fields`: [`Test code`]}}]`,10,1,`2023-10-19 22:05:22.291517`);
INSERT INTO django_admin_log VALUES(276,`1`,`Hello world ohjelma Pythonilla`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for Hello world ohjelma Pythonilla`, `fields`: [`Test code`]}}]`,10,1,`2023-10-19 22:07:44.145214`);
INSERT INTO django_admin_log VALUES(277,`2`,`Syötteen kysyminen käyttäjältä`,2,`[{`added`: {`name`: `task test`, `object`: `Test for Sy\u00f6tteen kysyminen k\u00e4ytt\u00e4j\u00e4lt\u00e4`}}]`,10,1,`2023-10-19 22:22:45.926809`);
INSERT INTO django_admin_log VALUES(278,`2`,`Syötteen kysyminen käyttäjältä`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for Sy\u00f6tteen kysyminen k\u00e4ytt\u00e4j\u00e4lt\u00e4`, `fields`: [`Test code`]}}]`,10,1,`2023-10-19 22:27:22.290465`);
INSERT INTO django_admin_log VALUES(279,`4`,`Kokonaislukujen yhteenlasku`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for Kokonaislukujen yhteenlasku`, `fields`: [`Test code`]}}]`,10,1,`2023-10-20 01:11:32.858083`);
INSERT INTO django_admin_log VALUES(280,`5`,`Liukuluku muutujien yhteenlasku`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for Liukuluku muutujien yhteenlasku`, `fields`: [`Test code`]}}]`,10,1,`2023-10-20 01:24:16.352003`);
INSERT INTO django_admin_log VALUES(281,`6`,`Merkkijonon luominen Pythonissa`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for Merkkijonon luominen Pythonissa`, `fields`: [`Test code`]}}]`,10,1,`2023-10-20 01:35:06.602418`);
INSERT INTO django_admin_log VALUES(282,`6`,`Merkkijonon luominen Pythonissa`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for Merkkijonon luominen Pythonissa`, `fields`: [`Test code`]}}]`,10,1,`2023-10-20 01:43:21.565423`);
INSERT INTO django_admin_log VALUES(283,`7`,`Monirivisten merkkijonojen luominen`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for Monirivisten merkkijonojen luominen`, `fields`: [`Test code`]}}]`,10,1,`2023-10-20 20:14:13.023263`);
INSERT INTO django_admin_log VALUES(284,`7`,`Monirivisten merkkijonojen luominen`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for Monirivisten merkkijonojen luominen`, `fields`: [`Test code`]}}]`,10,1,`2023-10-20 20:21:02.248640`);
INSERT INTO django_admin_log VALUES(285,`7`,`Monirivisten merkkijonojen luominen`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for Monirivisten merkkijonojen luominen`, `fields`: [`Test code`]}}]`,10,1,`2023-10-20 20:22:37.191093`);
INSERT INTO django_admin_log VALUES(286,`7`,`Monirivisten merkkijonojen luominen`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for Monirivisten merkkijonojen luominen`, `fields`: [`Test code`]}}]`,10,1,`2023-10-20 20:29:23.590190`);
INSERT INTO django_admin_log VALUES(287,`1`,`Hello world ohjelma Pythonilla`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for Hello world ohjelma Pythonilla`, `fields`: [`Test code`]}}]`,10,1,`2023-10-20 21:02:49.574197`);
INSERT INTO django_admin_log VALUES(288,`6`,`Merkkijonon luominen Pythonissa`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for Merkkijonon luominen Pythonissa`, `fields`: [`Test code`]}}]`,10,1,`2023-10-20 21:11:09.093371`);
INSERT INTO django_admin_log VALUES(289,`6`,`Merkkijonon luominen Pythonissa`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for Merkkijonon luominen Pythonissa`, `fields`: [`Test code`]}}]`,10,1,`2023-10-20 21:16:56.569656`);
INSERT INTO django_admin_log VALUES(290,`7`,`Monirivisten merkkijonojen luominen`,2,`[{`added`: {`name`: `task test`, `object`: `Test for Monirivisten merkkijonojen luominen`}}]`,10,1,`2023-10-20 21:19:23.975358`);
INSERT INTO django_admin_log VALUES(291,`7`,`Monirivisten merkkijonojen luominen`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for Monirivisten merkkijonojen luominen`, `fields`: [`Test code`]}}]`,10,1,`2023-10-20 21:30:47.420747`);
INSERT INTO django_admin_log VALUES(292,`7`,`Monirivisten merkkijonojen luominen`,2,`[{`added`: {`name`: `task test`, `object`: `Test for Monirivisten merkkijonojen luominen`}}]`,10,1,`2023-10-20 21:39:07.140309`);
INSERT INTO django_admin_log VALUES(293,`7`,`Monirivisten merkkijonojen luominen`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for Monirivisten merkkijonojen luominen`, `fields`: [`Test code`]}}]`,10,1,`2023-10-20 21:42:52.516816`);
INSERT INTO django_admin_log VALUES(294,`7`,`Monirivisten merkkijonojen luominen`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for Monirivisten merkkijonojen luominen`, `fields`: [`Test code`]}}, {`deleted`: {`name`: `task test`, `object`: `Test for Monirivisten merkkijonojen luominen`}}, {`deleted`: {`name`: `task test`, `object`: `Test for Monirivisten merkkijonojen luominen`}}]`,10,1,`2023-10-20 21:45:44.996198`);
INSERT INTO django_admin_log VALUES(295,`7`,`Monirivisten merkkijonojen luominen`,2,`[]`,10,1,`2023-10-20 21:47:50.089804`);
INSERT INTO django_admin_log VALUES(296,`7`,`Monirivisten merkkijonojen luominen`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for Monirivisten merkkijonojen luominen`, `fields`: [`Test code`]}}]`,10,1,`2023-10-20 21:49:06.331009`);
INSERT INTO django_admin_log VALUES(297,`7`,`Monirivisten merkkijonojen luominen`,2,`[]`,10,1,`2023-10-20 21:52:00.445772`);
INSERT INTO django_admin_log VALUES(298,`6`,`Merkkijonon luominen Pythonissa`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for Merkkijonon luominen Pythonissa`, `fields`: [`Test code`]}}]`,10,1,`2023-10-20 21:57:31.439834`);
INSERT INTO django_admin_log VALUES(299,`8`,`Merkkijonot ja erikoismerkit Pythonissa`,2,`[{`changed`: {`fields`: [`TaskDescription`]}}]`,10,1,`2023-10-20 22:01:52.083747`);
INSERT INTO django_admin_log VALUES(300,`8`,`Merkkijonot ja erikoismerkit Pythonissa`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for Merkkijonot ja erikoismerkit Pythonissa`, `fields`: [`Test code`]}}]`,10,1,`2023-10-20 22:05:14.841403`);
INSERT INTO django_admin_log VALUES(301,`8`,`Merkkijonot ja erikoismerkit Pythonissa`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for Merkkijonot ja erikoismerkit Pythonissa`, `fields`: [`Test code`]}}]`,10,1,`2023-10-20 22:12:33.873796`);
INSERT INTO django_admin_log VALUES(302,`8`,`Merkkijonot ja erikoismerkit Pythonissa`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for Merkkijonot ja erikoismerkit Pythonissa`, `fields`: [`Test code`]}}]`,10,1,`2023-10-20 22:15:53.882069`);
INSERT INTO django_admin_log VALUES(303,`8`,`Merkkijonot ja erikoismerkit Pythonissa`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for Merkkijonot ja erikoismerkit Pythonissa`, `fields`: [`Test code`]}}]`,10,1,`2023-10-20 22:19:33.337324`);
INSERT INTO django_admin_log VALUES(304,`8`,`Merkkijonot ja erikoismerkit Pythonissa`,2,`[{`changed`: {`name`: `answer`, `object`: `Vastaus teht\u00e4v\u00e4\u00e4n: Merkkijonot ja erikoismerkit Pythonissa`, `fields`: [`AnswerText`]}}]`,10,1,`2023-10-20 22:21:24.618517`);
INSERT INTO django_admin_log VALUES(305,`8`,`Merkkijonot ja erikoismerkit Pythonissa`,2,`[]`,10,1,`2023-10-20 22:22:14.071178`);
INSERT INTO django_admin_log VALUES(306,`9`,`Yksittäiset ja kaksoislainausmerkit merkkijonossa`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for Yksitt\u00e4iset ja kaksoislainausmerkit merkkijonossa`, `fields`: [`Test code`]}}]`,10,1,`2023-10-21 00:48:33.478924`);
INSERT INTO django_admin_log VALUES(307,`10`,`Merkkijonon merkkeihin viittaaminen`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for Merkkijonon merkkeihin viittaaminen`, `fields`: [`Test code`]}}]`,10,1,`2023-10-21 01:11:29.195903`);
INSERT INTO django_admin_log VALUES(308,`10`,`Merkkijonon merkkeihin viittaaminen`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for Merkkijonon merkkeihin viittaaminen`, `fields`: [`Test code`]}}]`,10,1,`2023-10-21 01:12:41.824312`);
INSERT INTO django_admin_log VALUES(309,`10`,`Merkkijonon merkkeihin viittaaminen`,2,`[{`changed`: {`name`: `answer`, `object`: `Vastaus teht\u00e4v\u00e4\u00e4n: Merkkijonon merkkeihin viittaaminen`, `fields`: [`AnswerTuto`]}}, {`changed`: {`name`: `task test`, `object`: `Test for Merkkijonon merkkeihin viittaaminen`, `fields`: [`Test code`]}}]`,10,1,`2023-10-21 01:23:52.247683`);
INSERT INTO django_admin_log VALUES(310,`10`,`Merkkijonon merkkeihin viittaaminen`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for Merkkijonon merkkeihin viittaaminen`, `fields`: [`Test code`]}}]`,10,1,`2023-10-21 01:39:38.344457`);
INSERT INTO django_admin_log VALUES(311,`10`,`Merkkijonon merkkeihin viittaaminen`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for Merkkijonon merkkeihin viittaaminen`, `fields`: [`Test code`]}}]`,10,1,`2023-10-21 01:41:17.895354`);
INSERT INTO django_admin_log VALUES(312,`11`,`Tulostus aliohjelma`,2,`[]`,10,1,`2023-10-21 01:49:35.337491`);
INSERT INTO django_admin_log VALUES(313,`12`,`Parametrien välitys Python aliohjelmissa`,2,`[]`,10,1,`2023-10-21 01:50:38.872162`);
INSERT INTO django_admin_log VALUES(314,`13`,`Yhteenlasku aliohjelma`,2,`[]`,10,1,`2023-10-21 01:51:49.430537`);
INSERT INTO django_admin_log VALUES(315,`14`,`Liukulukujen laskeminen aliohjelmilla`,2,`[{`added`: {`name`: `task test`, `object`: `Test for Liukulukujen laskeminen aliohjelmilla`}}]`,10,1,`2023-10-21 12:33:54.934535`);
INSERT INTO django_admin_log VALUES(316,`14`,`Liukulukujen laskeminen aliohjelmilla`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for Liukulukujen laskeminen aliohjelmilla`, `fields`: [`Test code`]}}]`,10,1,`2023-10-21 12:44:55.997940`);
INSERT INTO django_admin_log VALUES(317,`14`,`Liukulukujen laskeminen aliohjelmilla`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for Liukulukujen laskeminen aliohjelmilla`, `fields`: [`Test code`]}}]`,10,1,`2023-10-21 12:46:47.871560`);
INSERT INTO django_admin_log VALUES(318,`14`,`Liukulukujen laskeminen aliohjelmilla`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for Liukulukujen laskeminen aliohjelmilla`, `fields`: [`Test code`]}}]`,10,1,`2023-10-21 12:50:21.405287`);
INSERT INTO django_admin_log VALUES(319,`14`,`Liukulukujen laskeminen aliohjelmilla`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for Liukulukujen laskeminen aliohjelmilla`, `fields`: [`Answer`, `Test code`]}}]`,10,1,`2023-10-21 12:59:20.588598`);
INSERT INTO django_admin_log VALUES(320,`14`,`Liukulukujen laskeminen aliohjelmilla`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for Liukulukujen laskeminen aliohjelmilla`, `fields`: [`Test code`]}}]`,10,1,`2023-10-21 13:10:05.819875`);
INSERT INTO django_admin_log VALUES(321,`14`,`Liukulukujen laskeminen aliohjelmilla`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for Liukulukujen laskeminen aliohjelmilla`, `fields`: [`Test code`]}}]`,10,1,`2023-10-21 13:27:04.142353`);
INSERT INTO django_admin_log VALUES(322,`14`,`Liukulukujen laskeminen aliohjelmilla`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for Liukulukujen laskeminen aliohjelmilla`, `fields`: [`Test code`]}}]`,10,1,`2023-10-21 13:42:18.689188`);
INSERT INTO django_admin_log VALUES(323,`14`,`Liukulukujen laskeminen aliohjelmilla`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for Liukulukujen laskeminen aliohjelmilla`, `fields`: [`Test code`]}}]`,10,1,`2023-10-21 13:55:54.510180`);
INSERT INTO django_admin_log VALUES(324,`14`,`Liukulukujen laskeminen aliohjelmilla`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for Liukulukujen laskeminen aliohjelmilla`, `fields`: [`Test code`]}}]`,10,1,`2023-10-21 14:00:00.237113`);
INSERT INTO django_admin_log VALUES(325,`14`,`Liukulukujen laskeminen aliohjelmilla`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for Liukulukujen laskeminen aliohjelmilla`, `fields`: [`Test code`]}}]`,10,1,`2023-10-21 14:18:17.828434`);
INSERT INTO django_admin_log VALUES(326,`14`,`Liukulukujen laskeminen aliohjelmilla`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for Liukulukujen laskeminen aliohjelmilla`, `fields`: [`Test code`]}}]`,10,1,`2023-10-21 14:26:04.836813`);
INSERT INTO django_admin_log VALUES(327,`14`,`Liukulukujen laskeminen aliohjelmilla`,2,`[{`changed`: {`name`: `answer`, `object`: `Vastaus teht\u00e4v\u00e4\u00e4n: Liukulukujen laskeminen aliohjelmilla`, `fields`: [`AnswerText`]}}]`,10,1,`2023-10-21 14:29:35.688630`);
INSERT INTO django_admin_log VALUES(328,`18`,`For-silmukan perusteet Pythonissa`,2,`[]`,10,1,`2023-10-21 14:32:22.650996`);
INSERT INTO django_admin_log VALUES(329,`19`,`If-lause Käyttäjätunnuksen/salasanan tarkistamuinen`,2,`[{`changed`: {`name`: `answer`, `object`: `Vastaus teht\u00e4v\u00e4\u00e4n: If-lause K\u00e4ytt\u00e4j\u00e4tunnuksen/salasanan tarkistamuinen`, `fields`: [`AnswerOutput`]}}]`,10,1,`2023-10-21 15:26:38.247611`);
INSERT INTO django_admin_log VALUES(330,`20`,`Iän tarkistaminen If lauseella`,1,`[{`added`: {}}, {`added`: {`name`: `answer`, `object`: `Vastaus teht\u00e4v\u00e4\u00e4n: I\u00e4n tarkistaminen If lauseella`}}]`,10,1,`2023-10-21 18:30:02.414869`);
INSERT INTO django_admin_log VALUES(331,`20`,`Iän tarkistaminen If lauseella`,2,`[{`changed`: {`fields`: [`Category`]}}]`,10,1,`2023-10-21 18:30:28.529546`);
INSERT INTO django_admin_log VALUES(332,`20`,`Iän tarkistaminen If lauseella`,2,`[{`changed`: {`fields`: [`TaskDescription`]}}, {`changed`: {`name`: `answer`, `object`: `Vastaus teht\u00e4v\u00e4\u00e4n: I\u00e4n tarkistaminen If lauseella`, `fields`: [`AnswerOutput`]}}, {`added`: {`name`: `task test`, `object`: `Test for I\u00e4n tarkistaminen If lauseella`}}]`,10,1,`2023-10-21 18:50:34.521792`);
INSERT INTO django_admin_log VALUES(333,`20`,`Iän tarkistaminen If lauseella`,2,`[{`changed`: {`fields`: [`TaskDescription`]}}]`,10,1,`2023-10-21 18:52:57.496228`);
INSERT INTO django_admin_log VALUES(334,`20`,`Iän tarkistaminen If lauseella`,2,`[{`changed`: {`fields`: [`TaskDescription`]}}]`,10,1,`2023-10-21 19:01:59.513473`);
INSERT INTO django_admin_log VALUES(335,`20`,`Iän tarkistaminen If lauseella`,2,`[{`changed`: {`fields`: [`TaskDescription`]}}]`,10,1,`2023-10-21 19:06:30.612398`);
INSERT INTO django_admin_log VALUES(336,`20`,`Iän tarkistaminen If lauseella`,2,`[{`changed`: {`fields`: [`TaskDescription`]}}]`,10,1,`2023-10-21 19:07:37.449649`);
INSERT INTO django_admin_log VALUES(337,`20`,`Iän tarkistaminen If lauseella`,2,`[{`changed`: {`fields`: [`TaskDescription`]}}]`,10,1,`2023-10-21 19:08:50.967267`);
INSERT INTO django_admin_log VALUES(338,`20`,`Iän tarkistaminen If lauseella`,2,`[{`changed`: {`fields`: [`TaskDescription`]}}]`,10,1,`2023-10-21 19:10:07.427603`);
INSERT INTO django_admin_log VALUES(339,`20`,`Iän tarkistaminen If lauseella`,2,`[{`changed`: {`fields`: [`TaskDescription`]}}]`,10,1,`2023-10-22 15:29:29.103248`);
INSERT INTO django_admin_log VALUES(340,`20`,`Iän tarkistaminen If lauseella`,2,`[{`changed`: {`fields`: [`TaskDescription`]}}]`,10,1,`2023-10-22 15:39:43.135729`);
INSERT INTO django_admin_log VALUES(341,`20`,`Iän tarkistaminen If lauseella`,2,`[{`changed`: {`fields`: [`TaskDescription`]}}]`,10,1,`2023-10-22 15:43:46.748536`);
INSERT INTO django_admin_log VALUES(342,`20`,`Iän tarkistaminen If lauseella`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for I\u00e4n tarkistaminen If lauseella`, `fields`: [`Test code`]}}]`,10,1,`2023-10-22 15:58:17.713452`);
INSERT INTO django_admin_log VALUES(343,`20`,`Iän tarkistaminen If lauseella`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for I\u00e4n tarkistaminen If lauseella`, `fields`: [`Test code`]}}]`,10,1,`2023-10-22 16:26:21.323428`);
INSERT INTO django_admin_log VALUES(344,`20`,`Iän tarkistaminen If lauseella`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for I\u00e4n tarkistaminen If lauseella`, `fields`: [`Test code`]}}]`,10,1,`2023-10-22 16:47:24.541983`);
INSERT INTO django_admin_log VALUES(345,`19`,`If-lause Käyttäjätunnuksen/salasanan tarkistamuinen`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for If-lause K\u00e4ytt\u00e4j\u00e4tunnuksen/salasanan tarkistamuinen`, `fields`: [`Test code`]}}]`,10,1,`2023-10-22 18:00:16.029272`);
INSERT INTO django_admin_log VALUES(346,`21`,`Luvun kertominen kahdella`,1,`[{`added`: {}}, {`added`: {`name`: `answer`, `object`: `Vastaus teht\u00e4v\u00e4\u00e4n: Luvun kertominen kahdella`}}]`,10,1,`2023-10-22 19:39:47.083151`);
INSERT INTO django_admin_log VALUES(347,`21`,`Aliohjelma: Luvun kertominen kahdella`,2,`[{`changed`: {`fields`: [`TaskTitle`]}}]`,10,1,`2023-10-22 19:40:15.817471`);
INSERT INTO django_admin_log VALUES(348,`21`,`Luvun kertominen kahdella aliohjelma`,2,`[{`changed`: {`fields`: [`TaskTitle`, `TaskDescription`]}}]`,10,1,`2023-10-22 19:41:49.057459`);
INSERT INTO django_admin_log VALUES(349,`21`,`Luvun kertominen kahdella ja arvon palauttaminen aliohjelmasta`,2,`[{`changed`: {`fields`: [`TaskTitle`]}}]`,10,1,`2023-10-22 19:44:15.359949`);
INSERT INTO django_admin_log VALUES(350,`21`,`Luvun kertominen kahdella ja arvon palauttaminen aliohjelmasta`,2,`[{`changed`: {`fields`: [`TaskDescription`]}}]`,10,1,`2023-10-22 19:46:04.955252`);
INSERT INTO django_admin_log VALUES(351,`21`,`Luvun kertominen kahdella ja arvon palauttaminen aliohjelmasta`,2,`[{`added`: {`name`: `task test`, `object`: `Test for Luvun kertominen kahdella ja arvon palauttaminen aliohjelmasta`}}]`,10,1,`2023-10-22 19:55:06.115310`);
INSERT INTO django_admin_log VALUES(352,`7`,`Tietorakenteet`,2,`[{`changed`: {`fields`: [`Name`]}}]`,15,1,`2023-10-22 20:11:35.180369`);
INSERT INTO django_admin_log VALUES(353,`22`,`Laske lukujen neliöt käyttäen for-lausetta`,1,`[{`added`: {}}, {`added`: {`name`: `answer`, `object`: `Vastaus teht\u00e4v\u00e4\u00e4n: Laske lukujen neli\u00f6t k\u00e4ytt\u00e4en for-lausetta`}}]`,10,1,`2023-10-23 13:32:25.125291`);
INSERT INTO django_admin_log VALUES(354,`22`,`Laske lukujen neliöt käyttäen for-lausetta`,2,`[{`added`: {`name`: `task test`, `object`: `Test for Laske lukujen neli\u00f6t k\u00e4ytt\u00e4en for-lausetta`}}]`,10,1,`2023-10-23 13:38:43.454262`);
INSERT INTO django_admin_log VALUES(355,`22`,`Laske lukujen neliöt käyttäen for-lausetta`,2,`[{`changed`: {`fields`: [`TaskDescription`]}}]`,10,1,`2023-10-23 13:45:56.348817`);
INSERT INTO django_admin_log VALUES(356,`23`,`For-lause: Tulosta joka toinen`,1,`[{`added`: {}}, {`added`: {`name`: `answer`, `object`: `Vastaus teht\u00e4v\u00e4\u00e4n: For-lause: Tulosta joka toinen`}}]`,10,1,`2023-10-23 14:21:12.967589`);
INSERT INTO django_admin_log VALUES(357,`23`,`For-lause: Tulosta joka toinen`,2,`[{`added`: {`name`: `task test`, `object`: `Test for For-lause: Tulosta joka toinen`}}]`,10,1,`2023-10-23 14:21:57.021131`);
INSERT INTO django_admin_log VALUES(358,`24`,`While-silmukkan perusteet`,1,`[{`added`: {}}, {`added`: {`name`: `answer`, `object`: `Vastaus teht\u00e4v\u00e4\u00e4n: While-silmukkan perusteet`}}]`,10,1,`2023-10-23 14:43:52.945670`);
INSERT INTO django_admin_log VALUES(359,`24`,`While-silmukkan perusteet`,2,`[{`added`: {`name`: `task test`, `object`: `Test for While-silmukkan perusteet`}}]`,10,1,`2023-10-23 14:45:08.426912`);
INSERT INTO django_admin_log VALUES(360,`25`,`While-silmukka: Luvun jakaminen tekijöihin`,1,`[{`added`: {}}, {`added`: {`name`: `answer`, `object`: `Vastaus teht\u00e4v\u00e4\u00e4n: While-silmukka: Luvun jakaminen tekij\u00f6ihin`}}]`,10,1,`2023-10-23 18:43:58.984348`);
INSERT INTO django_admin_log VALUES(361,`25`,`While-silmukka: Luvun jakaminen tekijöihin`,2,`[{`added`: {`name`: `task test`, `object`: `Test for While-silmukka: Luvun jakaminen tekij\u00f6ihin`}}]`,10,1,`2023-10-23 18:54:21.620936`);
INSERT INTO django_admin_log VALUES(362,`25`,`While-silmukka: Luvun jakaminen tekijöihin`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for While-silmukka: Luvun jakaminen tekij\u00f6ihin`, `fields`: [`Test code`]}}]`,10,1,`2023-10-23 19:03:11.044270`);
INSERT INTO django_admin_log VALUES(363,`25`,`While-silmukka: Luvun jakaminen tekijöihin`,2,`[{`changed`: {`fields`: [`TaskStarterCode`]}}]`,10,1,`2023-10-23 19:10:03.830977`);
INSERT INTO django_admin_log VALUES(364,`25`,`While-silmukka: Luvun jakaminen tekijöihin`,2,`[{`changed`: {`fields`: [`TaskStarterCode`]}}]`,10,1,`2023-10-23 19:10:49.295203`);
INSERT INTO django_admin_log VALUES(365,`25`,`While-silmukka: Luvun jakaminen tekijöihin`,2,`[{`changed`: {`fields`: [`TaskStarterCode`]}}]`,10,1,`2023-10-23 19:12:39.438648`);
INSERT INTO django_admin_log VALUES(366,`4`,`Toistolauseet`,2,`[{`changed`: {`fields`: [`Name`]}}]`,15,1,`2023-10-23 21:50:12.622855`);
INSERT INTO django_admin_log VALUES(367,`26`,`Ehtolauseet: Pääsykoe`,1,`[{`added`: {}}, {`added`: {`name`: `answer`, `object`: `Vastaus teht\u00e4v\u00e4\u00e4n: Ehtolauseet: P\u00e4\u00e4sykoe`}}]`,10,1,`2023-10-23 22:19:22.352452`);
INSERT INTO django_admin_log VALUES(368,`26`,`Ehtolauseet: Pääsykoe`,2,`[{`changed`: {`fields`: [`TaskDescription`]}}]`,10,1,`2023-10-23 22:21:00.517486`);
INSERT INTO django_admin_log VALUES(369,`26`,`Ehtolauseet: Pääsykoe tulostes tarkistus`,2,`[{`changed`: {`fields`: [`TaskTitle`]}}]`,10,1,`2023-10-23 22:22:02.620181`);
INSERT INTO django_admin_log VALUES(370,`26`,`Ehtolauseet: Pääsykoe tulostes tarkistus`,2,`[]`,10,1,`2023-10-23 22:27:19.717683`);
INSERT INTO django_admin_log VALUES(371,`26`,`Ehtolauseet: Pääsykoe tulostes tarkistus`,2,`[{`added`: {`name`: `task test`, `object`: `Test for Ehtolauseet: P\u00e4\u00e4sykoe tulostes tarkistus`}}]`,10,1,`2023-10-23 22:35:38.070447`);
INSERT INTO django_admin_log VALUES(372,`26`,`Ehtolauseet: Pääsykoe tulosten tarkistus`,2,`[{`changed`: {`fields`: [`TaskTitle`]}}]`,10,1,`2023-10-23 22:35:53.671862`);
INSERT INTO django_admin_log VALUES(373,`26`,`Ehtolauseet: Pääsykoe tulosten tarkistus`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for Ehtolauseet: P\u00e4\u00e4sykoe tulosten tarkistus`, `fields`: [`Test code`]}}]`,10,1,`2023-10-23 22:40:01.119089`);
INSERT INTO django_admin_log VALUES(374,`26`,`Ehtolauseet: Pääsykoe tulosten tarkistus`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for Ehtolauseet: P\u00e4\u00e4sykoe tulosten tarkistus`, `fields`: [`Test code`]}}]`,10,1,`2023-10-23 22:50:50.800531`);
INSERT INTO django_admin_log VALUES(375,`26`,`Ehtolauseet: Pääsykoe tulosten tarkistus`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for Ehtolauseet: P\u00e4\u00e4sykoe tulosten tarkistus`, `fields`: [`Test code`]}}]`,10,1,`2023-10-23 23:46:03.269278`);
INSERT INTO django_admin_log VALUES(376,`26`,`Ehtolauseet: Pääsykoe tulosten tarkistus`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for Ehtolauseet: P\u00e4\u00e4sykoe tulosten tarkistus`, `fields`: [`Test code`]}}]`,10,1,`2023-10-23 23:57:32.116999`);
INSERT INTO django_admin_log VALUES(377,`26`,`Ehtolauseet: Pääsykoe tulosten tarkistus`,2,`[{`changed`: {`name`: `answer`, `object`: `Vastaus teht\u00e4v\u00e4\u00e4n: Ehtolauseet: P\u00e4\u00e4sykoe tulosten tarkistus`, `fields`: [`AnswerText`]}}]`,10,1,`2023-10-24 00:10:48.063702`);
INSERT INTO django_admin_log VALUES(378,`26`,`Ehtolauseet: Pääsykoe tulosten tarkistus`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for Ehtolauseet: P\u00e4\u00e4sykoe tulosten tarkistus`, `fields`: [`Test code`]}}]`,10,1,`2023-10-24 14:22:27.371699`);
INSERT INTO django_admin_log VALUES(379,`26`,`Ehtolauseet: Pääsykoe tulosten tarkistus`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for Ehtolauseet: P\u00e4\u00e4sykoe tulosten tarkistus`, `fields`: [`Test code`]}}]`,10,1,`2023-10-24 14:52:51.337032`);
INSERT INTO django_admin_log VALUES(380,`26`,`Ehtolauseet: Pääsykoe tulosten tarkistus`,2,`[{`changed`: {`name`: `answer`, `object`: `Vastaus teht\u00e4v\u00e4\u00e4n: Ehtolauseet: P\u00e4\u00e4sykoe tulosten tarkistus`, `fields`: [`AnswerText`]}}]`,10,1,`2023-10-24 14:58:08.441499`);
INSERT INTO django_admin_log VALUES(381,`26`,`Ehtolauseet: Pääsykoe tulosten tarkistus`,2,`[{`changed`: {`name`: `answer`, `object`: `Vastaus teht\u00e4v\u00e4\u00e4n: Ehtolauseet: P\u00e4\u00e4sykoe tulosten tarkistus`, `fields`: [`AnswerText`, `AnswerOutput`]}}, {`changed`: {`name`: `task test`, `object`: `Test for Ehtolauseet: P\u00e4\u00e4sykoe tulosten tarkistus`, `fields`: [`Test code`]}}]`,10,1,`2023-10-24 15:42:17.012719`);
INSERT INTO django_admin_log VALUES(382,`27`,`Tarkistaa ehtolauseella onko käyttäjällä lupa`,1,`[{`added`: {}}, {`added`: {`name`: `answer`, `object`: `Vastaus teht\u00e4v\u00e4\u00e4n: Tarkistaa ehtolauseella onko k\u00e4ytt\u00e4j\u00e4ll\u00e4 lupa`}}]`,10,1,`2023-10-24 16:01:27.393394`);
INSERT INTO django_admin_log VALUES(383,`27`,`Tarkistaa ehtolauseella onko käyttäjällä lupa`,2,`[{`added`: {`name`: `task test`, `object`: `Test for Tarkistaa ehtolauseella onko k\u00e4ytt\u00e4j\u00e4ll\u00e4 lupa`}}]`,10,1,`2023-10-24 16:11:02.252588`);
INSERT INTO django_admin_log VALUES(384,`27`,`Tarkistaa ehtolauseella onko käyttäjällä lupa`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for Tarkistaa ehtolauseella onko k\u00e4ytt\u00e4j\u00e4ll\u00e4 lupa`, `fields`: [`Test code`]}}]`,10,1,`2023-10-24 16:27:32.005002`);
INSERT INTO django_admin_log VALUES(385,`27`,`Tarkistaa ehtolauseella onko käyttäjällä lupa`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for Tarkistaa ehtolauseella onko k\u00e4ytt\u00e4j\u00e4ll\u00e4 lupa`, `fields`: [`Test code`]}}]`,10,1,`2023-10-24 16:39:01.631744`);
INSERT INTO django_admin_log VALUES(386,`27`,`Tarkistaa ehtolauseella onko käyttäjällä lupa`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for Tarkistaa ehtolauseella onko k\u00e4ytt\u00e4j\u00e4ll\u00e4 lupa`, `fields`: [`Test code`]}}]`,10,1,`2023-10-24 16:42:44.913210`);
INSERT INTO django_admin_log VALUES(387,`27`,`Tarkistaa ehtolauseella onko käyttäjällä lupa`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for Tarkistaa ehtolauseella onko k\u00e4ytt\u00e4j\u00e4ll\u00e4 lupa`, `fields`: [`Test code`]}}]`,10,1,`2023-10-24 17:26:46.095784`);
INSERT INTO django_admin_log VALUES(388,`27`,`Tarkistaa ehtolauseella onko käyttäjällä lupa`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for Tarkistaa ehtolauseella onko k\u00e4ytt\u00e4j\u00e4ll\u00e4 lupa`, `fields`: [`Test code`]}}]`,10,1,`2023-10-24 17:31:36.114128`);
INSERT INTO django_admin_log VALUES(389,`27`,`Tarkistaa ehtolauseella onko käyttäjällä lupa`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for Tarkistaa ehtolauseella onko k\u00e4ytt\u00e4j\u00e4ll\u00e4 lupa`, `fields`: [`Test code`]}}]`,10,1,`2023-10-24 17:33:52.916896`);
INSERT INTO django_admin_log VALUES(390,`19`,`If-lause Käyttäjätunnuksen/salasanan tarkistamuinen`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for If-lause K\u00e4ytt\u00e4j\u00e4tunnuksen/salasanan tarkistamuinen`, `fields`: [`Test code`]}}]`,10,1,`2023-10-24 17:41:32.661918`);
INSERT INTO django_admin_log VALUES(391,`19`,`If-lause Käyttäjätunnuksen/salasanan tarkistamuinen`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for If-lause K\u00e4ytt\u00e4j\u00e4tunnuksen/salasanan tarkistamuinen`, `fields`: [`Test code`]}}]`,10,1,`2023-10-24 17:43:39.925625`);
INSERT INTO django_admin_log VALUES(392,`27`,`Tarkistaa ehtolauseella onko käyttäjällä lupa`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for Tarkistaa ehtolauseella onko k\u00e4ytt\u00e4j\u00e4ll\u00e4 lupa`, `fields`: [`Test code`]}}]`,10,1,`2023-10-24 17:44:41.905748`);
INSERT INTO django_admin_log VALUES(393,`27`,`Tarkistaa ehtolauseella onko käyttäjällä lupa`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for Tarkistaa ehtolauseella onko k\u00e4ytt\u00e4j\u00e4ll\u00e4 lupa`, `fields`: [`Test code`]}}]`,10,1,`2023-10-24 17:59:31.614959`);
INSERT INTO django_admin_log VALUES(394,`26`,`Ehtolauseet: Pääsykoe tulosten tarkistus`,2,`[]`,10,1,`2023-10-24 18:08:43.502995`);
INSERT INTO django_admin_log VALUES(395,`26`,`Ehtolauseet: Pääsykoe tulosten tarkistus`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for Ehtolauseet: P\u00e4\u00e4sykoe tulosten tarkistus`, `fields`: [`Test code`]}}]`,10,1,`2023-10-24 18:13:51.187580`);
INSERT INTO django_admin_log VALUES(396,`16`,`Listan muokkaus ja pituuden tutkiminen`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for Listan muokkaus ja pituuden tutkiminen`, `fields`: [`Test code`]}}]`,10,1,`2023-10-24 21:51:08.277472`);
INSERT INTO django_admin_log VALUES(397,`16`,`Listan muokkaus ja pituuden tutkiminen`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for Listan muokkaus ja pituuden tutkiminen`, `fields`: [`Test code`]}}]`,10,1,`2023-10-24 22:06:41.520584`);
INSERT INTO django_admin_log VALUES(398,`16`,`Listan muokkaus ja pituuden tutkiminen`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for Listan muokkaus ja pituuden tutkiminen`, `fields`: [`Test code`]}}]`,10,1,`2023-10-24 22:11:03.729745`);
INSERT INTO django_admin_log VALUES(399,`16`,`Listan muokkaus ja pituuden tutkiminen`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for Listan muokkaus ja pituuden tutkiminen`, `fields`: [`Test code`]}}]`,10,1,`2023-10-24 22:36:50.597985`);
INSERT INTO django_admin_log VALUES(400,`16`,`Listan muokkaus ja pituuden tutkiminen`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for Listan muokkaus ja pituuden tutkiminen`, `fields`: [`Test code`]}}]`,10,1,`2023-10-24 22:38:39.892831`);
INSERT INTO django_admin_log VALUES(401,`16`,`Listan muokkaus ja pituuden tutkiminen`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for Listan muokkaus ja pituuden tutkiminen`, `fields`: [`Test code`]}}]`,10,1,`2023-10-24 23:21:03.900053`);
INSERT INTO django_admin_log VALUES(402,`16`,`Listan muokkaus ja pituuden tutkiminen`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for Listan muokkaus ja pituuden tutkiminen`, `fields`: [`Test code`]}}]`,10,1,`2023-10-24 23:28:31.774692`);
INSERT INTO django_admin_log VALUES(403,`16`,`Listan muokkaus ja pituuden tutkiminen`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for Listan muokkaus ja pituuden tutkiminen`, `fields`: [`Test code`]}}]`,10,1,`2023-10-24 23:34:51.654366`);
INSERT INTO django_admin_log VALUES(404,`16`,`Listan muokkaus ja pituuden tutkiminen`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for Listan muokkaus ja pituuden tutkiminen`, `fields`: [`Test code`]}}]`,10,1,`2023-10-24 23:40:05.954036`);
INSERT INTO django_admin_log VALUES(405,`16`,`Listan muokkaus ja pituuden tutkiminen`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for Listan muokkaus ja pituuden tutkiminen`, `fields`: [`Test code`]}}]`,10,1,`2023-10-24 23:42:54.370192`);
INSERT INTO django_admin_log VALUES(406,`16`,`Listan muokkaus ja pituuden tutkiminen`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for Listan muokkaus ja pituuden tutkiminen`, `fields`: [`Test code`]}}]`,10,1,`2023-10-24 23:54:22.503280`);
INSERT INTO django_admin_log VALUES(407,`16`,`Listan muokkaus ja pituuden tutkiminen`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for Listan muokkaus ja pituuden tutkiminen`, `fields`: [`Test code`]}}]`,10,1,`2023-10-25 00:02:42.439424`);
INSERT INTO django_admin_log VALUES(408,`16`,`Listan muokkaus ja pituuden tutkiminen`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for Listan muokkaus ja pituuden tutkiminen`, `fields`: [`Test code`]}}]`,10,1,`2023-10-25 00:09:07.728678`);
INSERT INTO django_admin_log VALUES(409,`16`,`Listan muokkaus ja pituuden tutkiminen`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for Listan muokkaus ja pituuden tutkiminen`, `fields`: [`Test code`]}}]`,10,1,`2023-10-25 00:15:47.266070`);
INSERT INTO django_admin_log VALUES(410,`16`,`Listan muokkaus ja pituuden tutkiminen`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for Listan muokkaus ja pituuden tutkiminen`, `fields`: [`Test code`]}}]`,10,1,`2023-10-25 14:32:29.580998`);
INSERT INTO django_admin_log VALUES(411,`16`,`Listan muokkaus ja pituuden tutkiminen`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for Listan muokkaus ja pituuden tutkiminen`, `fields`: [`Test code`]}}]`,10,1,`2023-10-25 14:38:30.979900`);
INSERT INTO django_admin_log VALUES(412,`16`,`Listan muokkaus ja pituuden tutkiminen`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for Listan muokkaus ja pituuden tutkiminen`, `fields`: [`Test code`]}}]`,10,1,`2023-10-25 15:06:30.368828`);
INSERT INTO django_admin_log VALUES(413,`16`,`Listan muokkaus ja pituuden tutkiminen`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for Listan muokkaus ja pituuden tutkiminen`, `fields`: [`Test code`]}}]`,10,1,`2023-10-25 15:33:59.017326`);
INSERT INTO django_admin_log VALUES(414,`16`,`Listan muokkaus ja pituuden tutkiminen`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for Listan muokkaus ja pituuden tutkiminen`, `fields`: [`Test code`]}}]`,10,1,`2023-10-25 15:40:33.229709`);
INSERT INTO django_admin_log VALUES(415,`16`,`Listan muokkaus ja pituuden tutkiminen`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for Listan muokkaus ja pituuden tutkiminen`, `fields`: [`Test code`]}}]`,10,1,`2023-10-25 15:45:39.221788`);
INSERT INTO django_admin_log VALUES(416,`16`,`Listan muokkaus ja pituuden tutkiminen`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for Listan muokkaus ja pituuden tutkiminen`, `fields`: [`Test code`]}}]`,10,1,`2023-10-25 15:47:14.492021`);
INSERT INTO django_admin_log VALUES(417,`16`,`Listan muokkaus ja pituuden tutkiminen`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for Listan muokkaus ja pituuden tutkiminen`, `fields`: [`Test code`]}}]`,10,1,`2023-10-25 15:48:49.859347`);
INSERT INTO django_admin_log VALUES(418,`2`,`Syötteen kysyminen käyttäjältä`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for Sy\u00f6tteen kysyminen k\u00e4ytt\u00e4j\u00e4lt\u00e4`, `fields`: [`Test code`]}}]`,10,1,`2023-10-25 19:21:21.832318`);
INSERT INTO django_admin_log VALUES(419,`2`,`Syötteen kysyminen käyttäjältä`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for Sy\u00f6tteen kysyminen k\u00e4ytt\u00e4j\u00e4lt\u00e4`, `fields`: [`Test code`]}}]`,10,1,`2023-10-25 19:28:40.075592`);
INSERT INTO django_admin_log VALUES(420,`4`,`Kokonaislukujen yhteenlasku`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for Kokonaislukujen yhteenlasku`, `fields`: [`Test code`]}}]`,10,1,`2023-10-25 19:39:47.858752`);
INSERT INTO django_admin_log VALUES(421,`5`,`Liukuluku muutujien yhteenlasku`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for Liukuluku muutujien yhteenlasku`, `fields`: [`Test code`]}}]`,10,1,`2023-10-25 22:34:44.348822`);
INSERT INTO django_admin_log VALUES(422,`6`,`Merkkijonon luominen Pythonissa`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for Merkkijonon luominen Pythonissa`, `fields`: [`Test code`]}}]`,10,1,`2023-10-25 22:43:30.214771`);
INSERT INTO django_admin_log VALUES(423,`6`,`Merkkijonon luominen Pythonissa`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for Merkkijonon luominen Pythonissa`, `fields`: [`Test code`]}}]`,10,1,`2023-10-25 22:48:03.602806`);
INSERT INTO django_admin_log VALUES(424,`7`,`Monirivisten merkkijonojen luominen`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for Monirivisten merkkijonojen luominen`, `fields`: [`Test code`]}}]`,10,1,`2023-10-25 23:14:17.200892`);
INSERT INTO django_admin_log VALUES(425,`7`,`Monirivisten merkkijonojen luominen`,2,`[]`,10,1,`2023-10-25 23:15:44.297911`);
INSERT INTO django_admin_log VALUES(426,`7`,`Monirivisten merkkijonojen luominen`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for Monirivisten merkkijonojen luominen`, `fields`: [`Test code`]}}]`,10,1,`2023-10-25 23:28:43.622523`);
INSERT INTO django_admin_log VALUES(427,`7`,`Monirivisten merkkijonojen luominen`,2,`[]`,10,1,`2023-10-25 23:30:11.797424`);
INSERT INTO django_admin_log VALUES(428,`7`,`Monirivisten merkkijonojen luominen`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for Monirivisten merkkijonojen luominen`, `fields`: [`Test code`]}}]`,10,1,`2023-10-25 23:36:32.667485`);
INSERT INTO django_admin_log VALUES(429,`7`,`Monirivisten merkkijonojen luominen`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for Monirivisten merkkijonojen luominen`, `fields`: [`Test code`]}}]`,10,1,`2023-10-25 23:44:45.251498`);
INSERT INTO django_admin_log VALUES(430,`8`,`Merkkijonot ja erikoismerkit Pythonissa`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for Merkkijonot ja erikoismerkit Pythonissa`, `fields`: [`Test code`]}}]`,10,1,`2023-10-26 00:15:09.481335`);
INSERT INTO django_admin_log VALUES(431,`7`,`Monirivisten merkkijonojen luominen`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for Monirivisten merkkijonojen luominen`, `fields`: [`Test code`]}}]`,10,1,`2023-10-26 01:18:03.140172`);
INSERT INTO django_admin_log VALUES(432,`7`,`Monirivisten merkkijonojen luominen`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for Monirivisten merkkijonojen luominen`, `fields`: [`Test code`]}}]`,10,1,`2023-10-26 01:22:45.680098`);
INSERT INTO django_admin_log VALUES(433,`7`,`Monirivisten merkkijonojen luominen`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for Monirivisten merkkijonojen luominen`, `fields`: [`Test code`]}}]`,10,1,`2023-10-26 01:31:07.712757`);
INSERT INTO django_admin_log VALUES(434,`8`,`Merkkijonot ja erikoismerkit Pythonissa`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for Merkkijonot ja erikoismerkit Pythonissa`, `fields`: [`Test code`]}}]`,10,1,`2023-10-26 01:38:30.644570`);
INSERT INTO django_admin_log VALUES(435,`16`,`Listan muokkaus ja pituuden tutkiminen`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for Listan muokkaus ja pituuden tutkiminen`, `fields`: [`Test code`]}}]`,10,1,`2023-10-26 01:54:35.725022`);
INSERT INTO django_admin_log VALUES(436,`9`,`Yksittäiset ja kaksoislainausmerkit merkkijonossa`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for Yksitt\u00e4iset ja kaksoislainausmerkit merkkijonossa`, `fields`: [`Test code`]}}]`,10,1,`2023-10-27 17:43:15.189330`);
INSERT INTO django_admin_log VALUES(437,`10`,`Merkkijonon merkkeihin viittaaminen`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for Merkkijonon merkkeihin viittaaminen`, `fields`: [`Test code`]}}]`,10,1,`2023-10-27 17:56:51.665623`);
INSERT INTO django_admin_log VALUES(438,`11`,`Tulostus aliohjelma`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for Tulostus aliohjelma`, `fields`: [`Test code`]}}]`,10,1,`2023-10-27 18:13:57.711838`);
INSERT INTO django_admin_log VALUES(439,`11`,`Tulostus aliohjelma`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for Tulostus aliohjelma`, `fields`: [`Test code`]}}]`,10,1,`2023-10-27 18:30:31.781436`);
INSERT INTO django_admin_log VALUES(440,`11`,`Tulostus aliohjelma`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for Tulostus aliohjelma`, `fields`: [`Test code`]}}]`,10,1,`2023-10-27 18:39:26.125239`);
INSERT INTO django_admin_log VALUES(441,`11`,`Tulostus aliohjelma`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for Tulostus aliohjelma`, `fields`: [`Test code`]}}]`,10,1,`2023-10-27 18:44:03.754270`);
INSERT INTO django_admin_log VALUES(442,`11`,`Tulostus aliohjelma`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for Tulostus aliohjelma`, `fields`: [`Test code`]}}]`,10,1,`2023-10-27 18:57:30.542662`);
INSERT INTO django_admin_log VALUES(443,`11`,`Tulostus aliohjelma`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for Tulostus aliohjelma`, `fields`: [`Test code`]}}]`,10,1,`2023-10-27 19:04:22.839589`);
INSERT INTO django_admin_log VALUES(444,`12`,`Parametrien välitys Python aliohjelmissa`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for Parametrien v\u00e4litys Python aliohjelmissa`, `fields`: [`Test code`]}}]`,10,1,`2023-10-27 19:20:25.931990`);
INSERT INTO django_admin_log VALUES(445,`13`,`Yhteenlasku aliohjelma`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for Yhteenlasku aliohjelma`, `fields`: [`Test code`]}}]`,10,1,`2023-10-27 19:30:53.032683`);
INSERT INTO django_admin_log VALUES(446,`13`,`Yhteenlasku aliohjelma`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for Yhteenlasku aliohjelma`, `fields`: [`Test code`]}}]`,10,1,`2023-10-27 19:36:41.389812`);
INSERT INTO django_admin_log VALUES(447,`13`,`Yhteenlasku aliohjelma`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for Yhteenlasku aliohjelma`, `fields`: [`Test code`]}}]`,10,1,`2023-10-27 20:00:29.281175`);
INSERT INTO django_admin_log VALUES(448,`13`,`Yhteenlasku aliohjelma`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for Yhteenlasku aliohjelma`, `fields`: [`Test code`]}}]`,10,1,`2023-10-27 20:03:08.962927`);
INSERT INTO django_admin_log VALUES(449,`13`,`Yhteenlasku aliohjelma`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for Yhteenlasku aliohjelma`, `fields`: [`Test code`]}}]`,10,1,`2023-10-27 20:39:11.758455`);
INSERT INTO django_admin_log VALUES(450,`14`,`Liukulukujen laskeminen aliohjelmilla`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for Liukulukujen laskeminen aliohjelmilla`, `fields`: [`Test code`]}}]`,10,1,`2023-10-28 16:01:15.746819`);
INSERT INTO django_admin_log VALUES(451,`14`,`Liukulukujen laskeminen aliohjelmilla`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for Liukulukujen laskeminen aliohjelmilla`, `fields`: [`Test code`]}}]`,10,1,`2023-10-28 16:11:11.710489`);
INSERT INTO django_admin_log VALUES(452,`14`,`Liukulukujen laskeminen aliohjelmilla`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for Liukulukujen laskeminen aliohjelmilla`, `fields`: [`Test code`]}}]`,10,1,`2023-10-28 16:19:27.528100`);
INSERT INTO django_admin_log VALUES(453,`14`,`Liukulukujen laskeminen aliohjelmilla`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for Liukulukujen laskeminen aliohjelmilla`, `fields`: [`Test code`]}}]`,10,1,`2023-10-28 16:22:21.907735`);
INSERT INTO django_admin_log VALUES(454,`14`,`Liukulukujen laskeminen aliohjelmilla`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for Liukulukujen laskeminen aliohjelmilla`, `fields`: [`Test code`]}}]`,10,1,`2023-10-28 16:37:10.017551`);
INSERT INTO django_admin_log VALUES(455,`14`,`Liukulukujen laskeminen aliohjelmilla`,2,`[{`changed`: {`fields`: [`TaskDescription`]}}]`,10,1,`2023-10-28 16:39:34.679577`);
INSERT INTO django_admin_log VALUES(456,`14`,`Liukulukujen laskeminen aliohjelmilla`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for Liukulukujen laskeminen aliohjelmilla`, `fields`: [`Test code`]}}]`,10,1,`2023-10-28 16:42:18.027292`);
INSERT INTO django_admin_log VALUES(457,`14`,`Liukulukujen laskeminen aliohjelmilla`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for Liukulukujen laskeminen aliohjelmilla`, `fields`: [`Test code`]}}]`,10,1,`2023-10-28 17:03:11.386720`);
INSERT INTO django_admin_log VALUES(458,`14`,`Liukulukujen laskeminen aliohjelmilla`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for Liukulukujen laskeminen aliohjelmilla`, `fields`: [`Test code`]}}]`,10,1,`2023-10-28 17:09:17.156620`);
INSERT INTO django_admin_log VALUES(459,`14`,`Liukulukujen laskeminen aliohjelmilla`,2,`[{`changed`: {`name`: `answer`, `object`: `Vastaus teht\u00e4v\u00e4\u00e4n: Liukulukujen laskeminen aliohjelmilla`, `fields`: [`AnswerText`, `AnswerOutput`]}}]`,10,1,`2023-10-28 17:26:09.041666`);
INSERT INTO django_admin_log VALUES(460,`23`,`For-lause: Tulosta joka toinen`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for For-lause: Tulosta joka toinen`, `fields`: [`Test code`]}}]`,10,1,`2023-11-04 13:55:43.568659`);
INSERT INTO django_admin_log VALUES(461,`23`,`For-lause: Tulosta joka toinen`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for For-lause: Tulosta joka toinen`, `fields`: [`Test code`]}}]`,10,1,`2023-11-04 14:03:28.770075`);
INSERT INTO django_admin_log VALUES(462,`23`,`For-lause: Tulosta joka toinen`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for For-lause: Tulosta joka toinen`, `fields`: [`Test code`]}}]`,10,1,`2023-11-04 14:09:59.224712`);
INSERT INTO django_admin_log VALUES(463,`23`,`For-lause: Tulosta joka toinen`,2,`[]`,10,1,`2023-11-04 14:14:42.609997`);
INSERT INTO django_admin_log VALUES(464,`23`,`For-lause: Tulosta joka toinen`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for For-lause: Tulosta joka toinen`, `fields`: [`Test code`]}}]`,10,1,`2023-11-04 14:21:22.285646`);
INSERT INTO django_admin_log VALUES(465,`23`,`For-lause: Tulosta joka toinen`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for For-lause: Tulosta joka toinen`, `fields`: [`Test code`]}}]`,10,1,`2023-11-04 14:24:50.262241`);
INSERT INTO django_admin_log VALUES(466,`23`,`For-lause: Tulosta joka toinen`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for For-lause: Tulosta joka toinen`, `fields`: [`Test code`]}}]`,10,1,`2023-11-04 14:27:24.860462`);
INSERT INTO django_admin_log VALUES(467,`23`,`For-lause: Tulosta joka toinen`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for For-lause: Tulosta joka toinen`, `fields`: [`Test code`]}}]`,10,1,`2023-11-04 15:30:07.475685`);
INSERT INTO django_admin_log VALUES(468,`23`,`For-lause: Tulosta joka toinen`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for For-lause: Tulosta joka toinen`, `fields`: [`Test code`]}}]`,10,1,`2023-11-04 15:45:59.038257`);
INSERT INTO django_admin_log VALUES(469,`21`,`Luvun kertominen kahdella ja arvon palauttaminen aliohjelmasta`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for Luvun kertominen kahdella ja arvon palauttaminen aliohjelmasta`, `fields`: [`Test code`]}}]`,10,1,`2023-11-05 01:21:50.299071`);
INSERT INTO django_admin_log VALUES(470,`22`,`Laske lukujen neliöt käyttäen for-lausetta`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for Laske lukujen neli\u00f6t k\u00e4ytt\u00e4en for-lausetta`, `fields`: [`Test code`]}}]`,10,1,`2023-11-05 01:32:54.454971`);
INSERT INTO django_admin_log VALUES(471,`18`,`For-silmukan perusteet Pythonissa`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for For-silmukan perusteet Pythonissa`, `fields`: [`Test code`]}}]`,10,1,`2023-11-05 01:40:40.210177`);
INSERT INTO django_admin_log VALUES(472,`18`,`For-silmukan perusteet Pythonissa`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for For-silmukan perusteet Pythonissa`, `fields`: [`Test code`]}}]`,10,1,`2023-11-05 01:42:51.605526`);
INSERT INTO django_admin_log VALUES(473,`18`,`For-silmukan perusteet Pythonissa`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for For-silmukan perusteet Pythonissa`, `fields`: [`Test code`]}}]`,10,1,`2023-11-05 01:46:36.309688`);
INSERT INTO django_admin_log VALUES(474,`18`,`For-silmukan perusteet Pythonissa`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for For-silmukan perusteet Pythonissa`, `fields`: [`Test code`]}}]`,10,1,`2023-11-05 01:48:34.700633`);
INSERT INTO django_admin_log VALUES(475,`24`,`While-silmukkan perusteet`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for While-silmukkan perusteet`, `fields`: [`Test code`]}}]`,10,1,`2023-11-05 01:54:59.178908`);
INSERT INTO django_admin_log VALUES(476,`24`,`While-silmukkan perusteet`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for While-silmukkan perusteet`, `fields`: [`Test code`]}}]`,10,1,`2023-11-05 02:00:04.971340`);
INSERT INTO django_admin_log VALUES(477,`24`,`While-silmukkan perusteet`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for While-silmukkan perusteet`, `fields`: [`Test code`]}}]`,10,1,`2023-11-05 02:01:28.717709`);
INSERT INTO django_admin_log VALUES(478,`24`,`While-silmukkan perusteet`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for While-silmukkan perusteet`, `fields`: [`Test code`]}}]`,10,1,`2023-11-05 02:03:28.783964`);
INSERT INTO django_admin_log VALUES(479,`24`,`While-silmukkan perusteet`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for While-silmukkan perusteet`, `fields`: [`Test code`]}}]`,10,1,`2023-11-05 02:07:16.812545`);
INSERT INTO django_admin_log VALUES(480,`27`,`Tarkistaa ehtolauseella onko käyttäjällä lupa`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for Tarkistaa ehtolauseella onko k\u00e4ytt\u00e4j\u00e4ll\u00e4 lupa`, `fields`: [`Test code`]}}]`,10,1,`2023-11-05 02:14:51.824425`);
INSERT INTO django_admin_log VALUES(481,`20`,`Iän tarkistaminen If lauseella`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for I\u00e4n tarkistaminen If lauseella`, `fields`: [`Test code`]}}]`,10,1,`2023-11-05 02:24:45.827226`);
INSERT INTO django_admin_log VALUES(482,`26`,`Ehtolauseet: Pääsykoe tulosten tarkistus`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for Ehtolauseet: P\u00e4\u00e4sykoe tulosten tarkistus`, `fields`: [`Test code`]}}]`,10,1,`2023-11-05 12:19:50.499015`);
INSERT INTO django_admin_log VALUES(483,`25`,`While-silmukka: Luvun jakaminen tekijöihin`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for While-silmukka: Luvun jakaminen tekij\u00f6ihin`, `fields`: [`Test code`]}}]`,10,1,`2023-11-05 12:32:04.591100`);
INSERT INTO django_admin_log VALUES(484,`17`,`Moniulotteisten listojen perusteet`,2,`[{`changed`: {`name`: `task test`, `object`: `Test for Moniulotteisten listojen perusteet`, `fields`: [`Test code`]}}]`,10,1,`2023-11-05 12:56:03.292037`);
INSERT INTO django_admin_log VALUES(485,`6`,`ahori`,1,`[{`added`: {}}]`,6,1,`2023-11-08 17:19:56.576523`);
INSERT INTO django_admin_log VALUES(486,`7`,`eliasA`,1,`[{`added`: {}}]`,6,1,`2023-11-09 11:25:43.939583`);
INSERT INTO django_admin_log VALUES(487,`7`,`eliasA`,2,`[]`,6,1,`2023-11-09 11:26:03.041653`);
INSERT INTO django_admin_log VALUES(488,`1`,`Python perusteet`,2,`[{`changed`: {`fields`: [`CourseLogo`]}}]`,9,1,`2023-11-14 18:21:51.315498`);
INSERT INTO django_admin_log VALUES(489,`1`,`Python perusteet`,2,`[{`changed`: {`fields`: [`CourseLogo`]}}]`,9,1,`2023-11-14 18:25:11.275703`);
INSERT INTO django_admin_log VALUES(490,`1`,`Python perusteet`,2,`[{`changed`: {`fields`: [`CourseLogo`]}}]`,9,1,`2023-11-14 18:27:07.883885`);
INSERT INTO django_admin_log VALUES(491,`1`,`Python perusteet`,2,`[{`changed`: {`fields`: [`CourseLogo`]}}]`,9,1,`2023-11-14 18:28:08.396488`);
INSERT INTO django_admin_log VALUES(492,`2`,`Olio-ohjelmointi Pythonilla`,2,`[{`changed`: {`fields`: [`CourseLogo`]}}]`,9,1,`2023-11-14 18:40:04.442744`);
INSERT INTO django_admin_log VALUES(493,`3`,`Tietorakenteet ja algoritmit Pythonilla`,2,`[{`changed`: {`fields`: [`CourseLogo`]}}]`,9,1,`2023-11-14 18:49:28.778621`);
INSERT INTO django_admin_log VALUES(494,`4`,`Koodaushaastattelutehtävät Pythonilla`,2,`[{`changed`: {`fields`: [`CourseLogo`]}}]`,9,1,`2023-11-14 18:52:23.180174`);
INSERT INTO django_admin_log VALUES(495,`1`,`Python pähkinänkuoressa`,2,`[{`changed`: {`fields`: [`TutorialLogo`]}}]`,11,1,`2023-11-15 00:04:53.787026`);
INSERT INTO django_admin_log VALUES(496,`1`,`Python pähkinänkuoressa`,2,`[{`changed`: {`fields`: [`TutorialLogo`]}}]`,11,1,`2023-11-15 00:06:50.805624`);
INSERT INTO django_admin_log VALUES(497,`2`,`Python Ohjelman Rakenne ja muuttujat`,2,`[]`,11,1,`2023-11-15 00:08:17.006090`);
INSERT INTO django_admin_log VALUES(498,`2`,`Python Ohjelman Rakenne ja muuttujat`,2,`[{`changed`: {`fields`: [`TutorialLogo`]}}]`,11,1,`2023-11-15 00:08:44.133291`);
INSERT INTO django_admin_log VALUES(499,`2`,`Python Ohjelman Rakenne ja muuttujat`,2,`[{`changed`: {`fields`: [`TutorialLogo`]}}]`,11,1,`2023-11-15 00:17:59.077334`);
INSERT INTO django_admin_log VALUES(500,`2`,`Python Ohjelman Rakenne ja muuttujat`,2,`[{`changed`: {`fields`: [`TutorialLogo`]}}]`,11,1,`2023-11-15 00:19:31.465354`);
INSERT INTO django_admin_log VALUES(501,`13`,`Poikkeuksien käsittely Pythonissa`,2,`[{`changed`: {`fields`: [`TutorialLogo`]}}]`,11,1,`2023-11-15 16:13:46.454273`);
INSERT INTO django_admin_log VALUES(502,`12`,`Lambda funktio Pythonissa`,2,`[{`changed`: {`fields`: [`TutorialLogo`]}}]`,11,1,`2023-11-15 16:15:35.210244`);
INSERT INTO django_admin_log VALUES(503,`11`,`Luokat/Oliot Pythonissa`,2,`[{`changed`: {`fields`: [`TutorialLogo`]}}]`,11,1,`2023-11-15 16:15:56.261006`);
INSERT INTO django_admin_log VALUES(504,`10`,`Tiedostojen käsittely Pythonissa`,2,`[{`changed`: {`fields`: [`TutorialLogo`]}}]`,11,1,`2023-11-15 16:16:22.390379`);
INSERT INTO django_admin_log VALUES(505,`9`,`Python aliohjelmat`,2,`[{`changed`: {`fields`: [`TutorialLogo`]}}]`,11,1,`2023-11-15 16:17:07.725726`);
INSERT INTO django_admin_log VALUES(506,`9`,`Python aliohjelmat`,2,`[]`,11,1,`2023-11-15 16:17:31.386884`);
INSERT INTO django_admin_log VALUES(507,`8`,`Pythonin tietorakenteet`,2,`[{`changed`: {`fields`: [`TutorialLogo`]}}]`,11,1,`2023-11-15 16:17:50.892154`);
INSERT INTO django_admin_log VALUES(508,`7`,`Ehtolauseet`,2,`[{`changed`: {`fields`: [`TutorialLogo`]}}]`,11,1,`2023-11-15 16:19:08.982518`);
INSERT INTO django_admin_log VALUES(509,`6`,`Toistolauseet/silmukat`,2,`[{`changed`: {`fields`: [`Content`, `TutorialLogo`]}}]`,11,1,`2023-11-15 16:19:34.061504`);
INSERT INTO django_admin_log VALUES(510,`5`,`Merkkijonot`,2,`[{`changed`: {`fields`: [`TutorialLogo`]}}]`,11,1,`2023-11-15 16:19:57.709441`);
INSERT INTO django_admin_log VALUES(511,`4`,`Luvut Pythonissa`,2,`[{`changed`: {`fields`: [`TutorialLogo`]}}]`,11,1,`2023-11-15 16:20:34.987222`);
INSERT INTO django_admin_log VALUES(512,`3`,`Tulostus ja Tiedon Kysyminen`,2,`[{`changed`: {`fields`: [`TutorialLogo`]}}]`,11,1,`2023-11-15 16:23:21.748823`);
INSERT INTO django_admin_log VALUES(513,`5`,`JavaScript ohjelmoinnin perusteet`,1,`[{`added`: {}}]`,9,1,`2023-12-05 19:43:16.729173`);
CREATE TABLE IF NOT EXISTS `django_session` (`session_key` varchar(40) NOT NULL PRIMARY KEY, `session_data` text NOT NULL, `expire_date` datetime NOT NULL);
INSERT INTO django_session VALUES(`jwdmw1e3hx41gw0rfm4zz9tiwdzguubv`,`.eJxVjMsOwiAQRf-FtSE8O-DSvd9ABgakaiAp7cr479qkC93ec859sYDbWsM28hJmYmem2el3i5geue2A7thunafe1mWOfFf4QQe_dsrPy-H-HVQc9Vt7ylkZKaQuzlGJBbQGaUGoyQKpopGMR5TGeSeSAKu8xwmNIiwYQbH3B9GVN3c:1qwz4c:aGPZzGMqhdU5ix1DtF4Hzw5tN4Uv4V_9FHg0HIfAEgg`,`2023-11-12 06:14:58.837282`);
INSERT INTO django_session VALUES(`3i35qfwdt4atl5yenz049zs2tytyvryl`,`.eJxVjjsOwjAQRO_iGlm2l_WHkj5nsHZth4SgRIqTCnF3MEoB7byZp3mKSPs2xL2WNY5ZXIQRp9-MKU1lbiDfab4tMi3zto4sW0UetMpuyeVxPbp_goHq8FkH9s7ZQIE1a4Xc94HAWUBjwCcynHSwaOCMCiGX0jvvfAabFGnwuUk3qtP3I77eeVE7DQ:1r0ObO:i-neQ9Y3DLBMbGRc1PCwxSJzJwYMCGr1EVel90jyzb0`,`2023-11-21 16:06:54.831866`);
INSERT INTO django_session VALUES(`zt4hm3zfjjwr3oa4yg4xw33mv7oak0k8`,`.eJxVjMEOwiAQRP-FsyHASmU9eu83kIUFqRpISnsy_rtt0oMeZ96beQtP61L82tPsJxZXocXptwsUn6nugB9U703GVpd5CnJX5EG7HBun1-1w_w4K9bKtiS_kKJJSCQwOKZIbEIF1hnPQThlWYALaBGjRMqiYKZvg3BaYCMTnC-56OC4:1r136e:FUzj9u9XEc7k7jBEdE8jsx3i-riOTIcYUjoYHSVuue0`,`2023-11-23 11:21:52.457521`);
INSERT INTO django_session VALUES(`x23c4bo388xpbhuayu8wdpbdincaycg2`,`.eJxVjDsOwjAQBe_iGlmxF_8o6XMGa9fr4ACypTipEHeHSCmgfTPzXiLitpa49bzEmcVFaHH63QjTI9cd8B3rrcnU6rrMJHdFHrTLsXF-Xg_376BgL986kHfOBgykSA2GpikgOAtGa_AJNSUVrNFwNoMBznly3nkGmwZU4JnF-wPKrDdP:1r2XWO:5qKa64x0nyJqBDqffFF4thfwFPY5emOT68nMYDEl4a4`,`2023-11-27 14:02:36.874483`);
INSERT INTO django_session VALUES(`8nzh9xbjkt4k7abrcr0ejsjd67n3apw0`,`.eJxVjjsOgzAQRO_iOrJs8Ddles5grXfXgRCBhKGKcvdARJG082ae5iUSbGuftspLGkhchReX3ywDjjwdgB4w3WeJ87QuQ5ZHRZ60ym4mft7O7p-gh9rv68IuUI6t1tG1yMYhsAXASDFE64M1CosPRoEr6ECDjappGyjGkFekd-kKdfx-1O8PqAQ7ng:1r2y2e:ocNanoNHHjhBVnu84zro4-QlsLY-E1gzZI7pq0MsJWg`,`2023-11-28 18:21:40.852448`);
INSERT INTO django_session VALUES(`prneg557t97d1nrowtcf1z3eaz6zmj3l`,`.eJxVjjkOwjAURO_iGlmxv1dK-pzB-t5wCHKk2KkQdydBKaCdN_M0L-Jw68VtLa1uiuRKFLn8Zh7DnOoB4gPrfaFhqX2dPD0q9KSNjktMz9vZ_RMUbGVfe810VEZxlBmQA0OfuTVySJCtAS0EZsOFNT5IwUBDSmgCsAGZgBxxl3Zs8_cjF-8Puyk7ZA:1r518L:kiZDoMbVHZxuZhHnK1yPkv1kGdD1MoU783NAgfgHQRU`,`2023-12-04 10:04:01.122674`);
INSERT INTO django_session VALUES(`suo0uf5isc1dxu9lqvs9tl6vvxjfa8dg`,`.eJxVjMEOwiAQRP-FsyHASmU9eu83kIUFqRpISnsy_rtt0oMeZ96beQtP61L82tPsJxZXocXptwsUn6nugB9U703GVpd5CnJX5EG7HBun1-1w_w4K9bKtiS_kKJJSCQwOKZIbEIF1hnPQThlWYALaBGjRMqiYKZvg3BaYCMTnC-56OC4:1r7fct:gCtbzeuLm2BRYVHNkjDHHhDmvu4yHvY3cWiJ2cr6g4E`,`2023-12-11 17:42:31.827229`);
CREATE TABLE IF NOT EXISTS `main_app_tutorialcategory` (`id` integer NOT NULL PRIMARY KEY AUTO_INCREMENT, `name` varchar(200) NOT NULL);
INSERT INTO main_app_tutorialcategory VALUES(1,`Pythonin perusteet`);
CREATE TABLE IF NOT EXISTS `main_app_usercourse` (`id` integer NOT NULL PRIMARY KEY AUTO_INCREMENT, `course_id` bigint NOT NULL REFERENCES `main_app_course` (`id`) , `user_id` bigint NOT NULL REFERENCES `main_app_user` (`id`) );
INSERT INTO main_app_usercourse VALUES(3,1,2);
INSERT INTO main_app_usercourse VALUES(6,1,3);
CREATE TABLE IF NOT EXISTS `main_app_answer` (`id` integer NOT NULL PRIMARY KEY AUTO_INCREMENT, `answerText` text NOT NULL, `answerOutput` text NOT NULL, `answerPublishDate` datetime NOT NULL, `answerTuto` text NULL, `aswerVideo` varchar(200) NULL, `task_id` bigint NOT NULL REFERENCES `main_app_task` (`id`) );
INSERT INTO main_app_answer VALUES(1,`print(`Hello world!)`,`Hello world!`,`2023-10-01 06:40:25`,``,NULL,1);
INSERT INTO main_app_answer VALUES(2,`-`,`-`,`2023-10-01 15:18:34`,``,NULL,3);
INSERT INTO main_app_answer VALUES(3,replace(replace(`# Pyydä käyttäjältä etunimi\r\netunimi = input(`Mikä on etunimesi?> `)\r\n\r\n# pyydä käyttäjältä sukunimi \r\nsukunimi = input(`Mikä on sukunimesi?> `)\r\n\r\n# Tulosta tervehdys\r\nprint(f`Hei, {etunimi} {sukunimi}!`)`,`\r`,char(13)),`\n`,char(10)),replace(replace(`Mikä on etunimesi?> Matti\r\nMikä on sukunimesi?> Meikäläinen\r\nHei, Matti Meikäläinen!`,`\r`,char(13)),`\n`,char(10)),`2023-10-03 22:15:54`,``,NULL,2);
INSERT INTO main_app_answer VALUES(4,replace(replace(`num1 = 5\r\nnum2 = 10\r\nsumma = num1 + num2\r\nprint(`Summa on:`, summa)`,`\r`,char(13)),`\n`,char(10)),`Summa on: 15`,`2023-10-04 19:50:13`,``,NULL,4);
INSERT INTO main_app_answer VALUES(5,replace(replace(`float1 = 3.14\r\nfloat2 = 9.81\r\nsumma = float1 + float2\r\nsumma = round(summa, 2)\r\nprint(`Summa on:`, summa)`,`\r`,char(13)),`\n`,char(10)),`Summa on: 12.95`,`2023-10-04 19:56:51`,``,NULL,5);
INSERT INTO main_app_answer VALUES(6,replace(replace(`lause = `Python on hienoa!`\r\nprint(lause)`,`\r`,char(13)),`\n`,char(10)),`Python on hienoa!`,`2023-10-05 19:25:10`,``,NULL,6);
INSERT INTO main_app_answer VALUES(7,replace(replace(`runo = ```\r\nRoses are red,\r\nViolets are blue,\r\nPython is great,\r\nAnd so are you!\r\n```\r\nprint(runo)`,`\r`,char(13)),`\n`,char(10)),replace(replace(`Roses are red,\r\nViolets are blue,\r\nPython is great,\r\nAnd so are you!`,`\r`,char(13)),`\n`,char(10)),`2023-10-05 19:27:53`,``,NULL,7);
INSERT INTO main_app_answer VALUES(8,replace(replace(`polku = `The file is located at ``C:\\\\Desktop\\\\file.txt``.`\r\nprint(polku)`,`\r`,char(13)),`\n`,char(10)),`The file is located at ``C:\\Desktop\\file.txt``.`,`2023-10-05 19:30:23`,``,NULL,8);
INSERT INTO main_app_answer VALUES(9,replace(replace(`tervehdys = ``He said, `Hello, world!```\r\nprint(tervehdys)`,`\r`,char(13)),`\n`,char(10)),`He said, `Hello, world!``,`2023-10-05 19:34:10`,``,NULL,9);
INSERT INTO main_app_answer VALUES(10,replace(replace(`# Luo merkkijonon `Python on mukavaa`, ja tallentaa sen muuttujaan lause.\r\nlause = `Python on mukavaa`\r\n\r\n# Selvittää lauseen pituuden. ja tallentaa sen muuttujaan `pituus`\r\npituus = len(lause)\r\n\r\n# Tallentaa sanan kolmannen kirjaimen muuttujaan ``merkki``.\r\nmerkki = lause[2]\r\n\r\n# Tallentaa merkkijonon viimeisen merkin muuttujaan ``viimeinen``.\r\nviimeinen = lause[-1]\r\n\r\n# Luo vanhasta merkkijonosta uuden `on mukavaa` käyttäen indexsointia.\r\nuusi_lause = lause[7:]\r\n\r\n# Lopuksi ohjelma tulostaa kaikki tiedot ruudulle.\r\nprint(`Lause:`, lause)\r\nprint(`Pituus:`, pituus)\r\nprint(`Kolmas kirjain:`, merkki)\r\nprint(`Viimeinen merkki:`, viimeinen)\r\nprint(`Uusi lause:`, uusi_lause)`,`\r`,char(13)),`\n`,char(10)),replace(replace(`Lause: Python on mukavaa\r\nPituus: 17\r\nKolmas kirjain: t\r\nViimeinen merkki: a\r\nUusi lause: on mukavaa`,`\r`,char(13)),`\n`,char(10)),`2023-10-05 19:37:07`,``,NULL,10);
INSERT INTO main_app_answer VALUES(11,replace(replace(`# Luodaan aliohjelma\r\ndef tulostaViesti():\r\n    print(`Hei aliohjelma!`)\r\n\r\n# Kutsutaan aliohjelmaa pääohjelmasta\r\ntulostaViesti()`,`\r`,char(13)),`\n`,char(10)),`Hei aliohjelma!`,`2023-10-09 14:46:32`,`Hei aliohjelma!`,NULL,11);
INSERT INTO main_app_answer VALUES(12,replace(replace(`# Luodaan aliohjelma\r\ndef tulostaTervehdys(nimi):\r\n    print(`Tervehdys, ` + nimi + `!`)\r\n\r\n# Kysytään käyttäjältä nimi\r\nnimi = input(`Anna nimesi: `)\r\n\r\n# Kutsutaan aliohjelmaa käyttäjän antamalla nimellä\r\ntulostaTervehdys(nimi)`,`\r`,char(13)),`\n`,char(10)),replace(replace(`Anna nimesi: Matti\r\nTervehdys, Matti!`,`\r`,char(13)),`\n`,char(10)),`2023-10-09 14:49:15`,``,NULL,12);
INSERT INTO main_app_answer VALUES(13,replace(replace(`def laskeYhteen(luku1, luku2):\r\n    return luku1 + luku2\r\n\r\ndef tulosta(luku1, luku2, tulos):\r\n    print(f`Lukujen ``{luku1}`` ja ``{luku2}`` summa on ``{tulos}```)\r\n\r\n# Luvut, jotka halutaan laskea yhteen\r\nluku1 = 7\r\nluku2 = 4\r\n\r\n# Kutsutaan funktiota ja tulostetaan tulos\r\ntulos = laskeYhteen(luku1, luku2)\r\ntulosta(luku1, luku2, tulo`,`\r`,char(13)),`\n`,char(10)),`Lukujen ``7`` ja ``4`` summa on ``11```,`2023-10-09 14:53:01`,``,NULL,13);
INSERT INTO main_app_answer VALUES(14,replace(replace(`# Alustetaan lista\r\nlista = [5, 2, 9, 1, 7]\r\n\r\n# Tulostetaan alkuperäinen lista\r\nprint(`Alkuperäinen lista:`, lista)\r\n\r\nprint(`Lisätään alkio listan loppuun append-funktiolla numero 4`)\r\nlista.append(4)\r\nprint(`Lista append-toiminnon jälkeen:`, lista)\r\n\r\nprint(`Lisätään alkio toiseksi listassa insert-funktiolla luku 3`)\r\nlista.insert(1, 3)\r\nprint(`Lista insert-toiminnon jälkeen:`, lista)\r\n\r\nprint(`Poistetaan toinen alkio listasta`)\r\ndel lista[1]\r\nprint(`Lista poiston jälkeen:`, lista)\r\n\r\n# Järjestetään lista\r\nlista.sort()\r\nprint(`Lista järjestämisen jälkeen:`, lista)\r\n\r\n# Tulostetaan listan ensimmäinen alkio\r\nprint(`Listan ensimmäinen alkio:`, lista[0])\r\n\r\n# Tulostetaan listan viimeinen alkio\r\nprint(`Listan viimeinen alkio:`, lista[-1])\r\n\r\n# Tulostetaan listan kolmas alkio\r\nprint(`Listan kolmas alkio:`, lista[2])`,`\r`,char(13)),`\n`,char(10)),replace(replace(`Alkuperäinen lista: [5, 2, 9, 1, 7]\r\nLisätään alkio listan loppuun append-funktiolla numero 4\r\nLista append-toiminnon jälkeen: [5, 2, 9, 1, 7, 4]\r\nLisätään alkio toiseksi listassa insert-funktiolla luku 3\r\nLista insert-toiminnon jälkeen: [5, 3, 2, 9, 1, 7, 4]\r\nPoistetaan toinen alkio listasta\r\nLista poiston jälkeen: [5, 2, 9, 1, 7, 4]\r\nLista järjestämisen jälkeen: [1, 2, 4, 5, 7, 9]\r\nListan ensimmäinen alkio: 1\r\nListan viimeinen alkio: 9\r\nListan kolmas alkio: 4`,`\r`,char(13)),`\n`,char(10)),`2023-10-09 14:58:33`,``,NULL,15);
INSERT INTO main_app_answer VALUES(15,replace(replace(`# Alustetaan lista\r\nlista = [1, 2, 4, 5, 7, 9]\r\nprint(`Alkuperäinen lista:`, lista)\r\nprint(`Alkuperäisen listan pituus:`, len(lista))\r\n\r\n# Lisätään listaan merkkijonot `Maija` ja `Matti`\r\nlista.append(`Maija`)\r\nlista.append(`Matti`)\r\nprint(`Lisätty merkkijonot ``Maija`` ja ``Matti`` listaan:`, lista)\r\nprint(`Listan pituus merkkijonojen lisäyksen jälkeen:`, len(lista))\r\n\r\n# Luodaan uusi lista ja lisätään se alkuperäiseen listaan\r\nuusi_lista = [10, 20, 30]\r\nprint(`Uuden listan pituus:`, len(uusi_lista))\r\nlista.append(uusi_lista)\r\nprint(`Lisätty uusi lista alkuperäiseen listaan:`, lista)\r\nprint(`Listan pituus uuden listan lisäyksen jälkeen:`, len(lista))`,`\r`,char(13)),`\n`,char(10)),replace(replace(`Alkuperäinen lista: [1, 2, 4, 5, 7, 9]\r\nAlkuperäisen listan pituus: 6\r\nLisätty merkkijonot ``Maija`` ja ``Matti`` listaan: [1, 2, 4, 5, 7, 9, ``Maija``, ``Matti``]\r\nListan pituus merkkijonojen lisäyksen jälkeen: 8\r\nUuden listan pituus: 3\r\nLisätty uusi lista alkuperäiseen listaan: [1, 2, 4, 5, 7, 9, ``Maija``, ``Matti``, [10, 20, 30]]\r\nListan pituus uuden listan lisäyksen jälkeen: 9`,`\r`,char(13)),`\n`,char(10)),`2023-10-09 15:02:46`,``,NULL,16);
INSERT INTO main_app_answer VALUES(16,replace(replace(`# Luo 2x3 matriisi\r\012matriisi = [[2, 5, 10], [8, 15, 8]]\r\012\r\012# Tulosta matriisi\r\012print(`Matriisi:`, matriisi)\r\012\r\012# Viittaa matriisin eri alkioihin\r\012print(`\nMatriisin ensimmäisen rivin toinen alkio:`, matriisi[0][1])\r\012print(`Matriisin toisen rivin kolmas alkio:`, matriisi[1][2])`,`\r`,char(13)),`\012`,char(10)),replace(replace(`Matriisi: [[2, 5, 10], [8, 15, 8]]\r\n\r\nMatriisin ensimmäisen rivin toinen alkio: 5\r\nMatriisin toisen rivin kolmas alkio: 8`,`\r`,char(13)),`\n`,char(10)),`2023-10-09 15:06:17`,``,NULL,17);
INSERT INTO main_app_answer VALUES(17,replace(replace(`for i in range(0, 11):\r\n    print(i)`,`\r`,char(13)),`\n`,char(10)),replace(replace(`0\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10`,`\r`,char(13)),`\n`,char(10)),`2023-10-09 15:08:47`,``,NULL,18);
INSERT INTO main_app_answer VALUES(18,replace(replace(`def laskeYhteen(luku1, luku2):\r\n    return luku1 + luku2\r\n\r\ndef laskeErotus(luku1, luku2):\r\n    return luku1 - luku2\r\n\r\ndef laskeTulo(luku1, luku2):\r\n    return luku1 * luku2\r\n\r\ndef laskeOsamaara(luku1, luku2):\r\n    return luku1 / luku2\r\n\r\ndef tulosta(luku1, luku2):\r\n    summa = round(laskeYhteen(luku1, luku2), 2)\r\n    erotus = round(laskeErotus(luku1, luku2), 2)\r\n    tulo = round(laskeTulo(luku1, luku2), 2)\r\n    osamaara = round(laskeOsamaara(luku1, luku2), 2)\r\n    \r\n    print(f`Annoit luvut ``{luku1}`` ja ``{luku2}``.`)\r\n    print(f`Niiden summa on ``{summa:.2f}``,`)\r\n    print(f`erotus on ``{erotus:.2f}``,`)\r\n    print(f`tulo on ``{tulo:.2f}```)\r\n    print(f`ja osamäärä on ``{osamaara:.2f}``.`)\r\n\r\ndef kysyLuvut():\r\n    luku1 = float(input(`Anna ensimmäinen luku: `))\r\n    luku2 = float(input(`Anna toinen luku: `))\r\n    return luku1, luku2\r\n\r\n# Kysytään luvut käyttäjältä\r\nluku1, luku2 = kysyLuvut()\r\n# Kutsutaan tulosta-funktiota ja tulostetaan tulos\r\ntulosta(luku1, luku2)`,`\r`,char(13)),`\n`,char(10)),replace(replace(`Anna ensimmäinen luku: 7.531\r\nAnna toinen luku: 4.87123\r\nAnnoit luvut ``7.531`` ja ``4.87123``.\r\nNiiden summa on ``12.40``,\r\nerotus on ``2.66``,\r\ntulo on ``36.68``\r\nja osamäärä on ``1.55``.`,`\r`,char(13)),`\n`,char(10)),`2023-10-19 14:18:00`,``,NULL,14);
INSERT INTO main_app_answer VALUES(19,replace(replace(`# Pyydetään käyttäjältä nimi\r\nnimi = input(`Anna nimi: `)\r\n\r\n# Tarkistetaan onko nimi oikein\r\nif nimi == `Erkki`:\r\n    # Jos nimi on oikein, pyydetään salasanaa\r\n    salasana = input(`Anna salasana: `)\r\n    \r\n    # Tarkistetaan onko salasana oikein\r\n    if salasana == `Esimerkki`:\r\n        print(`Salasana ja nimi oli oikein!`)\r\n    else:\r\n        print(`Salasana oli väärin.`)\r\nelse:\r\n    print(`Nimi oli väärin.`)`,`\r`,char(13)),`\n`,char(10)),replace(replace(`Anna nimi: Petteri\r\nNimi oli väärin.\r\n\r\nAnna nimi: Erkki\r\nAnna salasana: Kanada\r\nSalasana oli väärin.\r\n\r\nAnna nimi: Erkki\r\nAnna salasana: Esimerkki\r\nSalasana ja nimi oli oikein!`,`\r`,char(13)),`\n`,char(10)),`2023-10-19 15:04:07`,``,NULL,19);
INSERT INTO main_app_answer VALUES(20,replace(replace(`def tarkistaIkaRaja(ika):\r\n    if ika < 15:\r\n        print(`Et ole tarpeeksi vanha kesätöihin, äänestämään tai juomaan väkevää alkoholia.`)\r\n    elif 15 <= ika < 18:\r\n        print(`Voit mennä kesätöihin, mutta et voi äänestää tai juoda väkevää alkoholia.`)\r\n    elif 18 <= ika < 21:\r\n        print(`Voit mennä kesätöihin ja äänestää, mutta et voi juoda väkevää alkoholia.`)\r\n    else:\r\n        print(`Voit mennä kesätöihin, äänestää ja juoda väkevää alkoholia.`)\r\n\r\ndef kysyIka():\r\n    try:\r\n        ika = int(input(`Anna ikäsi: `))\r\n        tarkistaIkaRaja(ika)\r\n    except ValueError:\r\n        print(`Annettu arvo ei ollut luku. Yritä uudelleen.`)\r\n\r\nkysyIka()`,`\r`,char(13)),`\n`,char(10)),replace(replace(`Anna ikäsi:14\r\nEt voi mennä kesätöihin, äänestää tai juoda väkevää alkoholia.\r\n\r\nAnna ikäsi:17\r\nVoit mennä kesätöihin, mutta et voi äänestää tai juoda väkevää alkoholia.\r\n\r\nAnna ikäsi:19\r\nVoit mennä kesätöihin ja äänestää, mutta et voi juoda väkevää alkoholia.\r\n\r\nAnna ikäsi:21\r\nVoit mennä kesätöihin, äänestää ja juoda väkevää alkoholia.`,`\r`,char(13)),`\n`,char(10)),`2023-10-21 18:15:19`,``,NULL,20);
INSERT INTO main_app_answer VALUES(21,replace(replace(`def kerro_kahdella(luku):\r\n    return luku * 2\r\n\r\n# Testikoodi\r\nprint(kerro_kahdella(5))  \r\nprint(kerro_kahdella(0))  \r\nprint(kerro_kahdella(-3))`,`\r`,char(13)),`\n`,char(10)),replace(replace(`10\r\n0\r\n-6`,`\r`,char(13)),`\n`,char(10)),`2023-10-22 19:28:31`,``,NULL,21);
INSERT INTO main_app_answer VALUES(22,replace(replace(`for i in range(10):\r\n    print(`Luvun`, i, `neliö on`, i * i)`,`\r`,char(13)),`\n`,char(10)),replace(replace(`Luvun 0 neliö on 0\r\nLuvun 1 neliö on 1\r\nLuvun 2 neliö on 4\r\nLuvun 3 neliö on 9\r\nLuvun 4 neliö on 16\r\nLuvun 5 neliö on 25\r\nLuvun 6 neliö on 36\r\nLuvun 7 neliö on 49\r\nLuvun 8 neliö on 64\r\nLuvun 9 neliö on 81`,`\r`,char(13)),`\n`,char(10)),`2023-10-23 13:14:31`,``,NULL,22);
INSERT INTO main_app_answer VALUES(23,replace(replace(`for i in range(0, 10, 2):\r\n    print(`Luku:`, i)`,`\r`,char(13)),`\n`,char(10)),replace(replace(`Luku: 0\r\nLuku: 2\r\nLuku: 4\r\nLuku: 6\r\nLuku: 8`,`\r`,char(13)),`\n`,char(10)),`2023-10-23 14:18:03`,``,NULL,23);
INSERT INTO main_app_answer VALUES(24,replace(replace(`luku = 0\r\nwhile luku < 10:\r\n    print(`Luku:`, luku)\r\n    luku += 1`,`\r`,char(13)),`\n`,char(10)),replace(replace(`Luku: 0\r\nLuku: 1\r\nLuku: 2\r\nLuku: 3\r\nLuku: 4\r\nLuku: 5\r\nLuku: 6\r\nLuku: 7\r\nLuku: 8\r\nLuku: 9`,`\r`,char(13)),`\n`,char(10)),`2023-10-23 14:40:51`,``,NULL,24);
INSERT INTO main_app_answer VALUES(25,replace(replace(`def jaa_tekijoihin(luku,tekija):\r\n    print(str(luku), end=` = `)\r\n    while tekija <= luku:\r\n        while luku % tekija == 0:\r\n            luku //= tekija\r\n            if luku > 1:\r\n                # tulostetaan ` * `, ellei kyseessä ole viimeinen tekijä\r\n                print(tekija, end=` * `)\r\n            else:\r\n                # viimeisen tekijän jälkeen tulee normaalisti rivinvaihto\r\n                print(tekija)\r\n        tekija += 1\r\n\r\ntekija = 2\r\n#esimerkki funktion  käytöstä\r\njaa_tekijoihin(12,tekija)\r\njaa_tekijoihin(15, tekija)\r\njaa_tekijoihin(44,tekija)\r\njaa_tekijoihin(57,tekija)\r\njaa_tekijoihin(17,tekija)`,`\r`,char(13)),`\n`,char(10)),replace(replace(`12 = 2 * 2 * 3\r\n44 = 2 * 2 * 11\r\n57 = 3 * 19\r\n17 = 17`,`\r`,char(13)),`\n`,char(10)),`2023-10-23 18:38:26`,``,NULL,25);
INSERT INTO main_app_answer VALUES(26,replace(replace(`def paasykoe_tarkistus(testScore, hasRecommendation):\r\n\r\n # Tarkistetaan ehtolauseilla pääsykokeen tuloksen ja suosituskirjeen perusteella hyväksytäänkö opiskelija vai ei.\r\n\r\n    if 100>= testScore >= 85 and hasRecommendation:\r\n        print(`Hyväksytty erinomaisin pistein!`)\r\n    elif (70 <= testScore <= 85 and hasRecommendation) or (80 <= testScore <= 100 and not hasRecommendation):\r\n        print(`Hyväksytty!`)\r\n    elif 0 <= testScore <= 69:\r\n        print(`Hylätty!`)\r\n    else:\r\n        print(`Virheellinen tulos!`)\r\n    \r\n# Tarkistetaan funktion toimintaa eri syötteillä:\r\npaasykoe_tarkistus(90, True)\r\n# Tulostaa: Hyväksytty erinomaisin pistein!\r\n\r\npaasykoe_tarkistus(80, True)\r\n# Tulostaa: Hyväksytty!\r\n\r\npaasykoe_tarkistus(82, False)\r\n# Tulostaa: Hyväksytty!\r\n\r\npaasykoe_tarkistus(50, False)\r\n# Tulostaa: Hylätty!\r\n\r\npaasykoe_tarkistus(105, True)\r\n# Tulostaa: Virheellinen tulos!\r\n\r\npaasykoe_tarkistus(-10, False)\r\n# Tulostaa: Virheellinen tulos!\r\n\r\npaasykoe_tarkistus(0, True)\r\n# Tulostaa: Hylätty!\r\n\r\npaasykoe_tarkistus(0, False)\r\n# Tulostaa: Hylätty!\r\n\r\npaasykoe_tarkistus(69, True)\r\n# Tulostaa: Hylätty!\r\n\r\npaasykoe_tarkistus(69, False)\r\n# Tulostaa: Hylätty!\r\n\r\npaasykoe_tarkistus(85, True)\r\n# Tulostaa: Hyväksytty erinomaisin pistein!\r\n\r\npaasykoe_tarkistus(85, False)\r\n# Tulostaa: Hyväksytty!\r\n\r\npaasykoe_tarkistus(100, True)\r\n# Tulostaa: Hyväksytty erinomaisin pistein!\r\n\r\npaasykoe_tarkistus(100, False)\r\n# Tulostaa: Hyväksytty!`,`\r`,char(13)),`\n`,char(10)),replace(replace(`Hyväksytty erinomaisin pistein!\r\nHyväksytty!\r\nHyväksytty!\r\nHylätty!\r\nVirheellinen tulos!\r\nVirheellinen tulos!\r\nHylätty!\r\nHylätty!\r\nHylätty!\r\nHylätty!\r\nHyväksytty erinomaisin pistein!\r\nHyväksytty!\r\nHyväksytty erinomaisin pistein!\r\nHyväksytty!`,`\r`,char(13)),`\n`,char(10)),`2023-10-23 22:08:08`,``,NULL,26);
INSERT INTO main_app_answer VALUES(27,replace(replace(`def tehtavanTarkistus(onLupa, onKokemus):\r\n    # Jos henkilöllä ei ole lupaa\r\n    if not onLupa:\r\n        print(`Ei oikeutta suorittaa tehtävää!`)\r\n    # Jos henkilöllä on lupa, mutta ei kokemusta\r\n    elif onLupa and not onKokemus:\r\n        print(`Voit suorittaa tehtävän, mutta ole varovainen!`)\r\n    # Jos henkilöllä on sekä lupa että kokemus\r\n    else:\r\n        print(`Voit suorittaa tehtävän!`)\r\n\r\n# Testaus\r\ntehtavanTarkistus(True, True)  # Tulostaa: Voit suorittaa tehtävän!\r\ntehtavanTarkistus(True, False)  # Tulostaa: Voit suorittaa tehtävän, mutta ole varovainen!\r\ntehtavanTarkistus(False, True)  # Tulostaa: Ei oikeutta suorittaa tehtävää!\r\ntehtavanTarkistus(False, False)  # Tulostaa: Ei oikeutta suorittaa tehtävää!`,`\r`,char(13)),`\n`,char(10)),replace(replace(`Voit suorittaa tehtävän!\r\nVoit suorittaa tehtävän, mutta ole varovainen!\r\nEi oikeutta suorittaa tehtävää!\r\nEi oikeutta suorittaa tehtävää!`,`\r`,char(13)),`\n`,char(10)),`2023-10-24 15:53:21`,``,NULL,27);
CREATE TABLE IF NOT EXISTS `main_app_useranswer` (`id` integer NOT NULL PRIMARY KEY AUTO_INCREMENT, `answer` text NOT NULL, `task_id` bigint NOT NULL REFERENCES `main_app_task` (`id`) , `user_id` bigint NOT NULL REFERENCES `main_app_user` (`id`) );
INSERT INTO main_app_useranswer VALUES(1,replace(`# Tee koodisi tähän\n# Tähän toinen kommwntti\n\nprint(`Hello world!`)`,`\n`,char(10)),1,1);
INSERT INTO main_app_useranswer VALUES(2,replace(`# tee koodisi tähän\n\n\n \n# Pyydä käyttäjältä etunimi\netunimi = input(`Mikä on etunimesi> `)\n\n# pyydä käyttäjältä sukunimi \nsukunimi = input(`Mikä on sukunimesi?> `)\n\n\n# Tulosta tervehdys\nprint(f`Hei, {etunimi} {sukunimi}!`)`,`\n`,char(10)),2,1);
INSERT INTO main_app_useranswer VALUES(3,replace(`# Tähän voit kirjoittaa koodisi.\nnum1 = 5\nnum2 = 10\nsumma = num1 + num2\nprint(`Summa on:`, summa)`,`\n`,char(10)),4,1);
INSERT INTO main_app_useranswer VALUES(4,replace(`# Kirjoita koodisi tähän\ndef tulostaViesti():\n	print(`Hei aliohjelma!`)\n    \n    \n    \ntulostaViesti()`,`\n`,char(10)),11,1);
INSERT INTO main_app_useranswer VALUES(5,replace(`# Tee koodisi tähän\n# Koodi testataan automaattisesti  nimellä `Matti`\n\ndef tulostaTervehdys(nimi):\n  \n print(`Tervehdys, `+nimi+`!`)\n\nnimi = input(`Anna nimesi: `)\ntulostaTervehdys(nimi)`,`\n`,char(10)),12,1);
INSERT INTO main_app_useranswer VALUES(6,replace(`def laskeYhteen(luku1, luku2):\n  \n  return luku1 + luku2\n\n\n\ndef tulosta(luku1, luku2, tulos):\n  \n  print(`Lukujen ```+str(luku1)+``` ja ```+str(luku2)+``` summa on ```+str(tulos)+````)\n  \nluku1 = 7\nluku2 = 4\n\ntulos = laskeYhteen(luku1, luku2)\ntulosta(luku1, luku2, tulos)`,`\n`,char(10)),13,1);
INSERT INTO main_app_useranswer VALUES(7,replace(`# Tähän voit kirjoittaa koodisi.\nlause = `Python on hienoa!`\nprint(lause)`,`\n`,char(10)),6,1);
INSERT INTO main_app_useranswer VALUES(8,replace(`# Tähän voit kirjoittaa koodisi.\nfloat1 = 3.14\nfloat2 = 9.81\n\nsumma = float1 + float2\nsumma = round(summa, 5)\nprint(`Summa on:`,summa)`,`\n`,char(10)),5,1);
INSERT INTO main_app_useranswer VALUES(9,replace(`# for silmukka \n# Kirjoita koodi tähän\nalku = 0\nloppu = 11\nfor i in  range(alku, loppu):\n  print(i)`,`\n`,char(10)),18,1);
INSERT INTO main_app_useranswer VALUES(10,replace(`# koodi tähän\n\n# Pyydetään käyttäjältä nimi\nnimi = input(`Anna nimi: `)\n\n# Tarkistetaan onko nimi oikein\nif nimi == `Erkki`:\n    # Jos nimi on oikein, pyydetään salasanaa\n    salasana = input(`Anna salasana: `)\n    \n    # Tarkistetaan onko salasana oikein\n    if salasana == `Esimerkki`:\n        print(`Salasana ja nimi oli oikein!`)\n    else:\n        print(`Salasana oli väärin.`)\nelse:\n    print(`Nimi oli väärin.`)`,`\n`,char(10)),19,1);
INSERT INTO main_app_useranswer VALUES(11,replace(`# Tähän voit kirjoittaa koodisi.\n\nruno =```Roses are red,\nViolets are blue,\nPython is great,\nAnd so are you!```\n\nprint(runo)`,`\n`,char(10)),7,1);
INSERT INTO main_app_useranswer VALUES(12,replace(`#Tähän voit kirjoittaa koodisi.\n\nif __name__ == ``__main__``:\n	polku = `The file is located at ``C:\\\\Desktop\\\\file.txt``.`\n	print(polku)`,`\n`,char(10)),8,1);
INSERT INTO main_app_useranswer VALUES(13,replace(`# Tähän voit kirjoittaa koodisi\n\ntervehdys= ``He said, `Hello, world!```\n\nprint(tervehdys)`,`\n`,char(10)),9,1);
INSERT INTO main_app_useranswer VALUES(14,replace(`# tee koodisi tähän\nlause = `Python on mukavaa`\npituus = len(lause)\nmerkki = lause[2]\nviimeinen = lause[-1]\nuusi_lause = lause[7:]\n\nprint(`Lause:`,lause)\nprint(`Pituus:`,pituus)\nprint(`Kolmas kirjain:`,merkki)\nprint(`Viimeinen merkki:`, viimeinen)\nprint(`Uusi lause:`,uusi_lause)`,`\n`,char(10)),10,1);
INSERT INTO main_app_useranswer VALUES(15,replace(`def laskeYhteen(luku1, luku2):\n    return luku1 + luku2\n\ndef laskeErotus(luku1, luku2):\n    return luku1 - luku2\n\ndef laskeTulo(luku1, luku2):\n    return luku1 * luku2\n\ndef laskeOsamaara(luku1, luku2):\n    return luku1 / luku2\n\ndef tulosta(luku1, luku2):\n    summa = round(laskeYhteen(luku1, luku2), 2)\n    erotus = round(laskeErotus(luku1, luku2), 2)\n    tulo = round(laskeTulo(luku1, luku2), 2)\n    osamaara = round(laskeOsamaara(luku1, luku2), 2)\n    \n    print(f`Annoit luvut ``{luku1}`` ja ``{luku2}``.`)\n    print(f`Niiden summa on ``{summa:.2f}``,`)\n    print(f`erotus on ``{erotus:.2f}``,`)\n    print(f`tulo on ``{tulo:.2f}```)\n    print(f`ja osamäärä on ``{osamaara:.2f}``.`)\n\ndef kysyLuvut():\n    luku1 = float(input(`Anna ensimmäinen luku: `))\n    luku2 = float(input(`Anna toinen luku: `))\n    return luku1, luku2\n\n# Kysytään luvut käyttäjältä\nluku1, luku2 = kysyLuvut()\n# Kutsutaan tulosta-funktiota ja tulostetaan tulos\ntulosta(luku1, luku2)`,`\n`,char(10)),14,1);
INSERT INTO main_app_useranswer VALUES(16,replace(`# Tee tähän aliohjelma ``tarkistaIkaRaja``\n\ndef tarkistaIkaRaja(ika):\n  if ika <15:\n    print(`Et voi mennä kesätöihin, äänestää tai juoda väkevää alkoholia.`)\n  elif  15<= ika <18:\n    print(`Voit mennä kesätöihin, mutta et voi äänestää tai juoda väkevää alkoholia.`)\n  \n  elif 18<= ika <21:\n       print(`Voit mennä kesätöihin ja äänestää, mutta et voi juoda väkevää alkoholia.`)\n    \n  elif ika >= 21:\n    print(`Voit mennä kesätöihin, äänestää ja juoda väkevää alkoholia.`)\n  \n# valmiit koodit \n\ndef kysyIka():\n    try:\n        ika = int(input(`Anna ikäsi: `))\n        tarkistaIkaRaja(ika)\n    except ValueError:\n        print(`Annettu arvo ei ollut luku. Yritä uudelleen.`)\n\nkysyIka()`,`\n`,char(10)),20,1);
INSERT INTO main_app_useranswer VALUES(17,replace(`# kirjoita aliohjelma tähän \ndef kerro_kahdella(luku):\n  tulos = luku * 2\n  return tulos\n\n \n\n\n#testikoodi\nprint(kerro_kahdella(5))  # Tulostaa: 10\nprint(kerro_kahdella(0))  # Tulostaa: 0\nprint(kerro_kahdella(-3)) # Tulostaa: -6`,`\n`,char(10)),21,1);
INSERT INTO main_app_useranswer VALUES(18,replace(`# tee koodisi tähän\n\nfor i in range(0,10):\n  print(`Luvun`, i,`neliö on`, i*i)`,`\n`,char(10)),22,1);
INSERT INTO main_app_useranswer VALUES(19,replace(`# Tee koodi tähän\n\nfor i in range(0,10,2):\n	print(`Luku:`, i)`,`\n`,char(10)),23,1);
INSERT INTO main_app_useranswer VALUES(20,replace(`# tee koodisi tähän\nmax =10\ni = 0\nwhile i<max:\n	print(`Luku:`, i)\n	i+=1`,`\n`,char(10)),24,1);
INSERT INTO main_app_useranswer VALUES(21,replace(`# Alustetaan lista\nlista = [1, 2, 4, 5, 7,9]\nprint(`Alkuperäinen lista:`, lista)\nprint(`Alkuperäisen listan pituus:`, len(lista))\n\n# Lisätään listaan merkkijonot `Maija` ja `Matti`\nlista.append(`Maija`)\nlista.append(`Matti`)\nprint(`Lisätty merkkijonot ``Maija`` ja ``Matti`` listaan:`, lista)\nprint(`Listan pituus merkkijonojen lisäyksen jälkeen:`, len(lista))\n\n# Luodaan uusi lista ja lisätään se alkuperäiseen listaan\nuusi_lista = [10, 20, 30]\nprint(`Uuden listan pituus:`, len(uusi_lista))\nlista.append(uusi_lista)\nprint(`Lisätty uusi lista alkuperäiseen listaan:`, lista)\nprint(`Listan pituus uuden listan lisäyksen jälkeen:`,len(lista))`,`\n`,char(10)),16,1);
INSERT INTO main_app_useranswer VALUES(22,replace(`#kirjoita fubktio tähän \ndef paasykoe_tarkistus(testScore, hasRecommendation):\n # Tarkistetaan ehtolauseilla pääsykokeen tuloksen ja suosituskirjeen perusteella hyväksytäänkö opiskelija vai ei.\n    if 100>= testScore >= 85 and hasRecommendation:\n        print(`Hyväksytty erinomaisin pistein!`)\n    elif (70 < testScore <= 85 and hasRecommendation) or (80 <= testScore <= 100 and not hasRecommendation):\n        print(`Hyväksytty!`)\n    elif 0 <= testScore <= 69:\n        print(`Hylätty!`)\n    else:\n        print(`Virheellinen tulos!`)\n    \n  \n    \n\n\n\n\n\n# Tarkistetaan funktion toimintaa eri syötteillä:\n\npaasykoe_tarkistus(90, True)\n# Tulostaa: Hyväksytty erinomaisin pistein!\n\npaasykoe_tarkistus(80, True)\n# Tulostaa: Hyväksytty!\n\npaasykoe_tarkistus(82, False)\n# Tulostaa: Hyväksytty!\n\npaasykoe_tarkistus(50, False)\n# Tulostaa: Hylätty!\n\npaasykoe_tarkistus(105, True)\n# Tulostaa: Virheellinen tulos!\n\npaasykoe_tarkistus(-10, False)\n# Tulostaa: Virheellinen tulos!`,`\n`,char(10)),26,1);
INSERT INTO main_app_useranswer VALUES(23,replace(`# kirjoita aliohjelmasi tähän \ndef jaa_tekijoihin(luku,tekija):\n    print(str(luku), end=` = `)\n    while tekija <= luku:\n        while luku % tekija == 0:\n            luku //= tekija\n            if luku > 1:\n                # tulostetaan ` * `, ellei kyseessä ole viimeinen tekijä\n                print(tekija, end=` * `)\n            else:\n                # viimeisen tekijän jälkeen tulee normaalisti rivinvaihto\n                print(tekija)\n        tekija += 1\n\n\n\n\n\n\n# Valmiiksi annettava koodi \ntekija = 2\n\n#esimerkki funktion käytöstä/testit\njaa_tekijoihin(12,tekija)\njaa_tekijoihin(15, tekija)\njaa_tekijoihin(44,tekija)\njaa_tekijoihin(57,tekija)\njaa_tekijoihin(17,tekija)`,`\n`,char(10)),25,1);
INSERT INTO main_app_useranswer VALUES(24,replace(`# tee  aliohjelman koodi tähän\ndef tehtavanTarkistus(onLupa, onKokemus):\n    # Jos henkilöllä ei ole lupaa\n    if not onLupa:\n        print(`Ei oikeutta suorittaa tehtävää!`)\n    # Jos henkilöllä on lupa, mutta ei kokemusta\n    elif onLupa and  not onKokemus:\n        print(`Voit suorittaa tehtävän, mutta ole varovainen!`)\n    # Jos henkilöllä on sekä lupa että kokemus\n    else:\n        print(`Voit suorittaa tehtävän!`)\n\n\n\n\n\n# Testaus\ntehtavanTarkistus(True, True)  # Tulostaa: Voit suorittaa tehtävän!\ntehtavanTarkistus(True, False)  # Tulostaa: Voit suorittaa tehtävän, mutta ole varovainen!\ntehtavanTarkistus(False, True)  # Tulostaa: Ei oikeutta suorittaa tehtävää!\ntehtavanTarkistus(False, False)  # Tulostaa: Ei oikeutta suorittaa tehtävää!`,`\n`,char(10)),27,1);
INSERT INTO main_app_useranswer VALUES(25,replace(`# Tee koodisi tähän\n\nlista =[5, 2, 9, 1, 7] \nprint(`Alkuperäinen lista:`, lista)\nprint(`Lisätään alkio listan loppuun append-funktiolla numero 4`)\nlista.append(``4``)`,`\n`,char(10)),15,1);
INSERT INTO main_app_useranswer VALUES(26,replace(`print(`Hello World!`)\n #hyvintoimii`,`\n`,char(10)),1,5);
INSERT INTO main_app_useranswer VALUES(27,`etunimi = input(`Mikä on etunimesi: `)`,2,5);
INSERT INTO main_app_useranswer VALUES(28,replace(`# Tähän voit kirjoittaa koodisi.\n\nnum1 = 5\nnum2 = 10\nsumma = num1 + num2\nprint(`Summa on: `+str(summa))`,`\n`,char(10)),4,2);
INSERT INTO main_app_useranswer VALUES(29,replace(`# Tähän voit kirjoittaa koodisi.\n\nlause = `Python on hienoa!`\n\nprint(lause)`,`\n`,char(10)),6,2);
INSERT INTO main_app_useranswer VALUES(30,replace(`# Tee koodisi tähän\ndef main():\n	print(`Hello world!`)\n\nif __name__ == `__main__`:\n  main()`,`\n`,char(10)),1,6);
INSERT INTO main_app_useranswer VALUES(31,replace(`# tee koodisi tähän\n\netunimi = input(`Mikä on etunimesi?> `)\nsukunimi = input(`Mikä on sukunimesi?> `)\nprint(`Hei, ` + etunimi + ` ` + sukunimi + `!`)`,`\n`,char(10)),2,6);
INSERT INTO main_app_useranswer VALUES(32,replace(`# Tähän voit kirjoittaa koodisi.\n#num1 = 5\n#num2 = 10\n#summa = num1 + num2\n#print(`Summa on: ` + str(summa))\nnum1 = 5\nnum2 = 10\nsumma = num1 + num2\nprint(`Summa on:`, summa)`,`\n`,char(10)),4,6);
INSERT INTO main_app_useranswer VALUES(33,replace(`# Tähän voit kirjoittaa koodisi.\nfloat1 = 3.14\nfloat2 = 9.81\nsumma = float1 + float2\nprint(`Summa on: ` + `{:.2f}`.format(summa))`,`\n`,char(10)),5,6);
INSERT INTO main_app_useranswer VALUES(34,replace(`# Tähän voit kirjoittaa koodisi.\nlause = `Python on hienoa!`\nprint(lause)\n#sana1 = `Python`\n#sana2 = `on`\n#sana3 = `hienoa!`\n#lause = sana1 + ` ` + sana2 + ` ` + sana3\n#print(lause)`,`\n`,char(10)),6,6);
INSERT INTO main_app_useranswer VALUES(35,replace(`# tee koodisi tähän\nlause = `Python on mukavaa`\npituus = len(lause)\nmerkki = lause[2]\nviimeinen = lause[-1]\nuusi_lause = lause[7:]\nprint(`Lause: ` + lause)\nprint(`Pituus: ` + str(pituus))\nprint(`Kolmas kirjain: ` + merkki)\nprint(`Viimeinen merkki: ` + viimeinen)\nprint(`Uusi lause: ` + uusi_lause)`,`\n`,char(10)),10,6);
INSERT INTO main_app_useranswer VALUES(36,replace(`# Tähän voit kirjoittaa koodisi.\nruno = ```Roses are red,\nViolets are blue,\nPython is great,\nAnd so are you!```\nprint(runo)`,`\n`,char(10)),7,6);
INSERT INTO main_app_useranswer VALUES(37,replace(`# Tähän voit kirjoittaa koodisi\ntervehdys = `He said, \`Hello, world!\``\nprint(tervehdys)`,`\n`,char(10)),9,6);
INSERT INTO main_app_useranswer VALUES(38,replace(`# Tee koodi tähän\nfor x in range(0,10,2):\n    print(`Luku: ` + str(x))`,`\n`,char(10)),23,6);
INSERT INTO main_app_useranswer VALUES(39,replace(`# for silmukka \n# Kirjoita koodi tähän\nfor x in range(11):\n    print(x)`,`\n`,char(10)),18,6);
INSERT INTO main_app_useranswer VALUES(40,replace(`# tee koodisi tähän\nfor x in range(10):\n    square = x * x\n    print(`Luvun ` + str(x) + ` ` + `neliö on ` + str(square))`,`\n`,char(10)),22,6);
INSERT INTO main_app_useranswer VALUES(41,replace(`# kirjoita aliohjelmasi tähän \ndef jaa_tekijoihin(luku, tekija):\n  print(f`{luku} = `, end=``)\n  while luku > 1:\n      for i in range(tekija, luku + 1):\n          if luku % i == 0:\n              luku //= i\n              if luku == 1:\n                  print(f`{i}`)\n              else:\n                  print(f`{i} * `, end=``)\n                  break\n\n\n\n\n\n# Valmiiksi annettava koodi \ntekija = 2\n\n#esimerkki funktion käytöstä/testit\njaa_tekijoihin(12,tekija)\njaa_tekijoihin(15, tekija)\njaa_tekijoihin(44,tekija)\njaa_tekijoihin(57,tekija)\njaa_tekijoihin(17,tekija)`,`\n`,char(10)),25,6);
INSERT INTO main_app_useranswer VALUES(42,replace(`# tee koodisi tähän\nluku = 0\nwhile luku < 10:\n    print(`Luku:`, luku)\n    luku += 1`,`\n`,char(10)),24,6);
CREATE TABLE IF NOT EXISTS `main_app_taskcategory` (`id` integer NOT NULL PRIMARY KEY AUTO_INCREMENT, `name` varchar(200) NOT NULL);
INSERT INTO main_app_taskcategory VALUES(1,`Tulostus/syöteen kysyminen`);
INSERT INTO main_app_taskcategory VALUES(2,`Luvut`);
INSERT INTO main_app_taskcategory VALUES(3,`Merkkijonot`);
INSERT INTO main_app_taskcategory VALUES(4,`Toistolauseet`);
INSERT INTO main_app_taskcategory VALUES(5,`Ehtolauseet`);
INSERT INTO main_app_taskcategory VALUES(6,`Funktiot`);
INSERT INTO main_app_taskcategory VALUES(7,`Tietorakenteet`);
INSERT INTO main_app_taskcategory VALUES(8,`Tiedostot`);
INSERT INTO main_app_taskcategory VALUES(9,`Luokat`);
INSERT INTO main_app_taskcategory VALUES(10,`Poikkeukset`);
INSERT INTO main_app_taskcategory VALUES(11,`Tulostus`);
CREATE TABLE IF NOT EXISTS `main_app_user` (`id` integer NOT NULL PRIMARY KEY AUTO_INCREMENT, `password` varchar(128) NOT NULL, `last_login` datetime NULL, `is_superuser` bool NOT NULL, `username` varchar(150) NOT NULL UNIQUE, `is_staff` bool NOT NULL, `is_active` bool NOT NULL, `date_joined` datetime NOT NULL, `first_name` varchar(30) NOT NULL, `last_name` varchar(30) NOT NULL, `email` varchar(254) NOT NULL UNIQUE, `change_password` bool NOT NULL, `premium_start` datetime NULL, `premium_end` datetime NULL, `role` varchar(20) NOT NULL, `editor_theme` varchar(100) NOT NULL);
INSERT INTO main_app_user VALUES(1,`pbkdf2_sha256$600000$b5ti6YDMtWh2yZAa9SwcM7$MQ2RYjxEJBDfO/dIwSVCQrnsN06fUoYPebclrBWpvWs=`,`2023-11-27 17:42:31.819786`,1,`pete`,1,1,`2023-09-27 17:49:57`,`Petri`,`Lamminaho`,`lammpe77@gmail.com`,0,NULL,NULL,`admin`,`dracula`);
INSERT INTO main_app_user VALUES(2,`pbkdf2_sha256$600000$C4yMpTYrls4RYvsH48OOsJ$XrnqROmWABWR87WKIXrHFJxzIA7luDYfdPm/htDdhJk=`,`2023-11-13 14:02:36.866514`,0,`pelammin`,0,1,`2023-09-27 18:40:10.580028`,`Petri`,`Lamminaho`,`petri.lamminaho@gmail.com`,0,NULL,NULL,`student`,`abbott`);
INSERT INTO main_app_user VALUES(3,`pbkdf2_sha256$600000$k2BgGtkVdrIwAETD4LRiRp$XulG9h5e3oEdtu8+1KEx8dWDTNvwiHxMdvumRdMW7dk=`,`2023-10-29 06:14:58.828571`,0,`hannuK`,0,1,`2023-09-29 18:58:21.647218`,`Hannu`,`K`,`hannu.kolunsarka@gmail.com`,0,NULL,NULL,`student`,`3024-night`);
INSERT INTO main_app_user VALUES(4,`pbkdf2_sha256$600000$UwDESPkxFnhQ7wzR8tcykI$TnFsnKpWynuEA/MxgiKTPEQm8fwL8iHN4MZld40tQJk=`,`2023-10-05 15:57:18.144380`,0,`pehella`,0,1,`2023-10-05 15:53:42.369853`,`Petri`,`Hella`,`petri.hella@gmail.fi`,0,NULL,NULL,`student`,`default`);
INSERT INTO main_app_user VALUES(5,`pbkdf2_sha256$600000$Y3sOYag2HW36C0wJHFkn7n$ZDyC9UFphsK0N0uhDCoZne+SlZuCuU4H9pGyzz2BrSc=`,`2023-10-31 08:31:34.579247`,0,`focus`,0,1,`2023-10-09 19:15:35`,`Keijo`,`Salmi`,`keijo.salmi@gmail.com`,0,NULL,NULL,`student`,`default`);
INSERT INTO main_app_user VALUES(6,`pbkdf2_sha256$600000$ceWMmJ0pOGghC82fmBrjRq$jv9fX3WMypR0ccMzCX8s/QCd+F3D/2LkdWjVv/o4MPY=`,`2023-11-20 09:22:59.088711`,0,`ahori`,0,1,`2023-11-08 17:19:56.043945`,`Riku`,`Ahonen`,`ahori@gmail.com`,0,NULL,NULL,`student`,`default`);
INSERT INTO main_app_user VALUES(7,`pbkdf2_sha256$600000$YUIeXKSgtt2oiLHZiIPxQ0$+1tdah79SfFLxXxZOAToJlYbo7/26PbtYDHkCosNae8=`,`2023-11-14 18:13:06.177780`,0,`eliasA`,0,1,`2023-11-09 11:25:43`,`Elias`,`Aaltonen`,`elias.aaltonen@gmail.com`,0,NULL,NULL,`student`,`default`);
CREATE TABLE IF NOT EXISTS `main_app_task` (`id` integer NOT NULL PRIMARY KEY AUTO_INCREMENT, `taskTitle` varchar(200) NOT NULL, `taskPublishDate` datetime NOT NULL, `taskDescription` text NOT NULL, `taskStarterCode` text NULL, `taskInputs` text NULL, `language` varchar(20) NOT NULL, `difficulty` varchar(20) NOT NULL, `is_free` bool NOT NULL, `course_id` bigint NULL REFERENCES `main_app_course` (`id`) , `tutorial_id` bigint NULL REFERENCES `main_app_tutorial` (`id`) , `category_id` bigint NULL REFERENCES `main_app_taskcategory` (`id`) );
INSERT INTO main_app_task VALUES(1,`Hello world ohjelma Pythonilla`,`2023-10-01 06:40:40`,`Tee Hello world-ohjelma Pythonilla`,`# Tee koodisi tähän`,`[]`,`Python`,`aloittelija`,1,1,3,1);
INSERT INTO main_app_task VALUES(2,`Syötteen kysyminen käyttäjältä`,`2023-10-01 15:14:45`,`<p>Kirjoita Python-ohjelma, joka kysyy k&auml;ytt&auml;j&auml;lt&auml; etu ja sukunimen. Ohjelman tulee tulostaa tervehdys, joka sis&auml;lt&auml;&auml; etunimen ja sukunimen ja muodostaa n&auml;ist&auml; koko nimen. Lopeta output huutomerkkiin.</p>`,`# tee koodisi tähän`,`[`Matti`, `Meikäläinen`]`,`Python`,`aloittelija`,1,1,3,1);
INSERT INTO main_app_task VALUES(3,`Luokat periminen`,`2023-10-01 15:18:45`,`-`,`-`,`[]`,`Python`,`harjoittelija`,1,2,NULL,NULL);
INSERT INTO main_app_task VALUES(4,`Kokonaislukujen yhteenlasku`,`2023-10-04 19:51:45`,replace(replace(`Tässä tehtävässä tutustumme Pythonin perusteisiin: numerot ja muuttujat. \r\n\r\nTehtäväsi on kirjoittaa Python-koodi, joka: Asettaa muuttujan num1 arvoksi 5 Asettaa muuttujan num2 arvoksi 10 Laskee yhteen num1 ja num2 ja tallentaa tuloksen muuttujaan summa Tulostaa laskutoimituksen tuloksen muodossa `Summa on: summa``,`\r`,char(13)),`\n`,char(10)),`# T&auml;h&auml;n voit kirjoittaa koodisi.`,`[]`,`Python`,`aloittelija`,1,1,NULL,2);
INSERT INTO main_app_task VALUES(5,`Liukuluku muutujien yhteenlasku`,`2023-10-04 19:57:50`,replace(replace(`<p>T&auml;ss&auml; teht&auml;v&auml;ss&auml; tutustumme Pythonin perusteisiin liukulukujen eli float-muuttujien osalta. Teht&auml;v&auml;si on kirjoittaa Python-koodi, joka:</p>\r\n<p>-Asettaa muuttujan float1 arvoksi 3.14</p>\r\n<p>-Asettaa muuttujan float2 arvoksi 9.81</p>\r\n<p>-Laskee yhteen float1 ja float2 ja tallentaa tuloksen muuttujaan summa</p>\r\n<p>-Tulostaa laskutoimituksen tuloksen muodossa `Summa on: summa`. Esit&auml; tulos liukulukumuodossa ja kahden desimaalin tarkkudella.</p>`,`\r`,char(13)),`\n`,char(10)),`# T&auml;h&auml;n voit kirjoittaa koodisi.`,`[]`,`Python`,`aloittelija`,1,1,NULL,2);
INSERT INTO main_app_task VALUES(6,`Merkkijonon luominen Pythonissa`,`2023-10-05 19:25:25`,`Tehtäväsi on luoda merkkijono, joka sisältää lauseen `Python on hienoa!`, ja tallentaa se muuttujaan nimeltä lause. Tulosta sitten muuttujan sisältö.`,`# Tähän voit kirjoittaa koodisi.`,`[]`,`Python`,`aloittelija`,1,1,NULL,3);
INSERT INTO main_app_task VALUES(7,`Monirivisten merkkijonojen luominen`,`2023-10-05 19:28:23`,replace(replace(`Tee Python-ohjelma, joka luo monirivisen merkkijonon käyttäen kolmea lainausmerkkiä. Tallenna merkkijono muuttujaan runo, jossa on seuraava sisältö:\r\n\r\nRoses are red,\r\nViolets are blue,\r\nPython is great,\r\nAnd so are you!`,`\r`,char(13)),`\n`,char(10)),`# Tähän voit kirjoittaa koodisi.`,`[]`,`Python`,`aloittelija`,1,1,NULL,3);
INSERT INTO main_app_task VALUES(8,`Merkkijonot ja erikoismerkit Pythonissa`,`2023-10-05 19:30:38`,`Tee Python-ohjelma, joka luo merkkijonon, joka sisältää erikoismerkkejä, kuten backslasheja (\) ja lainausmerkkejä (`). Merkkijonon tulisi olla seuraava: The file is located at ``C:\\Desktop\\file.txt.`` Tallenna merkkijono muuttujaan polku ja tulosta sen sisältö.`,`#Tähän voit kirjoittaa koodisi.`,`[]`,`Python`,`aloittelija`,1,1,NULL,3);
INSERT INTO main_app_task VALUES(9,`Yksittäiset ja kaksoislainausmerkit merkkijonossa`,`2023-10-05 19:34:49`,`Tee Python-ohjelma, joka luo merkkijonon,. Merkkijonon tulisi olla seuraava: He said, `Hello, world!```. Tallenna merkkijono muuttujaan tervehdys ja tulosta sen sisältö.`,`# Tähän voit kirjoittaa koodisi`,`[]`,`Python`,`aloittelija`,1,1,NULL,3);
INSERT INTO main_app_task VALUES(10,`Merkkijonon merkkeihin viittaaminen`,`2023-10-05 19:37:34`,replace(replace(`<p> Tee Python-ohjelma, joka:</p>\r\n<p>-Luo merkkijonon `Python on mukavaa`, ja tallentaa sen muuttujaan lause.\r\n<p>-Selvittää lauseen pituuden. ja tallentaa sen muuttujaan `pituus` </p>\r\n<p>-Tallentaa  sanan kolmannen kirjaimen muuttujaan ``merkki``.</p>\r\n<p> - Tallentaa merkkijonon viimeisen merkin muuttujaan ``viimeinen`` </p>\r\n<p> - Luo vanhasta merkkijonosta  uuden `on mukavaa` käyttäen indexsointia\r\n<p> Lopuksi ohjelma tulostaa kaikki tiedot ruudulle </p>`,`\r`,char(13)),`\n`,char(10)),`# tee koodisi tähän`,`[]`,`Python`,`aloittelija`,1,1,NULL,3);
INSERT INTO main_app_task VALUES(11,`Tulostus aliohjelma`,`2023-10-09 14:46:47`,replace(replace(`<p>Toteuta Pythonilla  aliohjelma nimeltä tulostaViesti(), joka tulostaa viestin `Hei aliohjelma!`. </p> <p>Aliohjelma ei ota vastaan parametreja. Aliohjelmalla ei myöskään  ole paluuarvoja.</p>  \r\n<p>Kun aliohjelma on luotu, kutsu sitä.</p>`,`\r`,char(13)),`\n`,char(10)),`# Kirjoita koodisi tähän`,`[]`,`Python`,`aloittelija`,1,1,NULL,6);
INSERT INTO main_app_task VALUES(12,`Parametrien välitys Python aliohjelmissa`,`2023-10-09 14:49:18`,replace(replace(`<p>Tässä tehtävässä sinun tulee luoda aliohjelma nimeltä tulostaTervehdys(), joka tulostaa tervehdyksen käyttäjän antamalle nimelle. Tervehdyksen tulee olla muotoa `Tervehdys, ``Nimi```.</p>\r\n\r\n<p>Ensin kysy käyttäjältä hänen nimensä käyttämällä input()-funktiota. Tämän jälkeen, välitä käyttäjän antama nimi parametrina tulostaTervehdys  aliohjelmalle.</p>`,`\r`,char(13)),`\n`,char(10)),replace(replace(`# Tee koodisi tähän\r\n# Koodi testataan automaattisesti  nimellä `Matti``,`\r`,char(13)),`\n`,char(10)),`[`Matti`]`,`Python`,`aloittelija`,1,1,NULL,6);
INSERT INTO main_app_task VALUES(13,`Yhteenlasku aliohjelma`,`2023-10-09 14:53:04`,replace(replace(`<p>\r\nKirjoita funktio nimeltä `laskeYhteen`, joka ottaa kaksi parametria: luvut 7 ja 4. Funktion tulee laskea annetut luvut yhteen ja palauttaa tuloksen.\r\n</p>\r\n\r\n<p> \r\nToteuta  myös tulosta-aliohjelma joka ottaa tarvitsemansa muuttujat parametreina ja tulostaa vastauksen muodossa: `Lukujen ``luvun1`` ja ``luvun2`` summa on ``tulos```.\r\n</p>`,`\r`,char(13)),`\n`,char(10)),replace(replace(`# kirjoita koodisi tähän\r\n\r\n\r\n\r\n\r\n# Luvut, jotka halutaan laskea yhteen\r\nluku1 = 7\r\nluku2 = 4\r\n#tähän aliohjelmien kutsut`,`\r`,char(13)),`\n`,char(10)),`[]`,`Python`,`harjoittelija`,1,1,NULL,6);
INSERT INTO main_app_task VALUES(14,`Liukulukujen laskeminen aliohjelmilla`,`2023-10-09 14:56:05`,replace(replace(`<p>Sinun tulee kirjoittaa ohjelma, joka kysyy käyttäjältä kaksi liukulukua. Ohjelman tulee sitten suorittaa seuraavat laskutoimitukset: yhteenlasku, vähennyslasku, kertolasku ja jakolasku. Jokaiselle laskutoimitukselle on oltava oma aliohjelmansa ja laskutoimitukset tulee suorittaa aliohjelmien sisällä</p>.\r\n\r\n<p>Luomasi ohjelman tulee kysyä luvut käyttäjältä aliohjelman avulla, ja tämän jälkeen tulostaa tulokset omassa aliohjelmassaan. Tulostuksen tulee olla muotoa: `Annoit luvut ``luku1`` ja ``luku2``. Niiden summa on ``summa``, erotus on ``erotus``, tulo on ``tulo`` ja osamäärä on ``osamäärä``.` Muista pyöristää kaikki tulokset kahden desimaalin tarkkuuteen.</p>\r\n\r\n<p> Ohjelma testataan automaattisesti usealla liukuluvulla. </p>`,`\r`,char(13)),`\n`,char(10)),`#tee koodisi tähän`,`[`7.531`, `4.87123`]`,`Python`,`harjoittelija`,1,1,NULL,6);
INSERT INTO main_app_task VALUES(15,`Listojen perusteita Pythonissa`,`2023-10-09 14:58:52`,replace(replace(`<p>Tässä tehtävässä sinun pitää luoda Python-koodi, joka tekee seuraavat asiat:</p>\r\n\r\n<ol>\r\n  <li>Luo lista, jossa on seuraavat viisi alkiota: 5, 2, 9, 1, 7.</li>\r\n  <li>Tulosta luotu lista.</li>\r\n  <li>Lisää listaan alkio, jonka arvo on 4, käyttäen append()-funktiota. Kerro print-lauseessa, että lisäät alkion listan loppuun. Tulosta lista tämän jälkeen.</li>\r\n  <li>Lisää listaan alkio, jonka arvo on 3, toiseksi listassa käyttäen insert()-funktiota. Kerro print-lauseessa, että lisäät alkion toiseksi listassa. Tulosta lista tämän jälkeen.</li>\r\n  <li>Poista listasta toinen alkio. Kerro print-lauseessa, että poistat toisen alkion. Tulosta lista tämän jälkeen.</li>\r\n  <li>Järjestä lista. Kerro print-lauseessa, että järjestät listan. Tulosta lista tämän jälkeen.</li>\r\n  <li>Tee viittauksia listan eri alkioihin: ensimmäinen alkio, viimeinen alkio ja kolmas alkio. Tulosta kunkin viittauksen jälkeen vastaava alkio.</li>\r\n</ol>`,`\r`,char(13)),`\n`,char(10)),`# Tee koodisi tähän`,`[]`,`Python`,`aloittelija`,1,1,NULL,7);
INSERT INTO main_app_task VALUES(16,`Listan muokkaus ja pituuden tutkiminen`,`2023-10-09 15:03:04`,replace(replace(`<p>Tässä tehtävässä muokkaat Python-listaa monipuolisesti ja tutkit listan pituutta.</p>\r\n\r\n<p>Alkuperäinen lista on: [1, 2, 4, 5, 7, 9]</p>\r\n\r\n<ol>\r\n    <li>Tulosta alkuperäinen lista ja sen pituus käyttämällä len()-funktiota.</li>\r\n    <li>Lisää listaan merkkijonot `Maija` ja `Matti` append()-funktion avulla. Kerro print-lauseessa, että lisäät merkkijonot listaan. Tulosta lista ja sen pituus tämän jälkeen.</li>\r\n    <li>Luo uusi lista, jossa on alkiot 10, 20 ja 30. Tulosta uuden listan pituus. Lisää tämä lista luomaasi listaan niin, että uudesta listasta tulee luomasi listan alkio. Kerro print-lauseessa, että lisäät uuden listan alkuperäiseen listaan. Tulosta lista ja sen pituus tämän jälkeen.</li>\r\n</ol>`,`\r`,char(13)),`\n`,char(10)),replace(replace(`# Alustetaan lista\r\nlista = [1, 2, 4, 5, 7, 9]\r\n# jatka koodausta tähän`,`\r`,char(13)),`\n`,char(10)),`[]`,`Python`,`harjoittelija`,1,1,NULL,7);
INSERT INTO main_app_task VALUES(17,`Moniulotteisten listojen perusteet`,`2023-10-09 15:08:21`,`Luo Python ohjelma, joka luo 2x3 matriisin (2D-lista) arvoilla 2, 5, 10, 8, 15 ja 8.  Tämä tehtävä on tarkoitettu harjoittelemaan listojen käsittelyä ja ymmärtämään kuinka viitata useampiulotteisen listan eri alkioihin. Tulosta matriisi käyttäen print-funktiota.`,replace(replace(`# Moniulotteisten listojen perusteet\r\n#kirjoita koodisi tähän`,`\r`,char(13)),`\n`,char(10)),`[]`,`Python`,`harjoittelija`,1,1,NULL,7);
INSERT INTO main_app_task VALUES(18,`For-silmukan perusteet Pythonissa`,`2023-10-09 15:08:50`,`Kirjoita python-koodi, joka tulostaa kaikki 0-10 väliset luvut for-silmukalla. Jokaisen luvun pitäisi tulla omalle rivilleen.`,replace(replace(`# for silmukka \r\n# Kirjoita koodi tähän`,`\r`,char(13)),`\n`,char(10)),`[]`,`Python`,`aloittelija`,1,1,NULL,4);
INSERT INTO main_app_task VALUES(19,`If-lause Käyttäjätunnuksen/salasanan tarkistamuinen`,`2023-10-19 15:06:58`,replace(replace(`<p>Tee ohjelma, joka pyytää käyttäjältä nimen ja salasanan. Jos nimi on väärin, tulostaa ohjelma `Nimi oli väärin.` Jos nimi on oikein, pyydetään salasanaa. Jos salasana on oikein, tulostetaan `Salasana ja nimi oli oikein!`, muussa tapauksessa `Salasana oli väärin.` Toteuta oikeaksi nimi-salasana-pariksi Erkki ja Esimerkki</p>\r\n\r\n<p> <strong> Esimerkki. </strong> </p>\r\n<p>Luo kaksi if-else-rakennetta, joista toinen sijoitetaan ensimmäisen sisään tyyliin:</p>\r\n\r\n<pre>\r\n<strong>Esimerkki</strong> \r\nOhjelma tulostaa toimiessaan seuraavanlaisia vastauksia:\r\nAnna nimi: Petteri\r\nNimi oli väärin.\r\n\r\n<strong> tai vaihtoehtoisesti</strong>\r\nAnna nimi: Erkki\r\nAnna salasana: Kanada\r\nSalasana oli väärin.\r\n\r\n<strong>tai vaihtoehtoisesti</strong>\r\nAnna nimi: Erkki\r\nAnna salasana: Esimerkki\r\nSalasana ja nimi oli oikein!\r\n</pre>`,`\r`,char(13)),`\n`,char(10)),`# koodi tähän`,`[`Petteri`, `Erkki`, `Kanada` `Erkki`, `Esimerkki`]`,`Python`,`harjoittelija`,1,1,NULL,5);
INSERT INTO main_app_task VALUES(20,`Iän tarkistaminen If lauseella`,`2023-10-21 18:15:43`,replace(replace(`<p>\r\n    <ul>\r\n        <li>Kirjoita aliohjelma nimeltä <b>tarkistaIkaRaja</b>, joka ottaa yhden parametrin, henkilön iän.</li>\r\n        <li>Aliohjelman on tulostettava, mitä henkilö voi tehdä seuraavien ikärajojen perusteella:\r\n            <ul>\r\n                <li>Kesätyö: 15 vuotta</li>\r\n                <li>Äänestys: 18 vuotta</li>\r\n                <li>Väkevät juomat: 21 vuotta</li>\r\n            </ul>\r\n        </li>\r\n        <li>Tulostus on tehtävä käyttäen <b>if</b> ja <b>elif</b> lauseita.</li>\r\n    </ul>\r\n</p>\r\n<p><b>Funktio kysyIka</b>, joka pyytää käyttäjältä iän, annetaan valmiina. Tämän funktion avulla voit testata tarkistaIkaRaja-aliohjelmaasi.</p>\r\n<h3>Testaus:</h3>\r\n<p>\r\n    Ohjelma testataan useilla syötteillä:\r\n    <ul>\r\n         <li>10 - odotettu tulostus: <i>`Et voi mennä kesätöihin, äänestää tai juoda väkevää alkoholia.`\r\n        <li>14 - odotettu tulostus: <i>`Et voi mennä kesätöihin, äänestää tai juoda väkevää alkoholia.`</i></li>\r\n        <li>15 - odotettu tulostus: <i>`Voit mennä kesätöihin, mutta et voi äänestää tai juoda väkevää alkoholia.`</i></li>\r\n        <li>17 - odotettu tulostus: <i>`Voit mennä kesätöihin, mutta et voi äänestää tai juoda väkevää alkoholia.`</i></li>\r\n        <li>18 - odotettu tulostus: <i>`Voit mennä kesätöihin ja äänestää, mutta et voi juoda väkevää alkoholia.`</i></li>\r\n        <li>20 - odotettu tulostus: <i>`Voit mennä kesätöihin ja äänestää, mutta et voi juoda väkevää alkoholia.`</i></li>\r\n        <li>21 - odotettu tulostus: <i>`Voit mennä kesätöihin, äänestää ja juoda väkevää alkoholia.`</i></li>\r\n        <li>31 - odotettu tulostus: <i>`Voit mennä kesätöihin, äänestää ja juoda väkevää alkoholia.`</i></li>\r\n    </ul>\r\n</p>`,`\r`,char(13)),`\n`,char(10)),replace(replace(`# Tee tähän aliohjelma ``tarkistaIkaRaja``\r\n\r\n\r\n\r\n\r\n\r\n# valmiit koodit \r\n\r\ndef kysyIka():\r\n    try:\r\n        ika = int(input(`Anna ikäsi: `))\r\n        tarkistaIkaRaja(ika)\r\n    except ValueError:\r\n        print(`Annettu arvo ei ollut luku. Yritä uudelleen.`)\r\n\r\nkysyIka()`,`\r`,char(13)),`\n`,char(10)),`[]`,`Python`,`harjoittelija`,1,1,NULL,5);
INSERT INTO main_app_task VALUES(21,`Luvun kertominen kahdella ja arvon palauttaminen aliohjelmasta`,`2023-10-22 19:28:42`,replace(replace(`Kirjoita funktio <i> kerro_kahdella</i>, joka ottaa argumentiksi yhden kokonaisluvun ja palauttaa luvun kertomana kahdella return lauseella .\r\n\r\n<h3> Esimerkki toiminnallisuudesta: </h3>\r\n\r\n<pre>\r\nprint(kerro_kahdella(5))  # Tulostaa: 10\r\nprint(kerro_kahdella(0))  # Tulostaa: 0\r\nprint(kerro_kahdella(-3)) # Tulostaa: -6\r\n</pre>`,`\r`,char(13)),`\n`,char(10)),replace(replace(`# kirjoita aliohjelma tähän \r\n\r\n\r\n \r\n\r\n\r\n#testikoodi\r\nprint(kerro_kahdella(5))  # Tulostaa: 10\r\nprint(kerro_kahdella(0))  # Tulostaa: 0\r\nprint(kerro_kahdella(-3)) # Tulostaa: -6`,`\r`,char(13)),`\n`,char(10)),`[]`,`Python`,`aloittelija`,1,1,NULL,6);
INSERT INTO main_app_task VALUES(22,`Laske lukujen neliöt käyttäen for-lausetta`,`2023-10-23 13:15:45`,`Toteuta ohjelma, joka tulostaa lukujen 0–9 neliöt eli luvut korotettuna toiseen potenssiin. Esimerkiksi luvun 5 neliö on 25, koska 5^2 = 5 * 5 = 25.`,`# tee koodisi tähän`,`[]`,`Python`,`aloittelija`,1,1,NULL,4);
INSERT INTO main_app_task VALUES(23,`For-lause: Tulosta joka toinen`,`2023-10-23 14:18:51`,`Toteuta ohjelma, joka tulostaa joka toisen luvun väliltä 0–9 käyttäen range-funktiota. Aloita luvusta 0.`,`# Tee koodi tähän`,`[]`,`Python`,`aloittelija`,1,1,NULL,4);
INSERT INTO main_app_task VALUES(24,`While-silmukkan perusteet`,`2023-10-23 14:41:39`,`Toteuta Python ohjelma, joka tulostaa luvut 0–9 käyttäen while-silmukkaa.`,`# tee koodisi tähän`,`[]`,`Python`,`aloittelija`,1,1,NULL,4);
INSERT INTO main_app_task VALUES(25,`While-silmukka: Luvun jakaminen tekijöihin`,`2023-10-23 18:39:12`,replace(replace(`<p>Toteuta funktio, joka jakaa annetun luvun alkutekijöihinsä. Funktion tulisi ottaa kaksi argumenttia: jaettava luku ja alkuarvoksi annettava tekijä, joka on 2. Funktio tulostaa luvun ja sen alkutekijät muodossa <code>luku = tekijä1 * tekijä2 * ...</code>. Käytä <code>while</code>-silmukkaa ja <code>end</code>-parametria tulostusfunktiotasi varten.</p>\r\n\r\n<p><strong>Vihje:</strong></p>\r\n<p><code>end</code>-parametri määrittää merkkijonon, joka liitetään tulostuksen loppuun. Esimerkiksi <code>print(`hei`, end=`!`)</code> tulostaa <code>`hei!`</code> ilman rivinvaihtoa lopussa.</p>\r\n\r\n<p><strong>Esimerkki:</strong></p>\r\n<pre>\r\n<strong>Funktion kutsu:</strong>\r\njaa_tekijoihin(12, 2)\r\n\r\n<strong>Tulostus:</strong>\r\n12 = 2 * 2 * 3\r\n\r\n<strong>Funktion kutsu:</strong>\r\njaa_tekijoihin(15, 2)\r\n\r\n<strong>Tulostus:</strong>\r\n15 = 3 * 5\r\n\r\n<strong>... ja niin edelleen ...</strong>\r\n</pre>`,`\r`,char(13)),`\n`,char(10)),replace(replace(`# kirjoita aliohjelmasi tähän \r\n\r\n\r\n\r\n\r\n\r\n\r\n# Valmiiksi annettava koodi \r\ntekija = 2\r\n\r\n#esimerkki funktion käytöstä/testit\r\njaa_tekijoihin(12,tekija)\r\njaa_tekijoihin(15, tekija)\r\njaa_tekijoihin(44,tekija)\r\njaa_tekijoihin(57,tekija)\r\njaa_tekijoihin(17,tekija)`,`\r`,char(13)),`\n`,char(10)),`[]`,`Python`,`kehittäjä`,1,1,NULL,4);
INSERT INTO main_app_task VALUES(26,`Ehtolauseet: Pääsykoe tulosten tarkistus`,`2023-10-23 22:08:47`,replace(replace(`<p>Kirjoita funktio, <code> paasykoe_tarkistus</code> joka määrittelee, onko opiskelija hyväksytty pääsykokeessa. Funktion tulee ottaa kaksi parametria: <code>testScore</code> (pääsykokeen tulos) ja <code>hasRecommendation</code> (onko suosituskirje).</p>\r\n\r\n<p><strong>Säännöt:</strong></p>\r\n<ul>\r\n  <li>Jos pääsykokeen tulos on suurempi kuin 85 JA hakijalla on suosituskirje, tulosta `Hyväksytty erinomaisin pistein!`.</li>\r\n  <li>Jos pääsykokeen tulos on 70-85 JA hakijalla on suosituskirje TAI pisteet ovat 80-100 ilman suosituskirjettä, tulosta `Hyväksytty!`</li>\r\n  <li>Mikäli pääsykokeen tulos on 0-69, tulosta `Hylätty!`.</li>\r\n  <li>Muissa tapauksissa (kuten jos tulos on negatiivinen tai yli 100) tulosta `Virheellinen tulos!`.</li>\r\n</ul>\r\n\r\n<p><strong>Esimerkki:</strong></p>\r\n<pre>\r\n<strong>Funktion kutsu:</strong>\r\npaasykoe_tarkistus(88, True)\r\n\r\n<strong>Tulostus:</strong>\r\nHyväksytty erinomaisin pistein!\r\n\r\n<strong>Funktion kutsu:</strong>\r\npaasykoe_tarkistus(78, True)\r\n\r\n<strong>Tulostus:</strong>\r\nHyväksytty!\r\n\r\n<strong>Funktion kutsu:</strong>\r\npaasykoe_tarkistus(78, False)\r\n\r\n<strong>Tulostus:</strong>\r\nHyväksytty!\r\n\r\n<strong>Funktion kutsu:</strong>\r\npaasykoe_tarkistus(105, False)\r\n\r\n<strong>Tulostus:</strong>\r\nVirheellinen tulos!\r\n\r\n<strong>Funktion kutsu:</strong>\r\npaasykoe_tarkistus(-5, True)\r\n\r\n<strong>Tulostus:</strong>\r\nVirheellinen tulos!\r\n\r\n<strong>Funktion kutsu:</strong>\r\npaasykoe_tarkistus(65, False)\r\n\r\n<strong>Tulostus:</strong>\r\nHylätty!\r\n\r\n<strong>... ja niin edelleen ...</strong>\r\n</pre>`,`\r`,char(13)),`\n`,char(10)),replace(replace(`#kirjoita fubktio tähän \r\n\r\n\r\n\r\n\r\n\r\n\r\n# Tarkistetaan funktion toimintaa eri syötteillä:\r\n\r\npaasykoe_tarkistus(90, True)\r\n# Tulostaa: Hyväksytty erinomaisin pistein!\r\n\r\npaasykoe_tarkistus(80, True)\r\n# Tulostaa: Hyväksytty!\r\n\r\npaasykoe_tarkistus(82, False)\r\n# Tulostaa: Hyväksytty!\r\n\r\npaasykoe_tarkistus(50, False)\r\n# Tulostaa: Hylätty!\r\n\r\npaasykoe_tarkistus(105, True)\r\n# Tulostaa: Virheellinen tulos!\r\n\r\npaasykoe_tarkistus(-10, False)\r\n# Tulostaa: Virheellinen tulos!`,`\r`,char(13)),`\n`,char(10)),`[]`,`Python`,`harjoittelija`,1,1,NULL,5);
INSERT INTO main_app_task VALUES(27,`Tarkistaa ehtolauseella onko käyttäjällä lupa`,`2023-10-24 15:54:20`,replace(replace(`<p>Kirjoita funktio, <code>tehtavanTarkistus</code>, joka tarkistaa, onko henkilöllä oikeus ja pätevyys suorittaa tietty tehtävä. Funktion tulee ottaa kaksi parametria: <code>onLupa</code> (onko lupa suorittaa tehtävä) ja <code>onKokemus</code> (onko kokemusta tehtävästä).</p>\r\n\r\n<p><strong>Säännöt:</strong></p>\r\n<ul>\r\n  <li>Jos henkilöllä ei ole lupaa (onLupa on <code>False</code>), tulosta `Ei oikeutta suorittaa tehtävää!`.</li>\r\n  <li>Jos henkilöllä on lupa, mutta hänellä ei ole kokemusta (<code>onKokemus</code> on <code>False</code>), tulosta `Voit suorittaa tehtävän, mutta ole varovainen!`</li>\r\n  <li>Jos henkilöllä on sekä lupa että kokemus, tulosta `Voit suorittaa tehtävän!`.</li>\r\n</ul>\r\n\r\n<p><strong>Esimerkki:</strong></p>\r\n<pre>\r\n<strong>Funktion kutsu:</strong>\r\ntehtavanTarkistus(True, True)\r\n\r\n<strong>Tulostus:</strong>\r\nVoit suorittaa tehtävän!\r\n\r\n<strong>Funktion kutsu:</strong>\r\ntehtavanTarkistus(True, False)\r\n\r\n<strong>Tulostus:</strong>\r\nVoit suorittaa tehtävän, mutta ole varovainen!\r\n\r\n<strong>Funktion kutsu:</strong>\r\ntehtavanTarkistus(False, True)\r\n\r\n<strong>Tulostus:</strong>\r\nEi oikeutta suorittaa tehtävää!\r\n\r\n<strong>Funktion kutsu:</strong>\r\ntehtavanTarkistus(False, False)\r\n\r\n<strong>Tulostus:</strong>\r\nEi oikeutta suorittaa tehtävää!\r\n\r\n<strong>... ja niin edelleen ...</strong>\r\n</pre>`,`\r`,char(13)),`\n`,char(10)),replace(replace(`# tee  aliohjelman koodi tähän\r\n\r\n\r\n\r\n\r\n# Testaus\r\ntehtavanTarkistus(True, True)  # Tulostaa: Voit suorittaa tehtävän!\r\ntehtavanTarkistus(True, False)  # Tulostaa: Voit suorittaa tehtävän, mutta ole varovainen!\r\ntehtavanTarkistus(False, True)  # Tulostaa: Ei oikeutta suorittaa tehtävää!\r\ntehtavanTarkistus(False, False)  # Tulostaa: Ei oikeutta suorittaa tehtävää!`,`\r`,char(13)),`\n`,char(10)),`[]`,`Python`,`aloittelija`,1,1,NULL,5);
CREATE TABLE IF NOT EXISTS `main_app_performedcourse` (`id` integer NOT NULL PRIMARY KEY AUTO_INCREMENT, `course_id` bigint NOT NULL REFERENCES `main_app_course` (`id`) , `user_id` bigint NOT NULL REFERENCES `main_app_user` (`id`) );
CREATE TABLE IF NOT EXISTS `main_app_ongoingcourse` (`id` integer NOT NULL PRIMARY KEY AUTO_INCREMENT, `course_id` bigint NOT NULL REFERENCES `main_app_course` (`id`) , `user_id` bigint NOT NULL REFERENCES `main_app_user` (`id`) );
CREATE TABLE IF NOT EXISTS `main_app_tasktest` (`id` integer NOT NULL PRIMARY KEY AUTO_INCREMENT, `test_code` text NULL, `answer_id` bigint NULL REFERENCES `main_app_answer` (`id`) , `task_id` bigint NOT NULL REFERENCES `main_app_task` (`id`) );
INSERT INTO main_app_tasktest VALUES(1,replace(replace(`def test_function(custom_globals):\r\012    from io import StringIO\r\012    import sys\r\012\r\012    testit = []\r\012    läpäisty = True\r\012\r\012    def suorita_testi(testifunktio, virheviesti):\r\012        nonlocal läpäisty\r\012        tulos, viesti = testifunktio()\r\012        if not tulos:\r\012            läpäisty = False\r\012            testit.append(f`❌ {virheviesti}: {viesti}`)\r\012        else:\r\012            testit.append(f`✅ {virheviesti}`)\r\012\r\012    # 1. Tarkista, että muuttujat num1 ja num2 ovat määritelty ja niillä on oikeat arvot.\r\012    suorita_testi(\r\012        lambda: (\r\012            True, ``\r\012        ) if `num1` in custom_globals and `num2` in custom_globals and custom_globals[`num1`] == 5 and custom_globals[`num2`] == 10 else (\r\012            False, `Muuttujilla ``num1`` tai ``num2`` on väärät arvot tai ne eivät ole määritelty.`\r\012        ),\r\012        `Muuttujien ``num1`` ja ``num2`` tarkistus`\r\012    )\r\012\r\012    # 2. Tarkista, että summa on laskettu oikein.\r\012    suorita_testi(\r\012        lambda: (\r\012            True, ``\r\012        ) if `summa` in custom_globals and custom_globals[`summa`] == 15 else (\r\012            False, `Summa muuttuja ei ole ``num1`` ja ``num2`` yhteenlaskettu tulos tai se ei ole määritelty.`\r\012        ),\r\012        `Summan tarkistus`\r\012    )\r\012\r\012    # 3. Tarkista tulostus\r\012    output = StringIO()\r\012    old_stdout = sys.stdout\r\012    sys.stdout = output\r\012    try:\r\012        exec(custom_globals[`_source_code`], custom_globals)\r\012    except Exception as e:\r\012        sys.stdout = old_stdout\r\012        return False, f`Koodi aiheutti virheen: {str(e)}`\r\012    sys.stdout = old_stdout\r\012    expected_output = `Summa on: 15`\r\012    if output.getvalue().strip() != expected_output:\r\012        suorita_testi(lambda: (False, f`Odotettu: ``{expected_output}``, Saatu: ``{output.getvalue().strip()}```), `Tulostuksen tarkistus`)\r\012    else:\r\012        testit.append(f`✅ Tulostuksen tarkistus`)\r\012\r\012    # 4. Tarkista, että `print`-funktiota on käytetty.\r\012    if `print(` not in custom_globals[`_source_code`]:\r\012        suorita_testi(lambda: (False, ``), `print-funktion käytön tarkistus`)\r\012    else:\r\012        testit.append(f`✅ print-funktion käytön tarkistus`)\r\012\r\012    # Lopuksi palautetaan tulos:\r\012    if läpäisty:\r\012        return True, `\n`.join(testit) + `\n\nOhjelman toiminta on oikein!`\r\012    else:\r\012        return False, `\n`.join(testit)`,`\r`,char(13)),`\012`,char(10)),4,4);
INSERT INTO main_app_tasktest VALUES(2,replace(replace(`def test_function(custom_globals):\r\012    from io import StringIO\r\012    import sys\r\012\r\012    testit = []\r\012    läpäisty = True\r\012\r\012    def suorita_testi(testifunktio, virheviesti):\r\012        nonlocal läpäisty\r\012        tulos, viesti = testifunktio()\r\012        if not tulos:\r\012            läpäisty = False\r\012            testit.append(f`❌ {virheviesti}: {viesti}`)\r\012        else:\r\012            testit.append(f`✅ {virheviesti}`)\r\012\r\012    # 1. Tarkista, että muuttujat float1 ja float2 ovat määritelty ja niillä on oikeat arvot.\r\012    suorita_testi(\r\012        lambda: (\r\012            True, ``\r\012        ) if `float1` in custom_globals and `float2` in custom_globals and abs(custom_globals[`float1`] - 3.14) < 0.001 and abs(custom_globals[`float2`] - 9.81) < 0.001 else (\r\012            False, `Muuttujilla ``float1`` tai ``float2`` on väärät arvot tai ne eivät ole määritelty.`\r\012        ),\r\012        `Muuttujien ``float1`` ja ``float2`` tarkistus`\r\012    )\r\012\r\012    # 2. Tarkista, että summa on laskettu oikein.\r\012    expected_sum = 12.95\r\012    suorita_testi(\r\012        lambda: (\r\012            True, ``\r\012        ) if `summa` in custom_globals and abs(custom_globals[`summa`] - expected_sum) < 0.001 else (\r\012            False, `Summa muuttuja ei ole ``float1`` ja ``float2`` yhteenlaskettu tulos tai se ei ole määritelty.`\r\012        ),\r\012        `Summan tarkistus`\r\012    )\r\012\r\012    # 3. Tarkista tulostus\r\012    output = StringIO()\r\012    old_stdout = sys.stdout\r\012    sys.stdout = output\r\012    try:\r\012        exec(custom_globals[`_source_code`], custom_globals)\r\012    except Exception as e:\r\012        sys.stdout = old_stdout\r\012        return False, f`Koodi aiheutti virheen: {str(e)}`\r\012    sys.stdout = old_stdout\r\012    expected_output = `Summa on: 12.95`\r\012    if output.getvalue().strip() != expected_output:\r\012        suorita_testi(lambda: (False, f`Odotettu: ``{expected_output}``, Saatu: ``{output.getvalue().strip()}```), `Tulostuksen tarkistus`)\r\012    else:\r\012        testit.append(f`✅ Tulostuksen tarkistus`)\r\012\r\012    # 4. Tarkista, että `print`-funktiota on käytetty.\r\012    if `print(` not in custom_globals[`_source_code`]:\r\012        suorita_testi(lambda: (False, ``), `print-funktion käytön tarkistus`)\r\012    else:\r\012        testit.append(f`✅ print-funktion käytön tarkistus`)\r\012\r\012    # Lopuksi palautetaan tulos:\r\012    if läpäisty:\r\012        return True, `\n`.join(testit) + `\n\nOhjelman toiminta on oikein!`\r\012    else:\r\012        return False, `\n`.join(testit)`,`\r`,char(13)),`\012`,char(10)),5,5);
INSERT INTO main_app_tasktest VALUES(3,replace(replace(`def test_function(custom_globals):\r\012    from io import StringIO\r\012    import sys\r\012\r\012    testit = []\r\012    läpäisty = True\r\012\r\012    def suorita_testi(testifunktio, virheviesti):\r\012        nonlocal läpäisty\r\012        tulos, viesti = testifunktio()\r\012        if not tulos:\r\012            läpäisty = False\r\012            testit.append(f`❌ {virheviesti}: {viesti}`)\r\012        else:\r\012            testit.append(f`✅ {virheviesti}`)\r\012\r\012    # 1. Tarkista, että muuttuja ``lause`` on määritelty ja sillä on oikea arvo.\r\012    expected_value = `Python on hienoa!`\r\012    suorita_testi(\r\012        lambda: (\r\012            True, ``\r\012        ) if `lause` in custom_globals and custom_globals[`lause`] == expected_value else (\r\012            False, f`Muuttujan ``lause`` arvo ei ole oikein. Saatu arvo: {custom_globals.get(``lause``, ``Ei määritelty``)}`\r\012        ),\r\012        `Muuttujan ``lause`` tarkistus`\r\012    )\r\012\r\012    # 2. Tarkista tulostus\r\012    source_code = custom_globals[`_source_code`]\r\012    output = StringIO()\r\012    old_stdout = sys.stdout\r\012    sys.stdout = output\r\012    try:\r\012        exec(source_code, custom_globals)\r\012    except Exception as e:\r\012        sys.stdout = old_stdout\r\012        return False, f`Koodi aiheutti virheen: {str(e)}`\r\012    sys.stdout = old_stdout\r\012\r\012    if output.getvalue().strip() != expected_value:\r\012        suorita_testi(lambda: (False, f`Odotettu: ``{expected_value}``, Saatu: ``{output.getvalue().strip()}```), `Tulostuksen tarkistus`)\r\012    else:\r\012        testit.append(f`✅ Tulostuksen tarkistus`)\r\012\r\012    # 3. Tarkista, että `print(lause)` on käytetty.\r\012    if `print(lause)` not in source_code:\r\012        suorita_testi(lambda: (False, ``), `print(lause)-kutsun tarkistus`)\r\012    else:\r\012        testit.append(f`✅ print(lause)-kutsun tarkistus`)\r\012\r\012    # Lopuksi palautetaan tulos:\r\012    if läpäisty:\r\012        return True, `\n`.join(testit) + `\n\nOhjelman toiminta on oikein!`\r\012    else:\r\012        return False, `\n`.join(testit)`,`\r`,char(13)),`\012`,char(10)),6,6);
INSERT INTO main_app_tasktest VALUES(4,replace(replace(`def test_function(custom_globals):\r\012    from io import StringIO\r\012    import sys\r\012\r\012    testit = []\r\012    läpäisty = True\r\012\r\012    def suorita_testi(testifunktio, virheviesti):\r\012        nonlocal läpäisty\r\012        tulos, viesti = testifunktio()\r\012        if not tulos:\r\012            läpäisty = False\r\012            testit.append(f`❌ {virheviesti}: {viesti}`)\r\012        else:\r\012            testit.append(f`✅ {virheviesti}`)\r\012\r\012    def merkitse_erot(odotettu, saatu):\r\012        longest = max(len(odotettu), len(saatu))\r\012        marked = []\r\012        for i in range(longest):\r\012            c1 = odotettu[i] if i < len(odotettu) else None\r\012            c2 = saatu[i] if i < len(saatu) else None\r\012            if c1 != c2:\r\012                marked.append(`🔺`)\r\012            if c2 is not None:\r\012                marked.append(c2)\r\012            else:\r\012                marked.append(c1)\r\012        return ``.join(marked)\r\012\r\012    # 1. Tarkista, että muuttuja ``runo`` on määritelty ja sillä on oikea arvo.\r\012    expected_value = ```Roses are red,\r\012Violets are blue,\r\012Python is great,\r\012And so are you!```\r\012    suorita_testi(\r\012        lambda: (\r\012            True, ``\r\012        ) if `runo` in custom_globals and custom_globals[`runo`] == expected_value else (\r\012            False, f`Muuttujan ``runo`` arvo ei ole oikein. Saatu arvo: {custom_globals.get(``runo``, ``Ei määritelty``)}`\r\012        ),\r\012        `Muuttujan ``runo`` tarkistus`\r\012    )\r\012\r\012    # 2. Tarkista tulostus\r\012    source_code = custom_globals[`_source_code`]\r\012    output = StringIO()\r\012    old_stdout = sys.stdout\r\012    sys.stdout = output\r\012    try:\r\012        exec(source_code, custom_globals)\r\012    except Exception as e:\r\012        sys.stdout = old_stdout\r\012        return False, f`Koodi aiheutti virheen: {str(e)}`\r\012    sys.stdout = old_stdout\r\012\r\012    tulostus = output.getvalue().strip()\r\012    if tulostus != expected_value:\r\012        erot = merkitse_erot(expected_value, tulostus)\r\012        suorita_testi(lambda: (False, f`Saatu: ``{erot}```), `Tulostuksen tarkistus`)\r\012    else:\r\012        testit.append(f`✅ Tulostuksen tarkistus`)\r\012\r\012    # 3. Tarkista, että `print(runo)` on käytetty.\r\012    if `print(runo)` not in source_code:\r\012        suorita_testi(lambda: (False, ``), `print(runo)-kutsun tarkistus`)\r\012    else:\r\012        testit.append(f`✅ print(runo)-kutsun tarkistus`)\r\012\r\012    # Lopuksi palautetaan tulos:\r\012    if läpäisty:\r\012        return True, `\n`.join(testit) + `\n\nOhjelman toiminta on oikein!`\r\012    else:\r\012        return False, `\n`.join(testit)`,`\r`,char(13)),`\012`,char(10)),7,7);
INSERT INTO main_app_tasktest VALUES(5,replace(replace(`def test_function(custom_globals):\r\012    from io import StringIO\r\012    import sys\r\012\r\012    testit = []\r\012    läpäisty = True\r\012\r\012    def suorita_testi(testifunktio, virheviesti):\r\012        nonlocal läpäisty\r\012        tulos, viesti = testifunktio()\r\012        if not tulos:\r\012            läpäisty = False\r\012            testit.append(f`❌ {virheviesti}: {viesti}`)\r\012        else:\r\012            testit.append(f`✅ {virheviesti}`)\r\012\r\012    def merkitse_erot(odotettu, saatu):\r\012        for i in range(max(len(odotettu), len(saatu))):\r\012            c1 = odotettu[i] if i < len(odotettu) else ``\r\012            c2 = saatu[i] if i < len(saatu) else ``\r\012            if c1 != c2:\r\012                return odotettu[:i] + `🔺` + saatu[i:]\r\012        return saatu\r\012\r\012    # 1. Tarkista, että muuttuja ``polku`` on määritelty ja sillä on oikea arvo.\r\012    expected_value = `The file is located at ``C:\\\\Desktop\\\\file.txt``.`\r\012    suorita_testi(\r\012        lambda: (\r\012            True, ``\r\012        ) if `polku` in custom_globals and custom_globals[`polku`] == expected_value else (\r\012            False, f`Muuttujan ``polku`` arvo ei ole oikein. Saatu arvo: {custom_globals.get(``polku``, ``Ei määritelty``)}`\r\012        ),\r\012        `Muuttujan ``polku`` tarkistus`\r\012    )\r\012\r\012    # 2. Tarkista tulostus\r\012    source_code = custom_globals[`_source_code`]\r\012    output = StringIO()\r\012    old_stdout = sys.stdout\r\012    sys.stdout = output\r\012    try:\r\012        exec(source_code, custom_globals)\r\012    except Exception as e:\r\012        sys.stdout = old_stdout\r\012        return False, f`Koodi aiheutti virheen: {str(e)}`\r\012    sys.stdout = old_stdout\r\012\r\012    tulostus = output.getvalue().strip()\r\012    if tulostus != expected_value:\r\012        erot = merkitse_erot(expected_value, tulostus)\r\012        suorita_testi(lambda: (False, f`Saatu: ``{erot}```), `Tulostuksen tarkistus`)\r\012    else:\r\012        testit.append(f`✅ Tulostuksen tarkistus`)\r\012\r\012    # Lopuksi palautetaan tulos:\r\012    if läpäisty:\r\012        return True, `\n`.join(testit) + `\n\nOhjelman toiminta on oikein!`\r\012    else:\r\012        return False, `\n`.join(testit)`,`\r`,char(13)),`\012`,char(10)),8,8);
INSERT INTO main_app_tasktest VALUES(6,replace(replace(`def test_function(custom_globals):\r\012    from io import StringIO\r\012    import sys\r\012\r\012    testit = []\r\012    läpäisty = True\r\012\r\012    def suorita_testi(testifunktio, virheviesti):\r\012        nonlocal läpäisty\r\012        tulos, viesti = testifunktio()\r\012        if not tulos:\r\012            läpäisty = False\r\012            testit.append(f`❌ {virheviesti}: {viesti}`)\r\012        else:\r\012            testit.append(f`✅ {virheviesti}`)\r\012\r\012    def merkitse_erot(odotettu, saatu):\r\012        longest = max(len(odotettu), len(saatu))\r\012        marked = []\r\012        for i in range(longest):\r\012            c1 = odotettu[i] if i < len(odotettu) else None\r\012            c2 = saatu[i] if i < len(saatu) else None\r\012            if c1 != c2:\r\012                marked.append(`🔺`)\r\012            if c2 is not None:\r\012                marked.append(c2)\r\012            else:\r\012                marked.append(c1)\r\012        return ``.join(marked)\r\012\r\012    # 1. Tarkista, että muuttuja ``tervehdys`` on määritelty ja sillä on oikea arvo.\r\012    expected_value = ``He said, `Hello, world!```\r\012    suorita_testi(\r\012        lambda: (\r\012            True, ``\r\012        ) if `tervehdys` in custom_globals and custom_globals[`tervehdys`] == expected_value else (\r\012            False, f`Muuttujan ``tervehdys`` arvo ei ole oikein. Saatu arvo: {custom_globals.get(``tervehdys``, ``Ei määritelty``)}`\r\012        ),\r\012        `Muuttujan ``tervehdys`` tarkistus`\r\012    )\r\012\r\012    # 2. Tarkista tulostus\r\012    source_code = custom_globals[`_source_code`]\r\012    output = StringIO()\r\012    old_stdout = sys.stdout\r\012    sys.stdout = output\r\012    try:\r\012        exec(source_code, custom_globals)\r\012    except Exception as e:\r\012        sys.stdout = old_stdout\r\012        return False, f`Koodi aiheutti virheen: {str(e)}`\r\012    sys.stdout = old_stdout\r\012\r\012    tulostus = output.getvalue().strip()\r\012    if tulostus != expected_value:\r\012        erot = merkitse_erot(expected_value, tulostus)\r\012        suorita_testi(lambda: (False, f`Saatu: ``{erot}```), `Tulostuksen tarkistus`)\r\012    else:\r\012        testit.append(f`✅ Tulostuksen tarkistus`)\r\012\r\012    # 3. Tarkista, että `print(tervehdys)` on käytetty.\r\012    if `print(tervehdys)` not in source_code:\r\012        suorita_testi(lambda: (False, ``), `print(tervehdys)-kutsun tarkistus`)\r\012    else:\r\012        testit.append(f`✅ print(tervehdys)-kutsun tarkistus`)\r\012\r\012    # Lopuksi palautetaan tulos:\r\012    if läpäisty:\r\012        return True, `\n`.join(testit) + `\n\nOhjelman toiminta on oikein!`\r\012    else:\r\012        return False, `\n`.join(testit)`,`\r`,char(13)),`\012`,char(10)),9,9);
INSERT INTO main_app_tasktest VALUES(7,replace(replace(`def test_function(custom_globals):\r\012    from io import StringIO\r\012    import sys\r\012\r\012    testit = []\r\012    läpäisty = True\r\012\r\012    def suorita_testi(testifunktio, virheviesti):\r\012        nonlocal läpäisty\r\012        tulos, viesti = testifunktio()\r\012        if not tulos:\r\012            läpäisty = False\r\012            testit.append(f`❌ {virheviesti}: {viesti}`)\r\012        else:\r\012            testit.append(f`✅ {virheviesti}`)\r\012\r\012    # 1. Tarkista, että muuttuja ``lause`` on määritelty ja sillä on oikea arvo.\r\012    expected_lause = `Python on mukavaa`\r\012    suorita_testi(\r\012        lambda: (\r\012            True, ``\r\012        ) if `lause` in custom_globals and custom_globals[`lause`] == expected_lause else (\r\012            False, f`Muuttujan ``lause`` arvo ei ole oikein. Saatu arvo: {custom_globals.get(``lause``, ``Ei määritelty``)}`\r\012        ),\r\012        `Muuttujan ``lause`` tarkistus`\r\012    )\r\012\r\012    # 2. Tarkista ``pituus``-muuttujan arvo.\r\012    expected_pituus = 17\r\012    suorita_testi(\r\012        lambda: (\r\012            True, ``\r\012        ) if `pituus` in custom_globals and custom_globals[`pituus`] == expected_pituus else (\r\012            False, f`Muuttujan ``pituus`` arvo ei ole oikein. Saatu arvo: {custom_globals.get(``pituus``, ``Ei määritelty``)}`\r\012        ),\r\012        `Muuttujan ``pituus`` tarkistus`\r\012    )\r\012\r\012    # 3. Tarkista ``merkki``-muuttujan arvo.\r\012    expected_merkki = `t`\r\012    suorita_testi(\r\012        lambda: (\r\012            True, ``\r\012        ) if `merkki` in custom_globals and custom_globals[`merkki`] == expected_merkki else (\r\012            False, f`Muuttujan ``merkki`` arvo ei ole oikein. Saatu arvo: {custom_globals.get(``merkki``, ``Ei määritelty``)}`\r\012        ),\r\012        `Muuttujan ``merkki`` tarkistus`\r\012    )\r\012\r\012    # 4. Tarkista ``viimeinen``-muuttujan arvo.\r\012    expected_viimeinen = `a`\r\012    suorita_testi(\r\012        lambda: (\r\012            True, ``\r\012        ) if `viimeinen` in custom_globals and custom_globals[`viimeinen`] == expected_viimeinen else (\r\012            False, f`Muuttujan ``viimeinen`` arvo ei ole oikein. Saatu arvo: {custom_globals.get(``viimeinen``, ``Ei määritelty``)}`\r\012        ),\r\012        `Muuttujan ``viimeinen`` tarkistus`\r\012    )\r\012\r\012    # 5. Tarkista ``uusi_lause``-muuttujan arvo.\r\012    expected_uusi_lause = `on mukavaa`\r\012    suorita_testi(\r\012        lambda: (\r\012            True, ``\r\012        ) if `uusi_lause` in custom_globals and custom_globals[`uusi_lause`] == expected_uusi_lause else (\r\012            False, f`Muuttujan ``uusi_lause`` arvo ei ole oikein. Saatu arvo: {custom_globals.get(``uusi_lause``, ``Ei määritelty``)}`\r\012        ),\r\012        `Muuttujan ``uusi_lause`` tarkistus`\r\012    )\r\012\r\012    # 6. Tarkista tulostus.\r\012    source_code = custom_globals[`_source_code`]\r\012    output = StringIO()\r\012    old_stdout = sys.stdout\r\012    sys.stdout = output\r\012    try:\r\012        exec(source_code, custom_globals)\r\012    except Exception as e:\r\012        sys.stdout = old_stdout\r\012        return False, f`Koodi aiheutti virheen: {str(e)}`\r\012    sys.stdout = old_stdout\r\012\r\012    expected_output = ```Lause: Python on mukavaa\r\012Pituus: 17\r\012Kolmas kirjain: t\r\012Viimeinen merkki: a\r\012Uusi lause: on mukavaa```\r\012    tulostus = output.getvalue().strip()\r\012    suorita_testi(\r\012        lambda: (\r\012            True, ``\r\012        ) if tulostus == expected_output else (\r\012            False, f`Tulostus ei ole oikein. Saatu tulostus: {tulostus}`\r\012        ),\r\012        `Tulostuksen tarkistus`\r\012    )\r\012\r\012    # Lopuksi palautetaan tulos.\r\012    if läpäisty:\r\012        return True, `\n`.join(testit) + `\n\nOhjelman toiminta on oikein!`\r\012    else:\r\012        return False, `\n`.join(testit)`,`\r`,char(13)),`\012`,char(10)),10,10);
INSERT INTO main_app_tasktest VALUES(8,replace(replace(`def test_function(custom_globals):\r\012    from io import StringIO\r\012    import sys\r\012\r\012    testit = []\r\012    läpäisty = True\r\012\r\012    def suorita_testi(testifunktio, virheviesti):\r\012        nonlocal läpäisty\r\012        tulos, viesti = testifunktio()\r\012        if not tulos:\r\012            läpäisty = False\r\012            testit.append(f`❌ {virheviesti}: {viesti}`)\r\012        else:\r\012            testit.append(f`✅ {virheviesti}`)\r\012\r\012    # Tarkista, että funktio ``tulostaViesti`` on määritelty\r\012    suorita_testi(\r\012        lambda: (\r\012            True, ``\r\012        ) if ``tulostaViesti`` in custom_globals and callable(custom_globals[``tulostaViesti``]) else (\r\012            False, `Aliohjelma ``tulostaViesti`` ei ole määritelty tai ei ole funktio.`\r\012        ),\r\012        `Aliohjelman ``tulostaViesti`` määrittelyn tarkistus`\r\012    )\r\012\r\012    # Tarkista, että aliohjelma ei ota vastaan parametreja\r\012    suorita_testi(\r\012        lambda: (\r\012            True, ``\r\012        ) if custom_globals[``tulostaViesti``].__code__.co_argcount == 0 else (\r\012            False, `Aliohjelma ``tulostaViesti`` ei saa ottaa vastaan parametreja.`\r\012        ),\r\012        `Aliohjelman ``tulostaViesti`` parametrien tarkistus`\r\012    )\r\012\r\012    # Tarkista funktion tulostus\r\012    source_code = custom_globals[`_source_code`]\r\012    output = StringIO()\r\012    old_stdout = sys.stdout\r\012    sys.stdout = output\r\012    try:\r\012        exec(source_code, custom_globals)\r\012    except Exception as e:\r\012        sys.stdout = old_stdout\r\012        return False, f`Koodi aiheutti virheen: {str(e)}`\r\012    sys.stdout = old_stdout\r\012\r\012    tulostus = output.getvalue().strip()\r\012    expected_output = `Hei aliohjelma!`\r\012    \r\012    suorita_testi(\r\012        lambda: (\r\012            True, ``\r\012        ) if tulostus == expected_output else (\r\012            False, f`Aliohjelma ``tulostaViesti`` ei tulosta oikeaa viestiä tai sitä ei ole kutsuttu. Saatu tuloste: ``{tulostus}```\r\012        ),\r\012        `Aliohjelman ``tulostaViesti`` tulostuksen tarkistus`\r\012    )\r\012\r\012    # Lopuksi palautetaan tulos:\r\012    if läpäisty:\r\012        return True, `\n`.join(testit) + `\n\nOhjelman toiminta on oikein!`\r\012    else:\r\012        return False, `\n`.join(testit)`,`\r`,char(13)),`\012`,char(10)),11,11);
INSERT INTO main_app_tasktest VALUES(9,replace(replace(`def test_function(custom_globals):\r\012    testit = []\r\012    läpäisty = True\r\012\r\012    def suorita_testi(testifunktio, virheviesti):\r\012        nonlocal läpäisty\r\012        tulos, viesti = testifunktio()\r\012        if not tulos:\r\012            läpäisty = False\r\012            testit.append(f`❌ {virheviesti}: {viesti}`)\r\012        else:\r\012            testit.append(f`✅ {virheviesti}`)\r\012\r\012    # 1. Tarkista onko aliohjelma määritelty.\r\012    suorita_testi(\r\012        lambda: (\r\012            True, ``\r\012        ) if `tulostaTervehdys` in custom_globals else (\r\012            False, `Aliohjelmaa ``tulostaTervehdys`` ei ole määritelty.`\r\012        ),\r\012        `Aliohjelman ``tulostaTervehdys`` määrittelyn tarkistus`\r\012    )\r\012\r\012    tulostaTervehdys_func = custom_globals.get(`tulostaTervehdys`, None)\r\012\r\012    # 2. Tarkista, ottaako aliohjelma yhden parametrin.\r\012    import inspect\r\012    params = inspect.signature(tulostaTervehdys_func).parameters if tulostaTervehdys_func else []\r\012    suorita_testi(\r\012        lambda: (\r\012            True, ``\r\012        ) if len(params) == 1 else (\r\012            False, `Aliohjelman ``tulostaTervehdys`` pitäisi ottaa vastaan yksi parametri.`\r\012        ),\r\012        `Aliohjelman ``tulostaTervehdys`` parametrien tarkistus`\r\012    )\r\012\r\012    # 3. Tarkista, että ``nimi`` muuttuja on määritelty.\r\012    suorita_testi(\r\012        lambda: (\r\012            True, ``\r\012        ) if `nimi` in custom_globals else (\r\012            False, `Muuttujaa ``nimi`` ei ole määritelty.`\r\012        ),\r\012        `Muuttujan ``nimi`` määrittelyn tarkistus`\r\012    )\r\012\r\012    # Tarkista funktion tulostus\r\012    try:\r\012        import io\r\012        import sys\r\012        new_stdout = io.StringIO()\r\012        old_stdout = sys.stdout\r\012        sys.stdout = new_stdout\r\012\r\012        test_nimi = `Matti`\r\012        tulostaTervehdys_func(test_nimi)\r\012\r\012        output = new_stdout.getvalue().strip()\r\012        sys.stdout = old_stdout\r\012        expected_out = f`Tervehdys, {test_nimi}!`\r\012        \r\012        def merkkijono_erot(str1, str2):\r\012            if str1 == str2:\r\012                return ``\r\012            for i, (c1, c2) in enumerate(zip(str1, str2)):\r\012                if c1 != c2:\r\012                    return f`Merkkijono eroaa kohdassa {i}: ``{c1}`` != ``{c2}```\r\012            if len(str1) < len(str2):\r\012                return f`Merkkijono eroaa lopussa: ``{str2[len(str1):]}`` ylimääräistä`\r\012            else:\r\012                return f`Merkkijono eroaa lopussa: ``{str1[len(str2):]}`` puuttuu`\r\012\r\012        suorita_testi(\r\012            lambda: (\r\012                True, ``\r\012            ) if output == expected_out else (\r\012                False, f`Aliohjelma ``tulostaTervehdys`` ei tulosta oikeaa viestiä. {merkkijono_erot(expected_out, output)}`\r\012            ),\r\012            `Aliohjelman ``tulostaTervehdys`` tulostuksen tarkistus`\r\012        )\r\012\r\012    except Exception as e:\r\012        suorita_testi(lambda: (False, str(e)), `Tarkistuksen suoritus aiheutti virheen`)\r\012\r\012    # Lopuksi palautetaan tulos:\r\012    if läpäisty:\r\012        return True, `\n`.join(testit) + `\n\nOhjelman toiminta on oikein!`\r\012    else:\r\012        return False, `\n`.join(testit)`,`\r`,char(13)),`\012`,char(10)),12,12);
INSERT INTO main_app_tasktest VALUES(10,replace(replace(`def test_function(custom_globals):\r\012    import inspect\r\012    import io\r\012    import sys\r\012\r\012    testit = []\r\012    läpäisty = True\r\012\r\012    def suorita_testi(testifunktio, virheviesti):\r\012        nonlocal läpäisty\r\012        tulos, viesti = testifunktio()\r\012        if not tulos:\r\012            läpäisty = False\r\012            testit.append(f`❌ {virheviesti}: {viesti}`)\r\012        else:\r\012            testit.append(f`✅ {virheviesti}`)\r\012\r\012    # Muuttujien tarkistukset\r\012    for muuttuja, arvo in [(`luku1`, 7), (`luku2`, 4), (`tulos`, 11)]:\r\012        suorita_testi(\r\012            lambda var=custom_globals.get(muuttuja, None), expected=arvo: \r\012            (True, ``) if var == expected else \r\012            (False, f`Muuttujan ``{muuttuja}`` arvo on {var}, mutta odotettiin arvoa {expected}.`),\r\012            f`Muuttujan ``{muuttuja}`` arvon tarkistus`\r\012        )\r\012\r\012    # laskeYhteen funktion testit\r\012    laskeYhteen_func = custom_globals.get(`laskeYhteen`, None)\r\012    if laskeYhteen_func:\r\012        params = inspect.signature(laskeYhteen_func).parameters\r\012        suorita_testi(\r\012            lambda: (\r\012                True, ``\r\012            ) if len(params) == 2 else (\r\012                False, `Funktion ``laskeYhteen`` pitäisi ottaa vastaan kaksi parametria.`\r\012            ),\r\012            `Funktion ``laskeYhteen`` parametrien tarkistus`\r\012        )\r\012        \r\012        try:\r\012            tulos = laskeYhteen_func(7, 4)\r\012            suorita_testi(\r\012                lambda: (\r\012                    True, ``\r\012                ) if tulos == 11 else (\r\012                    False, f`Funktion ``laskeYhteen`` palauttama tulos on {tulos}, mutta odotettiin arvoa 11.`\r\012                ),\r\012                `Funktion ``laskeYhteen`` toiminnan tarkistus`\r\012            )\r\012        except Exception as e:\r\012            suorita_testi(lambda: (False, str(e)), `Funktion ``laskeYhteen`` suorituksen tarkistus`)\r\012\r\012    # tulosta funktion testit\r\012    tulosta_func = custom_globals.get(`tulosta`, None)\r\012    if tulosta_func:\r\012        params = inspect.signature(tulosta_func).parameters\r\012        suorita_testi(\r\012            lambda: (\r\012                True, ``\r\012            ) if len(params) == 3 else (\r\012                False, `Aliohjelman ``tulosta`` pitäisi ottaa vastaan kolme parametria.`\r\012            ),\r\012            `Aliohjelman ``tulosta`` parametrien tarkistus`\r\012        )\r\012\r\012        try:\r\012            new_stdout = io.StringIO()\r\012            old_stdout = sys.stdout\r\012            sys.stdout = new_stdout\r\012            tulosta_func(7, 4, 11)\r\012            output = new_stdout.getvalue().strip()\r\012            sys.stdout = old_stdout\r\012            expected_out = `Lukujen ``7`` ja ``4`` summa on ``11```\r\012            suorita_testi(\r\012                lambda: (\r\012                    True, ``\r\012                ) if output == expected_out else (\r\012                    False, f`Odotettu tuloste: ``{expected_out}``, saatu tuloste: ``{output}```\r\012                ),\r\012                `Aliohjelman ``tulosta`` tulostuksen tarkistus`\r\012            )\r\012        except Exception as e:\r\012            suorita_testi(lambda: (False, str(e)), `Aliohjelman ``tulosta`` suorituksen tarkistus`)\r\012\r\012    if läpäisty:\r\012        return True, `\n`.join(testit) + `\n\nOhjelman toiminta on oikein!`\r\012    else:\r\012        return False, `\n`.join(testit)`,`\r`,char(13)),`\012`,char(10)),13,13);
INSERT INTO main_app_tasktest VALUES(11,replace(replace(`def test_function(custom_globals):\r\n    source_code = custom_globals[`_source_code`]\r\n    print(source_code)\r\n\r\n\r\n    # Tarkista, että koodissa on käytetty `print`-funktiota\r\n    if `print` not in source_code:\r\n        return False, `Koodissasi ei käytetty `print`-funktiota.`\r\n\r\n    # Tarkista, että koodissa tulostetaan `Hello, World!`\r\n    if ``print(`Hello world!`)`` not in source_code:\r\n        return False, ``Odotettiin, että koodissa olisi `print(`Hello World!`)`.``\r\n\r\n    return True, `Ohjelman toiminta on oikein!``,`\r`,char(13)),`\n`,char(10)),1,1);
INSERT INTO main_app_tasktest VALUES(12,``,NULL,1);
INSERT INTO main_app_tasktest VALUES(13,replace(replace(`def test_function(custom_globals):\r\n    # 1. Tarkista, että lista on määritelty.\r\n    if `lista` not in custom_globals:\r\n        return False, `Listaa ``lista`` ei ole määritelty.`\r\n\r\n    # 2. Tarkista, että listassa on oikeat alkiot ensimmäisessä vaiheessa.\r\n    initial_values = [5, 2, 9, 1, 7]\r\n    if custom_globals[`lista`] != initial_values:\r\n        return False, `Listan alkioita ei ole määritelty oikein.`\r\n\r\n    # 3. Tarkista, että alkio 4 on lisätty listan loppuun.\r\n    custom_globals[`lista`].append(4)\r\n    if custom_globals[`lista`] != initial_values + [4]:\r\n        return False, `Alkio 4 ei ole listan lopussa.`\r\n\r\n    # 4. Tarkista, että alkio 3 on lisätty toiseksi listassa.\r\n    custom_globals[`lista`].insert(1, 3)\r\n    if custom_globals[`lista`][1] != 3:\r\n        return False, `Alkio 3 ei ole toisena listassa.`\r\n\r\n    # 5. Tarkista, että toinen alkio on poistettu listasta.\r\n    del custom_globals[`lista`][1]\r\n    if len(custom_globals[`lista`]) != 6 or custom_globals[`lista`][1] != 2:\r\n        return False, `Toista alkiota ei ole poistettu oikein.`\r\n\r\n    # 6. Tarkista, että lista on järjestetty.\r\n    sorted_list = sorted(custom_globals[`lista`])\r\n    custom_globals[`lista`].sort()\r\n    if custom_globals[`lista`] != sorted_list:\r\n        return False, `Listaa ei ole järjestetty oikein.`\r\n\r\n    # 7. Tarkista viittaukset listan eri alkioihin.\r\n    try:\r\n        first_element = custom_globals[`lista`][0]\r\n        last_element = custom_globals[`lista`][-1]\r\n        third_element = custom_globals[`lista`][2]\r\n    except IndexError:\r\n        return False, `Listan alkioiden viittaamisessa on ongelma.`\r\n\r\n    if first_element != 1 or last_element != 9 or third_element != 5:\r\n        return False, `Listan alkioiden viittaamiset ovat väärin.`\r\n\r\n    # Jos kaikki tarkistukset menivät läpi:\r\n    return True, `Ohjelman toiminta on oikein!``,`\r`,char(13)),`\n`,char(10)),14,15);
INSERT INTO main_app_tasktest VALUES(14,replace(replace(`def test_function(custom_globals):\r\012    from io import StringIO\r\012    import sys\r\012\r\012    def list_length(lst, expected_length):\r\012        if not isinstance(lst, list):\r\012            return False, f`Odotettiin listaa, mutta saatiin: {type(lst).__name__}.`\r\012        actual_length = len(lst)\r\012        if actual_length != expected_length:\r\012            return False, f`Listan pituus on {actual_length}, mutta odotettu pituus on {expected_length}.`\r\012        return True, ``\r\012\r\012    testit = []\r\012    läpäisty = True\r\012\r\012    def suorita_testi(testifunktio, virheviesti):\r\012        nonlocal läpäisty\r\012        tulos, viesti = testifunktio()\r\012        if not tulos:\r\012            läpäisty = False\r\012            testit.append(f`❌ {virheviesti}: {viesti}`)\r\012        else:\r\012            testit.append(f`✅ {virheviesti}`)\r\012\r\012    def highlight_difference(s1, s2):\r\012        for i in range(max(len(s1), len(s2))):\r\012            c1 = s1[i] if i < len(s1) else ``\r\012            c2 = s2[i] if i < len(s2) else ``\r\012            if c1 != c2:\r\012                return s2[:i] + `🔺` + s2[i:]\r\012        return s2\r\012\r\012    # Tarkistetaan listat ja niiden sisällöt\r\012\r\012    # 1. Tarkista, että alkuperäinen lista on määritelty ja sillä on oikeat alkiot.\r\012    suorita_testi(\r\012        lambda: (\r\012            True, ``\r\012        ) if `lista` in custom_globals and custom_globals[`lista`][:6] == [1, 2, 4, 5, 7, 9] else (\r\012            False, f`Odotettu: [1, 2, 4, 5, 7, 9], Sait: {custom_globals.get(``lista``, ``lista puuttuu``)[:6]}.`\r\012        ),\r\012        `Alkuperäinen lista`\r\012    )\r\012\r\012    # 2. Tarkista, että alkuperäiseen listaan on lisätty `Maija` ja `Matti`.\r\012    suorita_testi(\r\012        lambda: (\r\012            True, ``\r\012        ) if custom_globals[`lista`][6:8] == [`Maija`, `Matti`] else (\r\012            False, `Merkkijonoja ``Maija`` ja ``Matti`` ei ole lisätty listaan oikein.`\r\012        ),\r\012        `Maija ja Matti`\r\012    )\r\012\r\012    # 3. Tarkista, että uusi lista on luotu ja sillä on oikeat alkiot.\r\012    suorita_testi(\r\012        lambda: (\r\012            True, ``\r\012        ) if `uusi_lista` in custom_globals and custom_globals[`uusi_lista`] == [10, 20, 30] else (\r\012            False, f`Odotettu: [10, 20, 30], Sait: {custom_globals.get(``uusi_lista``, ``uusi_lista puuttuu``)}.`\r\012        ),\r\012        `Uusi lista`\r\012    )\r\012\r\012    # 4. Tarkista, että uusi lista on lisätty alkuperäiseen listaan oikein.\r\012    suorita_testi(\r\012        lambda: (\r\012            True, ``\r\012        ) if custom_globals[`lista`][8:] == [[10, 20, 30]] else (\r\012            False, f`Odotettu: [[10, 20, 30]], Sait: {custom_globals.get(``lista``, ``lista puuttuu``)[8:]}.`\r\012        ),\r\012        `Uuden listan liittäminen`\r\012    )\r\012\r\012    # Suorita ohjelma ja nappaa sen tulostus\r\012    output = StringIO()\r\012    old_stdout = sys.stdout\r\012    sys.stdout = output\r\012    try:\r\012        exec(custom_globals[`_source_code`], custom_globals)\r\012    except Exception as e:\r\012        sys.stdout = old_stdout\r\012        return False, f`Koodi aiheutti virheen: {str(e)}`\r\012    sys.stdout = old_stdout\r\012    result = output.getvalue().strip()\r\012\r\012    expected_output = (\r\012        `Alkuperäinen lista: [1, 2, 4, 5, 7, 9]\n`\r\012        `Alkuperäisen listan pituus: 6\n`\r\012        `Lisätty merkkijonot ``Maija`` ja ``Matti`` listaan: [1, 2, 4, 5, 7, 9, ``Maija``, ``Matti``]\n`\r\012        `Listan pituus merkkijonojen lisäyksen jälkeen: 8\n`\r\012        `Uuden listan pituus: 3\n`\r\012        `Lisätty uusi lista alkuperäiseen listaan: [1, 2, 4, 5, 7, 9, ``Maija``, ``Matti``, [10, 20, 30]]\n`\r\012        `Listan pituus uuden listan lisäyksen jälkeen: 9`\r\012    )\r\012\r\012    if result != expected_output:\r\012        highlighted_result = highlight_difference(expected_output, result)\r\012        suorita_testi(lambda: (False, f`\n {highlighted_result}`), `Tulosteen tarkistus`)\r\012    else:\r\012        testit.append(f`✅ Tulosteen tarkistus:`)\r\012\r\012    # Lopuksi palautetaan tulos:\r\012    if läpäisty:\r\012        return True, `\n`.join(testit) + `\n\nOhjelman toiminta on oikein!`\r\012    else:\r\012        return False, `\n`.join(testit)`,`\r`,char(13)),`\012`,char(10)),15,16);
INSERT INTO main_app_tasktest VALUES(15,replace(replace(`def test_function(custom_globals):\r\012    # Määritellään odotettu matriisi:\r\012    expected_matrix = [\r\012        [2, 5, 10],\r\012        [8, 15, 8]\r\012    ]\r\012\r\012    testit = []\r\012    läpäisty = True\r\012\r\012    def suorita_testi(testifunktio, virheviesti):\r\012        nonlocal läpäisty\r\012        tulos, viesti = testifunktio()\r\012        if not tulos:\r\012            läpäisty = False\r\012            testit.append(f`❌ {virheviesti}: {viesti}`)\r\012        else:\r\012            testit.append(f`✅ {virheviesti}`)\r\012\r\012    # 1. Tarkista, että matriisi on määritelty.\r\012    suorita_testi(\r\012        lambda: (\r\012            True, ``\r\012        ) if `matriisi` in custom_globals else (\r\012            False, `Matriisia ``matriisi`` ei ole määritelty.`\r\012        ),\r\012        `Matriisin määrittelyn tarkistus`\r\012    )\r\012\r\012    # 2. Tarkista, että matriisi on oikeanlainen (2x3).\r\012    if `matriisi` in custom_globals:\r\012        matrix = custom_globals[`matriisi`]\r\012        suorita_testi(\r\012            lambda: (\r\012                True, ``\r\012            ) if len(matrix) == 2 and all(len(row) == 3 for row in matrix) else (\r\012                False, `Matriisi ei ole kokoa 2x3.`\r\012            ),\r\012            `Matriisin koon tarkistus`\r\012        )\r\012\r\012        # 3. Tarkista, että matriisin arvot ovat oikein.\r\012        suorita_testi(\r\012            lambda: (\r\012                True, ``\r\012            ) if matrix == expected_matrix else (\r\012                False, `Matriisin arvot eivät ole oikein.`\r\012            ),\r\012            `Matriisin arvojen tarkistus`\r\012        )\r\012\r\012    # Lopuksi palautetaan tulos:\r\012    if läpäisty:\r\012        return True, `\n`.join(testit) + `\n\nKaikki testit menivät läpi!`\r\012    else:\r\012        return False, `\n`.join(testit)`,`\r`,char(13)),`\012`,char(10)),16,17);
INSERT INTO main_app_tasktest VALUES(16,replace(replace(`def test_function(custom_globals):\r\012    from io import StringIO\r\012    import sys\r\012    import ast\r\012\r\012    # Alustetaan muuttujat testien tuloksille\r\012    testit = []\r\012    läpäisty = True\r\012\r\012    def suorita_testi(testifunktio, virheviesti):\r\012        nonlocal läpäisty\r\012        tulos, viesti = testifunktio()\r\012        if not tulos:\r\012            läpäisty = False\r\012            testit.append(f`❌ {virheviesti}: {viesti}`)\r\012        else:\r\012            testit.append(f`✅ {virheviesti}`)\r\012\r\012    # Tarkistetaan, että for-silmukkaa on käytetty\r\012    source_code = custom_globals[`_source_code`]\r\012    parsed_code = ast.parse(source_code)\r\012    if not any(isinstance(node, ast.For) for node in ast.walk(parsed_code)):\r\012        suorita_testi(lambda: (False, ``), `For-silmukan käytön tarkistus`)\r\012    else:\r\012        testit.append(f`✅ For-silmukan käytön tarkistus`)\r\012\r\012    # Tarkistetaan, että range-funktiota on käytetty for-silmukan yhteydessä\r\012    if not any(isinstance(node, ast.Call) and hasattr(node.func, ``id``) and node.func.id == ``range`` for node in ast.walk(parsed_code)):\r\012        suorita_testi(lambda: (False, ``), `Range-funktion käytön tarkistus`)\r\012    else:\r\012        testit.append(f`✅ Range-funktion käytön tarkistus`)\r\012\r\012    # Suorita ohjelma ja nappaa sen tulostus\r\012    output = StringIO()\r\012    old_stdout = sys.stdout\r\012    sys.stdout = output\r\012    try:\r\012        exec(source_code, custom_globals)\r\012    except Exception as e:\r\012        sys.stdout = old_stdout\r\012        return False, f`Koodi aiheutti virheen: {str(e)}`\r\012    sys.stdout = old_stdout\r\012    result = output.getvalue().strip()\r\012\r\012    # Odotettu tulostus\r\012    expected_output = `\n`.join(str(i) for i in range(11))\r\012\r\012    # Tarkistetaan, että tulostus on oikein\r\012    suorita_testi(\r\012        lambda: (\r\012            True, ``\r\012        ) if result == expected_output else (\r\012            False, f`Odotettu tulostus on väärin. Saatu: \n``{result}```\r\012        ),\r\012        `Tulostuksen tarkistus`\r\012    )\r\012\r\012    # Lopuksi palautetaan tulos:\r\012    if läpäisty:\r\012        return True, `\n`.join(testit) + `\n\nOhjelman toiminta on oikein!`\r\012    else:\r\012        return False, `\n`.join(testit)\r\012\r\012# Tässä on esimerkki siitä, miten testifunktiota voidaan käyttää:\r\012# testitulos, viesti = test_function(globals())\r\012# print(viesti)`,`\r`,char(13)),`\012`,char(10)),17,18);
INSERT INTO main_app_tasktest VALUES(17,replace(replace(`def test_function(custom_globals):\r\012    from io import StringIO\r\012    import sys\r\012    from diff_match_patch import diff_match_patch\r\012\r\012    source_code = custom_globals[`_source_code`]\r\012\r\012    if `input(` not in source_code or `print(` not in source_code:\r\012        return False, `Ohjelman pitäisi käyttää sekä `input` että `print` -funktioita.`\r\012\r\012    test_cases = [\r\012        ([`Petteri`], `Nimi oli väärin.`),\r\012        ([`Erkki`, `Kanada`], `Salasana oli väärin.`),\r\012        ([`Erkki`, `Esimerkki`], `Salasana ja nimi oli oikein!`)\r\012    ]\r\012\r\012    full_output = ``\r\012    dmp = diff_match_patch()\r\012\r\012    for i, (inputs, expected) in enumerate(test_cases):\r\012        output = StringIO()\r\012        old_stdout = sys.stdout\r\012        sys.stdout = output\r\012\r\012        try:\r\012            exec(source_code, {`input`: lambda _: inputs.pop(0)})\r\012        except Exception as e:\r\012            sys.stdout = old_stdout\r\012            return False, f`Koodi aiheutti virheen syötteellä #{i + 1}: {str(e)}`\r\012\r\012        sys.stdout = old_stdout\r\012        result = output.getvalue().strip()\r\012\r\012        if result != expected:\r\012            diffs = dmp.diff_main(expected, result)\r\012            diff_html = dmp.diff_prettyHtml(diffs)\r\012            diff_text = diff_html.replace(``<ins>``, ``→[``).replace(``</ins>``, ````).replace(``<del>``, ``←[``).replace(``</del>``, ````)\r\012            return False, f`Odottamaton tulos syötteellä #{i + 1}. Erot: \n{diff_text}`\r\012\r\012        full_output += result + `\n`\r\012\r\012    return True, full_output.strip()`,`\r`,char(13)),`\012`,char(10)),19,19);
INSERT INTO main_app_tasktest VALUES(18,replace(replace(`def test_function(custom_globals):\r\012    from io import StringIO\r\012    import sys\r\012\r\012    testit = []\r\012    läpäisty = True\r\012\r\012    def suorita_testi(testifunktio, virheviesti):\r\012        nonlocal läpäisty\r\012        tulos, viesti = testifunktio()\r\012        if not tulos:\r\012            läpäisty = False\r\012            testit.append(f`❌ {virheviesti}: {viesti}`)\r\012        else:\r\012            testit.append(f`✅ {virheviesti}`)\r\012\r\012    # 1. Tarkista, että etunimi ja sukunimi määritellään oikein.\r\012    suorita_testi(\r\012        lambda: (\r\012            True, ``\r\012        ) if `etunimi` in custom_globals and `sukunimi` in custom_globals else (\r\012            False, `Etunimi ja/tai sukunimi puuttuu.`\r\012        ),\r\012        `Etunimen ja sukunimen määrittely`\r\012    )\r\012\r\012    # 2. Tarkista, että input-funktiota on kutsuttu ja että sitä ei ole kommentoitu pois.\r\012    suorita_testi(\r\012        lambda: (\r\012            True, ``\r\012        ) if custom_globals[`_source_code`].count(`input(`) >= 2 and custom_globals[`_source_code`].count(`#input(`) == 0 else (\r\012            False, `Input-funktiota ei kutsuttu tarpeeksi monta kertaa tai se on kommentoitu pois.`\r\012        ),\r\012        `Input-funktion käyttö`\r\012    )\r\012\r\012    # Suorita ohjelma ja nappaa sen tulostus.\r\012    input_values = [`Matti`, `Meikäläinen`]\r\012    def mock_input(s):\r\012        return input_values.pop(0)\r\012    custom_globals[`input`] = mock_input\r\012\r\012    output = StringIO()\r\012    old_stdout = sys.stdout\r\012    sys.stdout = output\r\012    try:\r\012        exec(custom_globals[`_source_code`], custom_globals)\r\012    except Exception as e:\r\012        sys.stdout = old_stdout\r\012        return False, f`Koodi aiheutti virheen: {str(e)}`\r\012    sys.stdout = old_stdout\r\012    result = output.getvalue().strip()\r\012\r\012    expected_output = `Hei, Matti Meikäläinen!`\r\012\r\012    def highlight_difference(s1, s2):\r\012        for i, (c1, c2) in enumerate(zip(s1, s2)):\r\012            if c1 != c2:\r\012                return s2[:i] + `🔺` + s2[i:]\r\012        return s2\r\012\r\012    if result != expected_output:\r\012        highlighted_result = highlight_difference(expected_output, result)\r\012        suorita_testi(lambda: (False, f`Saatiin: {highlighted_result}`), `Tulosteen tarkistus`)\r\012    else:\r\012        testit.append(f`✅ Tulosteen tarkistus`)\r\012\r\012    # Lopuksi palautetaan tulos.\r\012    if läpäisty:\r\012        return True, `\n`.join(testit) + `\n\nOhjelman toiminta on oikein!`\r\012    else:\r\012        return False, `\n`.join(testit)`,`\r`,char(13)),`\012`,char(10)),3,2);
INSERT INTO main_app_tasktest VALUES(21,replace(replace(`def test_function(custom_globals):\r\012    import inspect\r\012    import io\r\012    import sys\r\012\r\012    testit = []\r\012    läpäisty = True\r\012\r\012    def suorita_testi(testifunktio, virheviesti):\r\012        nonlocal läpäisty\r\012        tulos, viesti = testifunktio()\r\012        if not tulos:\r\012            läpäisty = False\r\012            testit.append(f`❌ {virheviesti}: {viesti}`)\r\012        else:\r\012            testit.append(f`✅ {virheviesti}`)\r\012\r\012    # Aliohjelmien tarkistus\r\012    required_functions = [`laskeYhteen`, `laskeErotus`, `laskeTulo`, `laskeOsamaara`, `tulosta`, `kysyLuvut`]\r\012    for func_name in required_functions:\r\012        suorita_testi(\r\012            lambda fn=func_name, cg=custom_globals: (True, ``) if fn in cg else (False, f`Aliohjelmaa ``{fn}`` ei ole määritelty.`),\r\012            f`Aliohjelman ``{func_name}`` olemassaolon tarkistus`\r\012        )\r\012\r\012    # Tarkistetaan, käytetäänkö `input`-funktiota\r\012    if ``input`` not in custom_globals[`kysyLuvut`].__code__.co_names:\r\012        suorita_testi(\r\012            lambda: (False, `Aliohjelmassa ``kysyLuvut`` ei käytetä input-funktiota.`),\r\012            `Aliohjelman ``kysyLuvut`` input-funktion tarkistus`\r\012        )\r\012\r\012    # Laskufunktioiden testit\r\012    test_cases = [\r\012        (1.0, 2.0, 3.0, -1.0, 2.0, 0.5),\r\012        (5.0, 3.0, 8.0, 2.0, 15.0, 1.67),\r\012        (7.531, 4.87123, 12.40, 2.66, 36.69, 1.55)  # Lisätty uusi testitapaus\r\012    ]\r\012\r\012\r\012\r\012    for luku1, luku2, summa, erotus, tulo, osamaara in test_cases:\r\012        for fn, exp, desc in [\r\012            (`laskeYhteen`, summa, `summa`),\r\012            (`laskeErotus`, erotus, `erotus`),\r\012            (`laskeTulo`, tulo, `tulo`),\r\012            (`laskeOsamaara`, osamaara, `osamäärä`)\r\012        ]:\r\012            try:\r\012                result = round(custom_globals[fn](luku1, luku2), 2)\r\012                suorita_testi(\r\012                    lambda r=result, e=exp, f=fn: (True, ``) if r == e else (False, f`Funktio {f} ei anna oikeaa tulosta arvoille {luku1} ja {luku2}. Odotettu: {e}, saatu: {r}.`),\r\012                    f`Funktion ``{fn}`` {desc} tarkistus arvoille {luku1} ja {luku2}`\r\012                )\r\012            except Exception as e:\r\012                suorita_testi(lambda: (False, str(e)), f`Funktion ``{fn}`` suorituksen tarkistus`)\r\012\r\012    # Tulostusfunktion testaus\r\012    luku1, luku2 = 7.531, 4.87123\r\012    new_stdout = io.StringIO()\r\012    sys.stdout = new_stdout\r\012    custom_globals[`tulosta`](luku1, luku2)\r\012    output = new_stdout.getvalue().strip()\r\012    sys.stdout = sys.__stdout__\r\012    expected_output = (\r\012        f`Annoit luvut ``{luku1}`` ja ``{luku2}``.\n`\r\012        f`Niiden summa on ``12.40``,\n`\r\012        f`erotus on ``2.66``,\n`\r\012        f`tulo on ``36.69``\n`\r\012        f`ja osamäärä on ``1.55``.`\r\012    )\r\012    suorita_testi(\r\012        lambda out=output, exp=expected_output: (True, ``) if out == exp else (False, f`Odotettu tuloste: ``{exp}``, saatu tuloste: ``{out}```),\r\012        `Aliohjelman ``tulosta`` tulostuksen tarkistus`\r\012    )\r\012\r\012    if läpäisty:\r\012        return True, `\n`.join(testit) + `\n\nOhjelman toiminta on oikein!`\r\012    else:\r\012        return False, `\n`.join(testit)`,`\r`,char(13)),`\012`,char(10)),18,14);
INSERT INTO main_app_tasktest VALUES(22,replace(replace(`def test_function(custom_globals):\r\012    from io import StringIO\r\012    import sys\r\012\r\012    source_code = custom_globals[`_source_code`]\r\012\r\012    # Alustetaan muuttujat testien tuloksille\r\012    testit = []\r\012    läpäisty = True\r\012\r\012    def suorita_testi(testifunktio, virheviesti):\r\012        nonlocal läpäisty\r\012        tulos, viesti = testifunktio()\r\012        if not tulos:\r\012            läpäisty = False\r\012            testit.append(f`❌ {virheviesti}: {viesti}`)\r\012        else:\r\012            testit.append(f`✅ {virheviesti}`)\r\012\r\012    suorita_testi(\r\012        lambda: (\r\012            True, ``\r\012        ) if `print(` in source_code else (\r\012            False, `Ohjelman pitäisi käyttää `print`-funktiota.`\r\012        ),\r\012        `Print-funktion käytön tarkistus`\r\012    )\r\012\r\012    test_cases = [\r\012        ([`10`], `Et voi mennä kesätöihin, äänestää tai juoda väkevää alkoholia.`),\r\012        ([`14`], `Et voi mennä kesätöihin, äänestää tai juoda väkevää alkoholia.`),\r\012        ([`15`], `Voit mennä kesätöihin, mutta et voi äänestää tai juoda väkevää alkoholia.`),\r\012        ([`17`], `Voit mennä kesätöihin, mutta et voi äänestää tai juoda väkevää alkoholia.`),\r\012        ([`18`], `Voit mennä kesätöihin ja äänestää, mutta et voi juoda väkevää alkoholia.`),\r\012        ([`20`], `Voit mennä kesätöihin ja äänestää, mutta et voi juoda väkevää alkoholia.`),\r\012        ([`21`], `Voit mennä kesätöihin, äänestää ja juoda väkevää alkoholia.`),\r\012        ([`31`], `Voit mennä kesätöihin, äänestää ja juoda väkevää alkoholia.`)\r\012    ]\r\012\r\012    for i, (inputs, expected) in enumerate(test_cases):\r\012        output = StringIO()\r\012        old_stdout = sys.stdout\r\012        sys.stdout = output\r\012\r\012        try:\r\012            exec(source_code, {`input`: lambda _: inputs.pop(0)})\r\012        except Exception as e:\r\012            sys.stdout = old_stdout\r\012            suorita_testi(\r\012                lambda: (False, f`Koodi aiheutti virheen syötteellä #{i + 1}: {str(e)}`),\r\012                f`Testi #{i + 1}`\r\012            )\r\012            continue\r\012\r\012        sys.stdout = old_stdout\r\012        result = output.getvalue().strip()\r\012\r\012        suorita_testi(\r\012            lambda: (\r\012                True, ``\r\012            ) if result == expected else (\r\012                False, f`Odotettu: ``{expected}``\nSait:      ``{result}```\r\012            ),\r\012            f`Testi #{i + 1}`\r\012        )\r\012\r\012    # Lopuksi palautetaan tulos:\r\012    if läpäisty:\r\012        return True, `\n`.join(testit) + `\n\nKaikki testit menivät läpi!`\r\012    else:\r\012        return False, `\n`.join(testit)`,`\r`,char(13)),`\012`,char(10)),20,20);
INSERT INTO main_app_tasktest VALUES(23,replace(replace(`def test_function(custom_globals):\r\012    testit = []\r\012    läpäisty = True\r\012\r\012    def suorita_testi(testifunktio, virheviesti):\r\012        nonlocal läpäisty\r\012        tulos, viesti = testifunktio()\r\012        if not tulos:\r\012            läpäisty = False\r\012            testit.append(f`❌ {virheviesti}: {viesti}`)\r\012        else:\r\012            testit.append(f`✅ {virheviesti}`)\r\012\r\012    # Tarkistetaan, onko funktio määritelty\r\012    suorita_testi(\r\012        lambda: (\r\012            True, ``\r\012        ) if `kerro_kahdella` in custom_globals else (\r\012            False, `Funktio ``kerro_kahdella`` ei ole määritelty.`\r\012        ),\r\012        `Funktion määrittelyn tarkistus`\r\012    )\r\012\r\012    # Testitapaukset\r\012    test_cases = [\r\012        (5, 10),\r\012        (0, 0),\r\012        (-3, -6)\r\012    ]\r\012\r\012    # Haetaan funktio custom_globals dictionarysta\r\012    func = custom_globals.get(`kerro_kahdella`, None)\r\012\r\012    # Käydään testitapaukset läpi\r\012    for input_val, expected_output in test_cases:\r\012        suorita_testi(\r\012            lambda: (\r\012                True, ``\r\012            ) if func and func(input_val) == expected_output else (\r\012                False, f`Funktion palauttama arvo syötteellä {input_val} oli {func(input_val) if func else ``None``}, mutta odotettu arvo oli {expected_output}.`\r\012            ),\r\012            f`Testisyöte: {input_val}`\r\012        )\r\012\r\012    # Lopuksi palautetaan tulos:\r\012    if läpäisty:\r\012        return True, `\n`.join(testit) + `\n\nKaikki testit menivät läpi onnistuneesti!`\r\012    else:\r\012        return False, `\n`.join(testit)`,`\r`,char(13)),`\012`,char(10)),21,21);
INSERT INTO main_app_tasktest VALUES(24,replace(replace(`import ast\r\012\r\012def test_function(custom_globals):\r\012    from io import StringIO\r\012    import sys\r\012\r\012    testit = []\r\012    läpäisty = True\r\012\r\012    def suorita_testi(testifunktio, virheviesti):\r\012        nonlocal läpäisty\r\012        tulos, viesti = testifunktio()\r\012        if not tulos:\r\012            läpäisty = False\r\012            testit.append(f`❌ {virheviesti}: {viesti}`)\r\012        else:\r\012            testit.append(f`✅ {virheviesti}`)\r\012\r\012    source_code = custom_globals[`_source_code`]\r\012    parsed_code = ast.parse(source_code)\r\012\r\012    # Tarkista `for`-silmukan käyttö\r\012    suorita_testi(\r\012        lambda: (True, ``) if any(isinstance(node, ast.For) for node in ast.walk(parsed_code)) else (\r\012            False, `For-silmukkaa ei ole käytetty.`\r\012        ),\r\012        ``for`-silmukan käytön tarkistus`\r\012    )\r\012\r\012    # Tarkista `range`-funktion käyttö\r\012    suorita_testi(\r\012        lambda: (True, ``) if any(isinstance(child, ast.Call) and hasattr(child.func, ``id``) and child.func.id == ``range`` for child in ast.walk(parsed_code)) else (\r\012            False, ``range`-funktiota ei ole käytetty tai se ei ole määritelty oikein.`\r\012        ),\r\012        ``range`-funktion käytön tarkistus`\r\012    )\r\012\r\012    # Suorita ohjelma ja nappaa sen tulostus\r\012    output = StringIO()\r\012    old_stdout = sys.stdout\r\012    sys.stdout = output\r\012    try:\r\012        exec(source_code, custom_globals)\r\012    except Exception as e:\r\012        sys.stdout = old_stdout\r\012        return False, f`Koodi aiheutti virheen: {str(e)}`\r\012    sys.stdout = old_stdout\r\012    result = output.getvalue().strip()\r\012\r\012    expected_output = `\n`.join([f`Luvun {i} neliö on {i * i}` for i in range(10)])\r\012\r\012    # Vertaa tulostusta odotettuun\r\012    suorita_testi(\r\012        lambda: (\r\012            True, ``\r\012        ) if result == expected_output else (\r\012            False, f`Odottamaton tulos. Odotettu: ``{expected_output}``, Saatu: ``{result}```\r\012        ),\r\012        `Tulostuksen tarkistus`\r\012    )\r\012\r\012    # Lopuksi palautetaan tulos:\r\012    if läpäisty:\r\012        return True, `\n`.join(testit) + `\n\nOhjelman toiminta on oikein!`\r\012    else:\r\012        return False, `\n`.join(testit)`,`\r`,char(13)),`\012`,char(10)),22,22);
INSERT INTO main_app_tasktest VALUES(25,replace(replace(`import ast\r\012from io import StringIO\r\012import sys\r\012\r\012def test_function(custom_globals):\r\012    testit = []\r\012    läpäisty = True\r\012\r\012    def suorita_testi(testifunktio, virheviesti):\r\012        nonlocal läpäisty\r\012        tulos, viesti = testifunktio()\r\012        if not tulos:\r\012            läpäisty = False\r\012            testit.append(f`❌ {virheviesti}: {viesti}`)\r\012        else:\r\012            testit.append(f`✅ {virheviesti}`)\r\012\r\012    # Tarkista `for`-silmukan käyttö\r\012    suorita_testi(\r\012        lambda: (\r\012            True, ``\r\012        ) if any(isinstance(node, ast.For) for node in ast.walk(ast.parse(custom_globals[`_source_code`]))) else (\r\012            False, `For-silmukkaa ei ole käytetty.`\r\012        ),\r\012        `For-silmukan tarkistus`\r\012    )\r\012\r\012    # Tarkista `range`-funktion käyttö\r\012    suorita_testi(\r\012        lambda: (\r\012            True, ``\r\012        ) if any(isinstance(node, ast.Call) and hasattr(node.func, ``id``) and node.func.id == ``range`` for node in ast.walk(ast.parse(custom_globals[`_source_code`]))) else (\r\012            False, ``range`-funktiota ei ole käytetty.`\r\012        ),\r\012        ``range`-funktion tarkistus`\r\012    )\r\012\r\012    # Tarkista tulostus\r\012    expected_output = `Luku: 0\nLuku: 2\nLuku: 4\nLuku: 6\nLuku: 8`\r\012    output = StringIO()\r\012    old_stdout = sys.stdout\r\012    sys.stdout = output\r\012    try:\r\012        exec(custom_globals[`_source_code`], custom_globals)\r\012    except Exception as e:\r\012        sys.stdout = old_stdout\r\012        return False, f`Koodi aiheutti virheen: {str(e)}`\r\012    sys.stdout = old_stdout\r\012    if output.getvalue().strip() != expected_output:\r\012        suorita_testi(lambda: (False, f`Odotettu: ``{expected_output}``, Saatu: ``{output.getvalue().strip()}```), `Tulostuksen tarkistus`)\r\012    else:\r\012        testit.append(f`✅ Tulostuksen tarkistus`)\r\012\r\012    # Lopuksi palautetaan tulos:\r\012    if läpäisty:\r\012        return True, `\n`.join(testit) + `\n\nOhjelman toiminta on oikein!`\r\012    else:\r\012        return False, `\n`.join(testit)`,`\r`,char(13)),`\012`,char(10)),NULL,23);
INSERT INTO main_app_tasktest VALUES(26,replace(replace(`def test_function(custom_globals):\r\012    from io import StringIO\r\012    import sys\r\012    import ast\r\012\r\012    # Alustetaan muuttujat testien tuloksille\r\012    testit = []\r\012    läpäisty = True\r\012\r\012    def suorita_testi(testifunktio, virheviesti):\r\012        nonlocal läpäisty\r\012        tulos, viesti = testifunktio()\r\012        if not tulos:\r\012            läpäisty = False\r\012            testit.append(f`❌ {virheviesti}: {viesti}`)\r\012        else:\r\012            testit.append(f`✅ {virheviesti}`)\r\012\r\012    # Tarkistetaan, että while-silmukkaa on käytetty\r\012    source_code = custom_globals[`_source_code`]\r\012    parsed_code = ast.parse(source_code)\r\012    if not any(isinstance(node, ast.While) for node in ast.walk(parsed_code)):\r\012        suorita_testi(lambda: (False, ``), `While-silmukan käytön tarkistus`)\r\012    else:\r\012        testit.append(f`✅ While-silmukan käytön tarkistus`)\r\012\r\012    # Suorita ohjelma ja nappaa sen tulostus\r\012    output = StringIO()\r\012    old_stdout = sys.stdout\r\012    sys.stdout = output\r\012    try:\r\012        exec(source_code, custom_globals)\r\012    except Exception as e:\r\012        sys.stdout = old_stdout\r\012        return False, f`Koodi aiheutti virheen: {str(e)}`\r\012    sys.stdout = old_stdout\r\012    result = output.getvalue().strip()\r\012\r\012    # Odotettu tulostus\r\012    expected_output = `\n`.join(f`Luku: {i}` for i in range(10))\r\012\r\012    # Tarkistetaan, että tulostus on oikein\r\012    suorita_testi(\r\012        lambda: (\r\012            True, ``\r\012        ) if result == expected_output else (\r\012            False, f`Odotettu tulostus on väärin. Saatu:\n ``{result}```\r\012        ),\r\012        `Tulostuksen tarkistus`\r\012    )\r\012\r\012    # Lopuksi palautetaan tulos:\r\012    if läpäisty:\r\012        return True, `\n`.join(testit) + `\n\nOhjelman toiminta on oikein!`\r\012    else:\r\012        return False, `\n`.join(testit)\r\012\r\012# Tässä on esimerkki siitä, miten testifunktiota voidaan käyttää:\r\012# testitulos, viesti = test_function(globals())\r\012# print(viesti)`,`\r`,char(13)),`\012`,char(10)),24,24);
INSERT INTO main_app_tasktest VALUES(27,replace(replace(`import ast\r\012\r\012def contains_while(node):\r\012    if isinstance(node, ast.While):\r\012        return True\r\012    for child in ast.iter_child_nodes(node):\r\012        if contains_while(child):\r\012            return True\r\012    return False\r\012\r\012def test_function(custom_globals):\r\012    from io import StringIO\r\012    import sys\r\012\r\012    source_code = custom_globals[`_source_code`]\r\012    testit = []\r\012    läpäisty = True\r\012\r\012    def suorita_testi(testifunktio, virheviesti):\r\012        nonlocal läpäisty\r\012        tulos, viesti = testifunktio()\r\012        if not tulos:\r\012            läpäisty = False\r\012            testit.append(f`❌ {virheviesti}: {viesti}`)\r\012        else:\r\012            testit.append(f`✅ {virheviesti}`)\r\012\r\012    suorita_testi(\r\012        lambda: (\r\012            True, ``\r\012        ) if `jaa_tekijoihin` in source_code else (\r\012            False, `Funktiota ``jaa_tekijoihin`` ei ole määritelty.`\r\012        ),\r\012        `Funktion määrittelyn tarkistus`\r\012    )\r\012\r\012    parsed_code = ast.parse(source_code)\r\012    suorita_testi(\r\012        lambda: (\r\012            True, ``\r\012        ) if contains_while(parsed_code) else (\r\012            False, `While-silmukkaa ei ole käytetty.`\r\012        ),\r\012        `While-silmukan käytön tarkistus`\r\012    )\r\012\r\012    test_cases = [\r\012        ([12, 2], `12 = 2 * 2 * 3`),\r\012        ([15, 2], `15 = 3 * 5`),\r\012        ([44, 2], `44 = 2 * 2 * 11`),\r\012        ([57, 2], `57 = 3 * 19`),\r\012        ([17, 2], `17 = 17`)\r\012    ]\r\012\r\012    for i, (args, expected) in enumerate(test_cases):\r\012        output = StringIO()\r\012        old_stdout = sys.stdout\r\012        sys.stdout = output\r\012\r\012        try:\r\012            custom_globals[`jaa_tekijoihin`](*args)\r\012        except Exception as e:\r\012            sys.stdout = old_stdout\r\012            suorita_testi(\r\012                lambda: (False, f`Koodi aiheutti virheen syötteellä #{i + 1}: {str(e)}`),\r\012                f`Testi #{i + 1}`\r\012            )\r\012            continue\r\012\r\012        sys.stdout = old_stdout\r\012        result = output.getvalue().strip()\r\012\r\012        suorita_testi(\r\012            lambda: (\r\012                True, ``\r\012            ) if result == expected else (\r\012                False, f`Odottamaton tulos syötteellä #{i + 1}.\nOdotettu: ``{expected}``\nSait:      ``{result}```\r\012            ),\r\012            f`Testi #{i + 1}`\r\012        )\r\012\r\012    # Lopuksi palautetaan tulos:\r\012    if läpäisty:\r\012        return True, `\n`.join(testit) + `\n\nKaikki testit menivät läpi!`\r\012    else:\r\012        return False, `\n`.join(testit)`,`\r`,char(13)),`\012`,char(10)),25,25);
INSERT INTO main_app_tasktest VALUES(28,replace(replace(`import inspect\r\012\r\012def test_function(custom_globals):\r\012    from io import StringIO\r\012    import sys\r\012\r\012    source_code = custom_globals[`_source_code`]\r\012    testit = []\r\012    läpäisty = True\r\012\r\012    def suorita_testi(testifunktio, virheviesti):\r\012        nonlocal läpäisty\r\012        tulos, viesti = testifunktio()\r\012        if not tulos:\r\012            läpäisty = False\r\012            testit.append(f`❌ {virheviesti}: {viesti}`)\r\012        else:\r\012            testit.append(f`✅ {virheviesti}`)\r\012\r\012    suorita_testi(\r\012        lambda: (\r\012            True, ``\r\012        ) if `paasykoe_tarkistus` in custom_globals else (\r\012            False, `Funktiota `paasykoe_tarkistus` ei ole määritelty.`\r\012        ),\r\012        `Funktion määrittelyn tarkistus`\r\012    )\r\012\r\012    if `paasykoe_tarkistus` in custom_globals:\r\012        paasykoe_tarkistus_func = custom_globals[`paasykoe_tarkistus`]\r\012        params = inspect.signature(paasykoe_tarkistus_func).parameters\r\012\r\012        suorita_testi(\r\012            lambda: (\r\012                True, ``\r\012            ) if len(params) == 2 else (\r\012                False, `Funktion `paasykoe_tarkistus` pitäisi ottaa kaksi parametria.`\r\012            ),\r\012            `Parametrien määrän tarkistus`\r\012        )\r\012\r\012        suorita_testi(\r\012            lambda: (\r\012                True, ``\r\012            ) if `if ` in source_code and `elif ` in source_code and `else` in source_code else (\r\012                False, `Koodissa pitäisi käyttää `if`, `elif` ja `else` lauseita.`\r\012            ),\r\012            ``if`, `elif` ja `else` lauseiden käytön tarkistus`\r\012        )\r\012\r\012    test_cases = [\r\012        ([90, True], `Hyväksytty erinomaisin pistein!`),\r\012        ([80, True], `Hyväksytty!`),\r\012        ([82, False], `Hyväksytty!`),\r\012        ([50, False], `Hylätty!`),\r\012        ([105, True], `Virheellinen tulos!`),\r\012        ([-10, False], `Virheellinen tulos!`),\r\012        ([0, True], `Hylätty!`),\r\012        ([0, False], `Hylätty!`),\r\012        ([69, True], `Hylätty!`),\r\012        ([69, False], `Hylätty!`),\r\012        ([85, True], `Hyväksytty erinomaisin pistein!`),\r\012        ([85, False], `Hyväksytty!`),\r\012        ([100, True], `Hyväksytty erinomaisin pistein!`),\r\012        ([100, False], `Hyväksytty!`)\r\012    ]\r\012\r\012    for i, (inputs, expected) in enumerate(test_cases):\r\012        output = StringIO()\r\012        old_stdout = sys.stdout\r\012        sys.stdout = output\r\012\r\012        try:\r\012            paasykoe_tarkistus_func(*inputs)\r\012        except Exception as e:\r\012            sys.stdout = old_stdout\r\012            suorita_testi(\r\012                lambda: (False, f`Koodi aiheutti virheen syötteellä #{i + 1}: {str(e)}`),\r\012                f`Testi #{i + 1}`\r\012            )\r\012            continue\r\012\r\012        sys.stdout = old_stdout\r\012        result_lines = output.getvalue().splitlines()\r\012        result = result_lines[0] if result_lines else ``\r\012\r\012        suorita_testi(\r\012            lambda: (\r\012                True, ``\r\012            ) if result == expected else (\r\012                False, f`Odotettu: ``{expected}``\nSait:      ``{result}```\r\012            ),\r\012            f`Testi #{i + 1}`\r\012        )\r\012\r\012    # Lopuksi palautetaan tulos:\r\012    if läpäisty:\r\012        return True, `\n`.join(testit) + `\n\nKaikki testit menivät läpi!`\r\012    else:\r\012        return False, `\n`.join(testit)`,`\r`,char(13)),`\012`,char(10)),26,26);
INSERT INTO main_app_tasktest VALUES(29,replace(replace(`import inspect\r\012\r\012def test_function(custom_globals):\r\012    from io import StringIO\r\012    import sys\r\012\r\012    # Alustetaan muuttujat testien tuloksille\r\012    testit = []\r\012    läpäisty = True\r\012\r\012    def suorita_testi(testifunktio, virheviesti):\r\012        nonlocal läpäisty\r\012        tulos, viesti = testifunktio()\r\012        if not tulos:\r\012            läpäisty = False\r\012            testit.append(f`❌ {virheviesti}: {viesti}`)\r\012        else:\r\012            testit.append(f`✅ {virheviesti}`)\r\012\r\012    source_code = custom_globals[`_source_code`]\r\012\r\012    # Tarkista, että koodissa on määritelty funktio ja että siinä on oikea määrä parametreja.\r\012    suorita_testi(\r\012        lambda: (\r\012            True, ``\r\012        ) if `tehtavanTarkistus` in custom_globals else (\r\012            False, `Funktiota `tehtavanTarkistus` ei ole määritelty.`\r\012        ),\r\012        `Funktion määrittelyn tarkistus`\r\012    )\r\012\r\012    if läpäisty:\r\012        tehtavanTarkistus_func = custom_globals[`tehtavanTarkistus`]\r\012        params = inspect.signature(tehtavanTarkistus_func).parameters\r\012        suorita_testi(\r\012            lambda: (\r\012                True, ``\r\012            ) if len(params) == 2 else (\r\012                False, `Funktion `tehtavanTarkistus` pitäisi ottaa kaksi parametria.`\r\012            ),\r\012            `Parametrien määrän tarkistus`\r\012        )\r\012\r\012    suorita_testi(\r\012        lambda: (\r\012            True, ``\r\012        ) if `if ` in source_code and `elif ` in source_code and `else` in source_code else (\r\012            False, `Koodissa pitäisi käyttää `if`, `elif` ja `else` lauseita.`\r\012        ),\r\012        `Ehtolauseiden käytön tarkistus`\r\012    )\r\012\r\012    test_cases = [\r\012        ([False, False], `Ei oikeutta suorittaa tehtävää!`),\r\012        ([False, True], `Ei oikeutta suorittaa tehtävää!`),\r\012        ([True, False], `Voit suorittaa tehtävän, mutta ole varovainen!`),\r\012        ([True, True], `Voit suorittaa tehtävän!`)\r\012    ]\r\012\r\012    for i, (inputs, expected) in enumerate(test_cases):\r\012        output = StringIO()\r\012        old_stdout = sys.stdout\r\012        sys.stdout = output\r\012\r\012        try:\r\012            tehtavanTarkistus_func(*inputs)\r\012        except Exception as e:\r\012            sys.stdout = old_stdout\r\012            suorita_testi(\r\012                lambda: (False, f`Koodi aiheutti virheen syötteellä #{i + 1}: {str(e)}`),\r\012                f`Testi #{i + 1}`\r\012            )\r\012            continue\r\012\r\012        sys.stdout = old_stdout\r\012        result = output.getvalue().strip()\r\012\r\012        suorita_testi(\r\012            lambda: (\r\012                True, ``\r\012            ) if result == expected else (\r\012                False, f`Odotettu: ``{expected}``\nSait:      ``{result}```\r\012            ),\r\012            f`Testi #{i + 1}`\r\012        )\r\012\r\012    # Lopuksi palautetaan tulos:\r\012    if läpäisty:\r\012        return True, `\n`.join(testit) + `\n\nKaikki testit menivät läpi!`\r\012    else:\r\012        return False, `\n`.join(testit)`,`\r`,char(13)),`\012`,char(10)),27,27);
CREATE TABLE IF NOT EXISTS `main_app_course` (`id` integer NOT NULL PRIMARY KEY AUTO_INCREMENT, `courseTitle` varchar(200) NOT NULL, `coursePublishDate` datetime NOT NULL, `courseDescription` text NOT NULL, `creator_id` bigint NOT NULL REFERENCES `main_app_user` (`id`) , `prerequisites` text NOT NULL, `is_premium` bool NOT NULL, `courseLogo` varchar(100) NOT NULL);
INSERT INTO main_app_course VALUES(1,`Python perusteet`,`2023-09-28 18:55:26`,`Python ohejlmointikielen perusteet. Aloitetaan nollasta ja käydään kaikki tärkeimmät Pythonin aiheet läpi.`,1,`Ei esitietoja`,0,`course_logos/python_basics_2_sK5fZ8A.png`);
INSERT INTO main_app_course VALUES(2,`Olio-ohjelmointi Pythonilla`,`2023-09-28 20:26:57`,`Kursissa keskutytään Pythonin olio-ohjelmoinnin tarjoamiin ominaisuuksiin`,1,`Python peruskurssi tai vastaavat tiedot`,1,`course_logos/python_olio_ohjelmointi.png`);
INSERT INTO main_app_course VALUES(3,`Tietorakenteet ja algoritmit Pythonilla`,`2023-09-28 20:28:04`,`Tietorakenteet ja algoritmit Python ohjelmointikielellä`,1,`Ei esitietoja`,1,`course_logos/TA_Python.png`);
INSERT INTO main_app_course VALUES(4,`Koodaushaastattelutehtävät Pythonilla`,`2023-09-28 20:32:50`,`Kokoelma kaiken tasoisia ohjelmointipähkinäitä Python kielellä`,1,`Ei esitietoja`,1,`course_logos/python_interwievs.png`);
INSERT INTO main_app_course VALUES(5,`JavaScript ohjelmoinnin perusteet`,`2023-12-05 19:42:23`,`JS-kielen perusteet`,1,`Ei esitietoja`,0,`course_logos/no_logo.png`);
CREATE TABLE IF NOT EXISTS `main_app_tutorial` (`id` integer NOT NULL PRIMARY KEY AUTO_INCREMENT, `title` varchar(200) NOT NULL, `content` text NOT NULL, `video_url` varchar(200) NULL, `category_id` bigint NOT NULL REFERENCES `main_app_tutorialcategory` (`id`) , `course_id` bigint NULL REFERENCES `main_app_course` (`id`) , `description` text NOT NULL, `tutorialLogo` varchar(100) NOT NULL);
INSERT INTO main_app_tutorial VALUES(1,`Python pähkinänkuoressa`,replace(replace(`<div>\r\n<div>\r\n<div>\r\n<hr />\r\n<p><strong>Pythonin Historia</strong></p>\r\n\r\n<p>Python on yleisk&auml;ytt&ouml;inen ohjelmointikieli, jonka loi Guido van Rossum ja joka julkaistiin ensimm&auml;isen kerran vuonna 1991. Kieli oli alun perin suunniteltu lukukelpoisuuden ja selkeyden vuoksi, mik&auml; n&auml;kyy selv&auml;sti kielen syntaksissa.</p>\r\n\r\n<hr />\r\n<p><strong>Pythonin Perusasiat</strong></p>\r\n\r\n<ol>\r\n	<li><strong>Syntaksi</strong>: Pythonin syntaksi on yksinkertainen ja selke&auml;, mik&auml; tekee siit&auml; erityisen aloittelijayst&auml;v&auml;llisen.</li>\r\n	<li><strong>Dynaamisesti kirjoitettu</strong>: Tyyppitietoja ei tarvitse ilmoittaa eksplisiittisesti muuttujien yhteydess&auml;.</li>\r\n	<li><strong>Tulkattu kieli</strong>: Python-koodi ajetaan tulkilla, ei kompiloida suoraan konekoodiksi.</li>\r\n	<li><strong>Laaja standardikirjasto</strong>: Sis&auml;lt&auml;&auml; monia valmiita funktioita ja moduuleja useisiin teht&auml;viin.</li>\r\n</ol>\r\n\r\n<hr />\r\n<p><strong>Hyv&auml;t ja Huonot Puolet</strong></p>\r\n\r\n<p><strong>Hyv&auml;t puolet:</strong></p>\r\n\r\n<ol>\r\n	<li>Helppok&auml;ytt&ouml;isyys ja lukukelpoisuus.</li>\r\n	<li>Laaja yhteis&ouml; ja monipuolinen tuki.</li>\r\n	<li>Monipuoliset kirjastot ja kehikot.</li>\r\n	<li>Joustavuus (voidaan k&auml;ytt&auml;&auml; moniin eri sovelluksiin).</li>\r\n</ol>\r\n\r\n<p><strong>Huonot puolet:</strong></p>\r\n\r\n<ol>\r\n	<li>Suorituskyky ei yleens&auml; ole yht&auml; hyv&auml; kuin jotkin muut kielet (esim. C++ tai Java).</li>\r\n	<li>Dynaamisen luonteensa vuoksi se saattaa olla alttiimpi runtime-virheille.</li>\r\n	<li>Raskaampi muistin k&auml;yt&ouml;ss&auml; verrattuna jotkut muut kielet.</li>\r\n</ol>\r\n\r\n<hr />\r\n<p><strong>Tulkattavuus</strong></p>\r\n\r\n<p>Koska Python on tulkattu kieli, koodi suoritetaan suoraan ilman kompilointivaihetta. T&auml;m&auml; mahdollistaa koodin suorittamisen mink&auml; tahansa tietokoneen Python-tulkin avulla.</p>\r\n\r\n<hr />\r\n<p><strong>Versiot: Python 2 ja 3</strong></p>\r\n\r\n<p>Python 2 oli suosittu versio vuosien ajan, mutta sen virallinen tuki p&auml;&auml;ttyi vuonna 2020. Python 3, joka julkaistiin ensimm&auml;isen kerran vuonna 2008, toi mukanaan monia parannuksia ja muutoksia, mik&auml; aiheutti my&ouml;s yhteensopivuusongelmia vanhan koodin kanssa. Nyky&auml;&auml;n on suositeltavaa k&auml;ytt&auml;&auml; Python 3:a.</p>\r\n\r\n<hr />\r\n<p><strong>Muistinhallinta</strong></p>\r\n\r\n<p>Pythonissa on automaattinen roskanker&auml;&auml;j&auml;, joka vapauttaa k&auml;ytt&auml;m&auml;tt&ouml;m&auml;n muistin automaattisesti, mik&auml; helpottaa muistinhallintaa.</p>\r\n\r\n<hr />\r\n<p><strong>K&auml;ytt&ouml;kohteet</strong></p>\r\n\r\n<p><strong>Pythonia voi ja kannattaa k&auml;ytt&auml;&auml;:</strong></p>\r\n\r\n<ol>\r\n	<li>Web-sovelluskehitys (esim. Django, Flask).</li>\r\n	<li>Tiedonlouhinta ja analysointi.</li>\r\n	<li>Teko&auml;ly ja koneoppiminen (esim. TensorFlow, PyTorch).</li>\r\n	<li>Automaatio ja skriptaus.</li>\r\n	<li>Pelikehitys (esim. Pygame).</li>\r\n</ol>\r\n\r\n<p><strong>Ei suositeltavat k&auml;ytt&ouml;kohteet:</strong></p>\r\n\r\n<ol>\r\n	<li>Suorituskyky&auml; vaativat sovellukset, kuten korkean suorituskyvyn pelit.</li>\r\n	<li>J&auml;rjestelm&auml;tason ohjelmoint</li>\r\n</ol>\r\n</div>\r\n</div>\r\n</div>\r\n\r\n<p>&nbsp;<strong>Esimerkki: Yksinkertainen Python 3 Ohjelma</strong></p>\r\n\r\n<pre>\r\n<code class=`language-python`>def tervehdi(nimi):\r\n    return f`Hei, {nimi}!`\r\n\r\nif __name__ == `__main__`:\r\n    nimi = input(`Anna nimesi: `)\r\n    print(tervehdi(nimi))</code></pre>\r\n\r\n<p>Kun yll&auml; oleva ohjelma ajetaan, se pyyt&auml;&auml; k&auml;ytt&auml;j&auml;&auml; antamaan nimens&auml; ja tervehtii h&auml;nt&auml; antamallaan nimell&auml;.</p>`,`\r`,char(13)),`\n`,char(10)),NULL,1,1,replace(replace(`<p style=`text-align:center`><strong>Aiheita</strong></p>\r\n\r\n<ul>\r\n	<li>Kielen Historia</li>\r\n	<li>Kielen ominaisuudet</li>\r\n	<li>Hyv&auml;t ja huonot puolet</li>\r\n	<li>Millaisiin projekteihin sopii</li>\r\n</ul>`,`\r`,char(13)),`\n`,char(10)),`tuto_logos/python_basics_2.png`);
INSERT INTO main_app_tutorial VALUES(2,`Python Ohjelman Rakenne ja muuttujat`,replace(replace(`<p><strong>Koodin Sisent&auml;minen</strong></p>\r\n\r\n<p>Pythonissa koodin sisent&auml;minen ei ole vain esteettinen valinta, vaan sill&auml; on syntaktinen merkitys. Toisin kuin monet muut kielet, joissa lohkot (kuten if-lausekkeet tai funktiot) merkit&auml;&auml;n aaltosulkeilla <code>{}</code>, Pythonissa ne m&auml;&auml;ritell&auml;&auml;n sisennyksen avulla.</p>\r\n\r\n<ul>\r\n	<li>Oikea sisent&auml;minen on v&auml;ltt&auml;m&auml;t&ouml;nt&auml; koodin toimivuudelle.</li>\r\n	<li>Yleisesti ottaen yksi sisennystaso on 4 v&auml;lily&ouml;nti&auml; (tai yksi sarkain/tabulaattori, mutta 4 v&auml;lily&ouml;nti&auml; on suositeltavampi).</li>\r\n</ul>\r\n\r\n<p>Esimerkki:</p>\r\n\r\n<pre>\r\n<code class=`language-python`>def funktio():\r\n    if True:\r\n        print(`Sisentäminen on tärkeää!`)\r\n</code></pre>\r\n\r\n<p><strong>Kommentointi</strong></p>\r\n\r\n<p>Kommentit ovat koodin osia, joita ei suoriteta. Ne ovat t&auml;rkeit&auml;, koska ne auttavat selitt&auml;m&auml;&auml;n koodin toimintaa ja tarkoitusta muille kehitt&auml;jille (tai itsellesi tulevaisuudessa).</p>\r\n\r\n<ul>\r\n	<li>Yksiriviset kommentit alkavat <code>#</code>-merkill&auml;.</li>\r\n</ul>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<pre>\r\n<code class=`language-python`># Tämä on kommentti\r\nprint(`Tämä ei ole kommentti`)  # Tämä on myös kommentti\r\n</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<ul>\r\n	<li>&nbsp;Moniriviset kommentit tai dokumentointikommentit k&auml;ytt&auml;v&auml;t kolmoishipsuja (<code>&quot;&quot;&quot;</code> tai <code>&#39;&#39;&#39;</code>).</li>\r\n</ul>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<pre>\r\n<code class=`language-python`>```\r\nTämä on monirivinen kommentti\r\ntai dokumentointikommentti.\r\n```\r\nprint(`Hei maailma!`)\r\n</code></pre>\r\n\r\n<p><strong>Muuttujat</strong></p>\r\n\r\n<div>\r\n<div>\r\n<div>\r\n<p>Muuttujat ovat ohjelmoinnin peruselementtej&auml;, ja niill&auml; on monia t&auml;rkeit&auml; teht&auml;vi&auml; ja etuja:</p>\r\n\r\n<ol>\r\n	<li>\r\n	<p><strong>Tiedon tallentaminen</strong>: Muuttujat mahdollistavat tietojen tallentamisen v&auml;liaikaisesti, jotta niit&auml; voidaan k&auml;ytt&auml;&auml; ja k&auml;sitell&auml; ohjelman suorituksen aikana.</p>\r\n	</li>\r\n	<li>\r\n	<p><strong>Lue ja kirjoita</strong>: Muuttujien avulla ohjelmat voivat tallentaa, lukea ja p&auml;ivitt&auml;&auml; tietoa dynaamisesti.</p>\r\n	</li>\r\n	<li>\r\n	<p><strong>Koodin selkeys</strong>: Muuttujat tekev&auml;t koodista luettavampaa. Esimerkiksi, <code>palkka * 0.2</code> ei v&auml;ltt&auml;m&auml;tt&auml; kerro paljon, mutta jos meill&auml; on muuttuja <code>veroaste</code>, joka on m&auml;&auml;ritelty arvoksi <code>0.2</code>, lauseke <code>palkka * veroaste</code> on paljon selke&auml;mpi.</p>\r\n	</li>\r\n	<li>\r\n	<p><strong>Uudelleenk&auml;ytett&auml;vyys</strong>: Muuttujat tekev&auml;t koodista modulaarista ja helposti uudelleenk&auml;ytett&auml;v&auml;&auml;. Jos tarvitset samaa arvoa monessa paikassa ohjelmassasi, muuttujien avulla voit m&auml;&auml;ritt&auml;&auml; arvon vain kerran ja k&auml;ytt&auml;&auml; sit&auml; monta kertaa.</p>\r\n	</li>\r\n	<li>\r\n	<p><strong>Joustavuus</strong>: Oletetaan, ett&auml; k&auml;yt&auml;t samaa arvoa monessa paikassa koodissasi. Jos haluat my&ouml;hemmin muuttaa t&auml;t&auml; arvoa, sinun t&auml;ytyisi muuttaa sit&auml; jokaisessa paikassa erikseen. Mutta jos k&auml;yt&auml;t muuttujaa, sinun tarvitsee muuttaa arvoa vain kerran muuttujan m&auml;&auml;ritelm&auml;ss&auml;.</p>\r\n	</li>\r\n	<li>\r\n	<p><strong>Abstraktio</strong>: Muuttujat mahdollistavat abstraktion, mik&auml; tarkoittaa, ett&auml; voimme k&auml;sitell&auml; monimutkaisia tietoja yksinkertaisemmin. Esimerkiksi, listamuuttuja voi sis&auml;lt&auml;&auml; tuhansia numeroita, mutta voimme k&auml;sitell&auml; sit&auml; yksinkertaisesti yhdell&auml; nimell&auml;.</p>\r\n	</li>\r\n	<li>\r\n	<p><strong>Algoritmien toteutus</strong>: Monet algoritmit vaativat tilap&auml;isen tallennustilan toimiakseen. Muuttujat tarjoavat t&auml;t&auml; tilaa.</p>\r\n	</li>\r\n	<li>\r\n	<p><strong>Tilanhallinta</strong>: Erityisesti iteratiivisissa ja toistuvissa prosesseissa muuttujat voivat toimia laskureina, pohjina, tilastatusmuuttujina jne.</p>\r\n	</li>\r\n	<li>\r\n	<p><strong>Interaktiivisuus</strong>: Muuttujat mahdollistavat ohjelmien vuorovaikutuksen k&auml;ytt&auml;jien kanssa. K&auml;ytt&auml;j&auml; voi sy&ouml;tt&auml;&auml; tietoja, jotka tallennetaan muuttujiin ja joita ohjelma voi k&auml;ytt&auml;&auml; my&ouml;hemmin.</p>\r\n	</li>\r\n</ol>\r\n\r\n<p>Lyhyesti sanottuna, ilman muuttujia monimutkainen datan k&auml;sittely ja logiikan toteuttaminen olisi k&auml;yt&auml;nn&ouml;ss&auml; mahdotonta. Muuttujat tekev&auml;t koodista joustavaa, modulaarista ja ymm&auml;rrett&auml;v&auml;&auml;.</p>\r\n</div>\r\n</div>\r\n</div>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Muuttujan m&auml;&auml;rittely</strong></p>\r\n\r\n<p>Muuttujan m&auml;&auml;rittelyss&auml; annetaan arvo muuttujan nimelle. Pythonissa ei tarvitse erikseen ilmoittaa muuttujan tyyppi&auml; (kuten joissakin muissa kieliss&auml;), koska Python on dynaamisesti tyypitetty kieli.</p>\r\n\r\n<pre>\r\n<code class=`language-python`>nimi = `Anna`\r\nikä = 30\r\npaino = 68.5\r\non_naimisissa = False\r\n</code></pre>\r\n\r\n<p>T&auml;ss&auml; <code>nimi</code> on merkkijonotyyppi&auml; (<code>str</code>), <code>ik&auml;</code> on kokonaislukutyyppi&auml; (<code>int</code>), <code>paino</code> on liukulukutyyppi&auml; (<code>float</code>) ja <code>on_naimisissa</code> on totuusarvotyyppi&auml; (<code>bool</code>).</p>\r\n\r\n<p><strong>Muuttujan nime&auml;minen</strong></p>\r\n\r\n<p>Pythonissa on tiettyj&auml; s&auml;&auml;nt&ouml;j&auml; ja k&auml;yt&auml;nt&ouml;j&auml; muuttujien nime&auml;miseen:</p>\r\n\r\n<ol>\r\n	<li>Muuttujan nimi alkaa kirjaimella (a-z, A-Z) tai alaviivalla (_), mutta ei numerolla.</li>\r\n	<li>Muuttujan nimi voi sis&auml;lt&auml;&auml; kirjaimia, numeroita ja alaviivoja.</li>\r\n	<li>Nimet ovat kirjainkoosta riippuvaisia: <code>muuttuja</code>, <code>Muuttuja</code>, ja <code>MUUTTUJA</code> ovat eri muuttujia.</li>\r\n	<li>Yleinen k&auml;yt&auml;nt&ouml; on k&auml;ytt&auml;&auml; pieni&auml; kirjaimia ja erottaa sanat alaviivoilla, esim. <code>minun_muuttujani</code>.</li>\r\n</ol>\r\n\r\n<p><strong>Dynaaminen tyypitys</strong></p>\r\n\r\n<p>Pythonissa muuttujan tyyppi m&auml;&auml;r&auml;ytyy automaattisesti sen arvon perusteella. T&auml;m&auml; tarkoittaa my&ouml;s, ett&auml; muuttujan tyyppi voi muuttua ohjelman suorituksen aikana:</p>\r\n\r\n<pre>\r\n<code class=`language-python`>x = 5       # x on nyt int-tyyppiä\r\nx = `Anna`  # x on nyt str-tyyppiä\r\n</code></pre>\r\n\r\n<p><strong>Muuttujien arvojen vaihto</strong></p>\r\n\r\n<p>Pythonissa voit vaihtaa kahden muuttujan arvot ilman v&auml;liaikaista muuttujaa:</p>\r\n\r\n<pre>\r\n<code class=`language-python`>a = 5\r\nb = 10\r\na, b = b, a  # nyt a on 10 ja b on 5\r\n</code></pre>\r\n\r\n<p><strong>Aliohjelmat</strong></p>\r\n\r\n<p>Aliohjelmat ovat koodin osia, jotka voivat suorittaa m&auml;&auml;ritellyn toiminnon. Pythonissa funktiot ovat yleisimpi&auml; aliohjelmia.</p>\r\n\r\n<ul>\r\n	<li>Funktio m&auml;&auml;ritell&auml;&auml;n <code>def</code>-avainsanalla.</li>\r\n</ul>\r\n\r\n<p>Esimerkki:</p>\r\n\r\n<pre>\r\n<code class=`language-python`>def tervehdi(nimi):\r\n    ```Tämä funktio tervehtii antamallasi nimellä.```\r\n    print(f`Hei, {nimi}!`)\r\n</code></pre>\r\n\r\n<ul>\r\n	<li>Funktiokutsussa voit kutsua m&auml;&auml;ritelty&auml; funktiota.</li>\r\n</ul>\r\n\r\n<pre>\r\n<code class=`language-python`>tervehdi(`Anna`)\r\n</code></pre>\r\n\r\n<h3>&nbsp;</h3>\r\n\r\n<h3><strong>Globaalit ja lokaalit muuttujat Pythonissa </strong></h3>\r\n\r\n<p>Pythonissa muuttujilla voi olla joko globaali tai lokaali toiminta-alue riippuen siit&auml;, miss&auml; ne on m&auml;&auml;ritelty.</p>\r\n\r\n<p><strong>Lokaalit Muuttujat</strong>:</p>\r\n\r\n<p>Esimerkki:</p>\r\n\r\n<div>\r\n<div>\r\n<pre>\r\n<code class=`language-python`>def esimerkki_funktio(): \r\n    lokaali_muuttuja = `Olen lokaali muuttuja` \r\n    print(lokaali_muuttuja) \r\n\r\nesimerkki_funktio() # Tulostaa: Olen lokaali muuttuja </code></pre>\r\n\r\n<p>&nbsp;</p>\r\n</div>\r\n</div>\r\n\r\n<ul>\r\n	<li>Lokaali muuttuja on muuttuja, joka on m&auml;&auml;ritelty funktion tai muun lohkon sis&auml;ll&auml; sis&auml;ll&auml;.</li>\r\n	<li>Sit&auml; voidaan k&auml;ytt&auml;&auml; vain sen m&auml;&auml;rittelem&auml;ss&auml; lohkossa</li>\r\n	<li>Se on n&auml;kym&auml;t&ouml;n muille lohkoille, eik&auml; se vaikuta muihin samannimisiin muuttujiin ohjelman muissa osissa.</li>\r\n</ul>\r\n\r\n<p><strong>Globaalit Muuttujat</strong>:</p>\r\n\r\n<p>Esimerkki:</p>\r\n\r\n<pre>\r\n<code class=`language-python`>globaali_muuttuja = `Olen globaali muuttuja` \r\n\r\ndef esimerkki_funktio(): \r\n    global globaali_muuttuja \r\n    globaali_muuttuja = `Olen muokattu globaali muuttuja` \r\n    print(globaali_muuttuja) \r\n\r\nesimerkki_funktio() # Tulostaa: Olen muokattu globaali muuttuja \r\n\r\nprint(globaali_muuttuja) # Tulostaa myös: Olen muokattu globaali muuttuja </code></pre>\r\n\r\n<ul>\r\n	<li>Globaali muuttuja on muuttuja, joka on m&auml;&auml;ritelty funktion ulkopuolella.</li>\r\n	<li>Se on n&auml;kyviss&auml; ja saatavilla koko ohjelman laajuudessa.</li>\r\n	<li>Voit k&auml;ytt&auml;&auml; <code>global</code> avainsanaa sis&auml;ll&auml; funktiota viittaamaan globaaliin muuttujaan sen sijaan, ett&auml; luot uuden lokaalin muuttujan.</li>\r\n</ul>\r\n\r\n<p><strong>Huomioita</strong>:</p>\r\n\r\n<ul>\r\n	<li>K&auml;yt&auml; lokaaleja muuttujia, kun tarvitset v&auml;liaikaista tallennustilaa tai haluat varmistaa, ettei muuttuja vaikuta muihin ohjelman osiin.</li>\r\n	<li>Globaalien muuttujien liiallinen k&auml;ytt&ouml; voi tehd&auml; koodista sekavaa ja vaikeasti hallittavaa, koska niit&auml; voi muokata mist&auml; tahansa ohjelman osasta. K&auml;yt&auml; niit&auml; harkiten ja v&auml;lt&auml;, kun mahdollista.</li>\r\n</ul>\r\n\r\n<h3><strong><code>global</code>-avainsana Pythonissa</strong></h3>\r\n\r\n<p>Kun ty&ouml;skentelet funktion sis&auml;ll&auml; ja haluat viitata tai muokata globaalia muuttujaa (eik&auml; luoda uutta lokaalia muuttujaa), voit k&auml;ytt&auml;&auml; <code>global</code>-avainsanaa.</p>\r\n\r\n<p><strong>K&auml;ytt&ouml;</strong>: Jos haluat muokata globaalia muuttujaa funktion sis&auml;ll&auml;, sinun tulee ensin ilmoittaa se <code>global</code>-avainsanalla. Muuten Python luo lokaalin muuttujan, jolla on sama nimi.</p>\r\n\r\n<pre>\r\n<code class=`language-python`>x = 10  # Globaali muuttuja\r\n\r\ndef muuta_arvoa():\r\n    global x\r\n    x = 20\r\n\r\nmuuta_arvoa()\r\nprint(x)  # Tulostaa: 20\r\n</code></pre>\r\n\r\n<p>Jos <code>global</code>-avainsanaa ei olisi k&auml;ytetty edell&auml;, <code>muuta_arvoa</code> -funktio olisi luonut uuden lokaalin muuttujan nimelt&auml; <code>x</code> sen sijaan, ett&auml; se olisi muuttanut globaalin <code>x</code> arvoa.</p>\r\n\r\n<p><strong>Varovaisuus</strong>: Vaikka <code>global</code>-avainsana voi olla hy&ouml;dyllinen tietyiss&auml; tilanteissa, sen liiallista k&auml;ytt&ouml;&auml; tulisi v&auml;ltt&auml;&auml;. Kun ohjelma kasvaa, liiallinen globaalien muuttujien k&auml;ytt&ouml; ja muokkaus voi tehd&auml; koodista sekavaa ja aiheuttaa odottamattomia sivuvaikutuksia.</p>\r\n\r\n<p><strong>Suositus</strong>: Usein on parempi v&auml;litt&auml;&auml; muuttujat funktioille parametreina ja palauttaa uudet arvot funktioista, sen sijaan ett&auml; k&auml;ytt&auml;isit globaaleja muuttujia. T&auml;m&auml; tekee koodista ennakoitavampaa ja helpommin yll&auml;pidett&auml;v&auml;&auml;.</p>\r\n\r\n<p><strong>pass-avainsana </strong></p>\r\n\r\n<p><code>pass</code> on erityinen avainsana Pythonissa, jota k&auml;ytet&auml;&auml;n syntaktisena paikkat&auml;ytteen&auml;. Se tarkoittaa kirjaimellisesti &quot;tee ei mit&auml;&auml;n&quot;. Se on hy&ouml;dyllinen, kun sinulla on lohko, joka vaatii syntaktisesti jonkin sis&auml;ll&ouml;n, mutta et halua tehd&auml; mit&auml;&auml;n kyseisess&auml; lohkossa (ainakaan viel&auml;).</p>\r\n\r\n<p>T&auml;ss&auml; on muutamia esimerkkitilanteita, joissa <code>pass</code> voi olla hy&ouml;dyllinen:</p>\r\n\r\n<ul>\r\n	<li><strong>Prototyyppien luonnissa</strong>: Kun aloitat uuden funktion, mutta et ole viel&auml; valmis kirjoittamaan sen toteutusta:&nbsp;</li>\r\n</ul>\r\n\r\n<pre>\r\n<code class=`language-python`>def uusi_funktio():\r\n    pass\r\n</code></pre>\r\n\r\n<ul>\r\n	<li><strong>Luokissa</strong>: Kun m&auml;&auml;rit&auml;t uuden luokan, mutta et ole viel&auml; lis&auml;nnyt siihen metodeita:</li>\r\n</ul>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<pre>\r\n<code class=`language-python`>class UusiLuokka:\r\n    pass\r\n</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<ul>\r\n	<li><strong>Ehtolausekkeissa</strong>: Kun haluat j&auml;tt&auml;&auml; jonkin ehtolausekkeen osan tyhj&auml;ksi:&nbsp;</li>\r\n</ul>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<pre>\r\n<code class=`language-python`>if ehto:\r\n    pass\r\nelse:\r\n    print(`Ehto ei täyttynyt`)\r\n</code></pre>\r\n\r\n<p>&nbsp;T&auml;ss&auml; <code>pass</code> sallii <code>if</code>-lohkon olemassaolon ilman, ett&auml; se tekee mit&auml;&auml;n.</p>\r\n\r\n<p>Yhteenvetona: <strong><code>pass</code> </strong>on hy&ouml;dyllinen, kun tarvitset &quot;tyhj&auml;n&quot; lohkon koodissasi, joka ei tee mit&auml;&auml;n. Se on erityisen hy&ouml;dyllinen kehityksen varhaisissa vaiheissa, kun suunnittelet koodisi rakennetta.</p>\r\n\r\n<p>Luokiin ja ehtolauseisiin palataan my&ouml;hemmin. &Auml;lk&auml;&auml; pel&auml;styk&ouml; vaikka ette ymm&auml;rt&auml;neetk&auml;&auml;n.</p>\r\n\r\n<ol>\r\n</ol>\r\n\r\n<p><strong>Milt&auml; Python Ohjelma N&auml;ytt&auml;&auml;?</strong></p>\r\n\r\n<p>Python-ohjelman perusrakenne n&auml;ytt&auml;&auml; esimerkiksi t&auml;lt&auml;:</p>\r\n\r\n<pre>\r\n<code class=`language-python`># Tämä on yläosan kommentti, joka selittää ohjelman tarkoitusta\r\n\r\ndef funktio1():\r\n    ```Funktion 1 kuvaus```\r\n    pass\r\n\r\ndef funktio2(parametri1, parametri2):\r\n    ```Funktion 2 kuvaus```\r\n    pass\r\n\r\nif __name__ == `__main__`:\r\n    # Ohjelman suoritus alkaa tästä\r\n    funktio1()\r\n    funktio2(`arvo1`, `arvo2`)\r\n</code></pre>\r\n\r\n<p>&nbsp;</p>`,`\r`,char(13)),`\n`,char(10)),NULL,1,1,replace(replace(`<p style=`text-align:center`><strong>Aiheita</strong></p>\r\n\r\n<ul>\r\n	<li>Sisent&auml;minen</li>\r\n	<li>Kommentointi</li>\r\n	<li>Muuttujat</li>\r\n	<li>Aliohjelmat</li>\r\n	<li>Globaalit ja lokaalit muuttujat</li>\r\n	<li>pass-sana</li>\r\n</ul>`,`\r`,char(13)),`\n`,char(10)),`tuto_logos/python_basics_2_rvxOXyn.png`);
INSERT INTO main_app_tutorial VALUES(3,`Tulostus ja Tiedon Kysyminen`,replace(replace(`<p>Pythonissa <code>print</code>-funktio on perusty&ouml;kalu tiedon tulostamiseen konsoliin.</p>\r\n\r\n<p><strong>1. Yhden ja usean rivin tulostus:</strong></p>\r\n\r\n<pre>\r\n<code class=`language-python`>print(`Tämä on yhden rivin tulostus.`)\r\n\r\n# Usean rivin tulostus\r\nprint(```Tämä on\r\nusean rivin\r\ntulostus.```)\r\n</code></pre>\r\n\r\n<p>Kuten esimerkiss&auml; huomataan yhden rivin tulostus merkit&auml;&auml;n lainaiusmerkeill&auml;. Usean rivin tulostus merkit&auml;&auml;n kolmella lainausmerkill&auml;. Samalla tavalla kuten usean rivin kommentti.</p>\r\n\r\n<p><strong>2. &quot;-merkin ja &#39;-merkin erot ja k&auml;ytt&ouml;:</strong></p>\r\n\r\n<p>Voit k&auml;ytt&auml;&auml; joko yksitt&auml;isi&auml; (&#39; &#39;) tai kaksois (&quot;- &quot;) lainausmerkkej&auml; merkkijonojen ymp&auml;rill&auml; Pythonissa. Jos merkkijonosi sis&auml;lt&auml;&auml; yksitt&auml;isen lainausmerkin, voit kiert&auml;&auml; ongelman k&auml;ytt&auml;m&auml;ll&auml; kaksois lainausmerkkej&auml;, ja p&auml;invastoin.</p>\r\n\r\n<pre>\r\n<code class=`language-python`>print(`Tämä on ``lainausmerkeissä`` oleva sana.`)\r\nprint(``Tämä on `lainausmerkeissä` oleva sana.``)\r\n</code></pre>\r\n\r\n<p><strong>3. Muuttujien lis&auml;&auml;minen tulostukseen <code>+</code> ja <code>,</code> merkill&auml;:</strong></p>\r\n\r\n<p>Pythonissa muuttujat voidaan lis&auml;t&auml; merkkijonoihin k&auml;ytt&auml;en <strong>+</strong> tai <strong>, </strong>merkki&auml;.</p>\r\n\r\n<pre>\r\n<code class=`language-python`>nimi = `Anna`\r\n\r\n# Käyttämällä + -merkkiä (muuttuja on oltava merkkijono)\r\nprint(`Hei, ` + nimi + `!`)\r\n\r\n# Käyttämällä , -merkkiä (muuttuja voi olla minkä tahansa tyyppinen)\r\nluku = 3\r\nprint(`Suosikkinumerosi on`, luku)\r\n</code></pre>\r\n\r\n<p>K&auml;yt&ouml;ss&auml; on kuitenkin jotain eroja. Kun k&auml;ytet&auml;&auml;n <code>+</code>-merkki&auml; yhdist&auml;m&auml;&auml;n merkkijonot, kaikkien yhdistett&auml;vien osien tulee olla merkkijonoja. Jos haluat yhdist&auml;&auml; numeron (kokonaisluku, liukuluku jne.) merkkijonoon, sinun on ensin muunnettava numero merkkijonoksi <code>str()</code>-funktiolla. Pilkkua k&auml;yttet&auml;ess&auml; t&auml;t&auml; muunosta ei tarvitse tehd&auml;.</p>\r\n\r\n<p>Esimerkki:</p>\r\n\r\n<pre>\r\n<code class=`language-python`>luku = 5\r\nprint(`Arvoksi saatiin: ` + str(luku)) # +-merkkiä käytettäessä luku muutetaan merkkijonoksi\r\n\r\nprint(`Arvoksi saatiin:`, luku) # käytetään pilkua str-funktiota ei tarvita \r\n</code></pre>\r\n\r\n<p>Toinen muistettava asia on, ett&auml; kun k&auml;ytet&auml;&auml;n <code>,</code>-merkki&auml; <code>print</code>-funktion sis&auml;ll&auml; erottamaan arvoja, Python lis&auml;&auml; automaattisesti v&auml;lily&ouml;nnin niiden arvojen v&auml;lille.</p>\r\n\r\n<p>Esimerkki:</p>\r\n\r\n<pre>\r\n<code class=`language-python`>nimi = `Anna`\r\nikä = 30\r\nprint(`Nimi:`, nimi, `Ikä:`, ikä) #,-merkkilisää välilyönnin \r\nprint(`Nimi: `+ nimi+ ` Ikä: `+ ikä) # välilyönnin joutuu lisäämään käsin \r\n</code></pre>\r\n\r\n<p><strong>4. <code>print</code>-funktio ja f-string:</strong></p>\r\n\r\n<p>F-string (format string) on Python 3.6:ssa ja sit&auml; uudemmissa versioissa k&auml;ytett&auml;v&auml; tapa muotoilla merkkijonoja. Se on eritt&auml;in k&auml;tev&auml; ja tehokas.</p>\r\n\r\n<p>Esimerkki:</p>\r\n\r\n<pre>\r\n<code class=`language-python`>ikä = 30\r\nprint(f`Sinun ikäsi on {ikä} vuotta.`)\r\n</code></pre>\r\n\r\n<p><strong>5. Tulostuksen muotoilu:</strong></p>\r\n\r\n<p>Voit m&auml;&auml;ritt&auml;&auml;, kuinka muuttujat n&auml;ytet&auml;&auml;n tulostuksessa:</p>\r\n\r\n<pre>\r\n<code class=`language-python`># Kaksi desimaalia\r\nluku = 3.14159\r\nprint(f`Pi on noin {luku:.2f}.`)\r\n</code></pre>\r\n\r\n<p>Pythonissa f-stringien avulla voidaan muotoilla merkkijonojen tulostusta. Muotoilu tehd&auml;&auml;n m&auml;&auml;ritt&auml;m&auml;ll&auml; haluttu formaatti aaltosulkeiden <code>{}</code> sis&auml;ll&auml;, joissa normaalisti ilmoitetaan muuttuja, jonka arvon haluat tulostaa.</p>\r\n\r\n<p>Muotoilukoodissa:</p>\r\n\r\n<ul>\r\n	<li><code>:</code> aloittaa muotoilus&auml;&auml;nn&ouml;t.</li>\r\n	<li><code>.2</code> m&auml;&auml;r&auml;&auml;, ett&auml; tulostetaan kaksi desimaalia.</li>\r\n	<li><code>f</code> tarkoittaa, ett&auml; tulostettava arvo on liukuluku (floating point).</li>\r\n</ul>\r\n\r\n<p>Yhdistettyn&auml;: <code>{luku:.2f}</code> tulostaa muuttujan <code>luku</code> arvon kahdella desimaalilla.</p>\r\n\r\n<p>Muutamia muita esimerkkej&auml;:</p>\r\n\r\n<p><strong>Kokonaislukujen muotoilu</strong>:</p>\r\n\r\n<p>Jos haluat tulostaa kokonaisluvun tietyll&auml; m&auml;&auml;r&auml;ll&auml; nollia edell&auml;:</p>\r\n\r\n<pre>\r\n<code class=`language-python`>numero = 5\r\nprint(f`{numero:04}`)  # tulostaa `0005`\r\n</code></pre>\r\n\r\n<p>&nbsp;<strong>Prosenttimuotoilu</strong>:</p>\r\n\r\n<p>Voit tulostaa luvun prosentteina:</p>\r\n\r\n<pre>\r\n<code class=`language-python`>osuus = 0.45\r\nprint(f`{osuus:.2%}`)  # tulostaa `45.00%`\r\n</code></pre>\r\n\r\n<p><strong>Tasaus</strong>:</p>\r\n\r\n<p>Jos haluat, ett&auml; merkkijono tulostuu tietyll&auml; leveydell&auml; ja on tasattu tietyll&auml; tavalla:</p>\r\n\r\n<pre>\r\n<code class=`language-python`>nimi = `Anna`\r\nprint(f`{nimi:&lt;10}`)  # vasemmalle tasaus, tulostaa `Anna      `\r\nprint(f`{nimi:&gt;10}`)  # oikealle tasaus, tulostaa `      Anna`\r\nprint(f`{nimi:^10}`)  # keskitasaus, tulostaa `   Anna   `\r\n</code></pre>\r\n\r\n<p><strong>Format-funktion k&auml;ytt&ouml; </strong></p>\r\n\r\n<p>Ennen f-stringien esittely&auml; Python 3.6:ssa, <code>.format()</code>-metodi oli suosittu tapa muotoilla merkkijonoja Pythonissa. Vaikka f-stringit ovat nykyaikaisempia ja usein lyhyempi&auml; kirjoittaa, <code>.format()</code> on edelleen voimakas ty&ouml;kalu ja sit&auml; k&auml;ytet&auml;&auml;n monissa vanhemmissa Python-sovelluksissa.</p>\r\n\r\n<p><strong>Perusk&auml;ytt&ouml;</strong></p>\r\n\r\n<p>K&auml;yt&auml;t aaltosulkeita <code>{}</code> merkitsem&auml;&auml;n paikkoja, joihin haluat sijoittaa <code>.format()</code>-metodin argumentteja:</p>\r\n\r\n<pre>\r\n<code class=`language-python`>tervehdys = `Hei, {}!`.format(`Anna`)\r\nprint(tervehdys)  # Tulostaa: `Hei, Anna!`\r\n</code></pre>\r\n\r\n<p><strong>Indeksin k&auml;ytt&ouml;</strong></p>\r\n\r\n<p>Voit k&auml;ytt&auml;&auml; indeksej&auml; m&auml;&auml;ritt&auml;m&auml;&auml;n, mihin j&auml;rjestykseen argumentit sijoitetaan:</p>\r\n\r\n<pre>\r\n<code class=`language-python`>teksti = `{1} on {0}.`.format(`maailma`, `Tämä`)\r\nprint(teksti)  # Tulostaa: `Tämä on maailma.`\r\n</code></pre>\r\n\r\n<p><strong>Avainsanat</strong></p>\r\n\r\n<p>Voit my&ouml;s k&auml;ytt&auml;&auml; avainsanoja m&auml;&auml;ritt&auml;m&auml;&auml;n, mit&auml; argumenttia k&auml;ytet&auml;&auml;n:</p>\r\n\r\n<pre>\r\n<code class=`language-python`>teksti = `{adjektiivi} {substantiivi}.`.format(substantiivi=`koti`, adjektiivi=`kaunis`)\r\nprint(teksti)  # Tulostaa: `kaunis koti.`\r\n</code></pre>\r\n\r\n<p><strong>Numeroiden muotoilu</strong></p>\r\n\r\n<p>Kuten f-stringeiss&auml;, voit k&auml;ytt&auml;&auml; muotoilukoodia <code>.format()</code>-metodin kanssa:</p>\r\n\r\n<pre>\r\n<code class=`language-python`>luku = 3.14159\r\nprint(`Pi on noin {:.2f}.`.format(luku))  # Tulostaa: `Pi on noin 3.14.`\r\n</code></pre>\r\n\r\n<p><strong>Tasaus ja leveys</strong></p>\r\n\r\n<p>Voit m&auml;&auml;ritt&auml;&auml; leveyden ja tasaussuunnan samalla tavalla kuin f-stringeiss&auml;:</p>\r\n\r\n<pre>\r\n<code class=`language-python`>nimi = `Anna`\r\nprint(`|{:&lt;10}|`.format(nimi))  # `|Anna      |`\r\nprint(`|{:&gt;10}|`.format(nimi))  # `|      Anna|`\r\nprint(`|{:^10}|`.format(nimi))  # `|   Anna   |`\r\n</code></pre>\r\n\r\n<p>Vaikka f-stringit saattavat olla intuitiivisempia monissa tapauksissa, <code>.format()</code>-metodilla on omat etunsa, ja se on hyv&auml; ymm&auml;rt&auml;&auml;, varsinkin kun ty&ouml;skentelet vanhemman Python-koodin kanssa.</p>\r\n\r\n<p><strong>Tiedon Kysyminen: <code>input</code>-funktio</strong></p>\r\n\r\n<p>Voit kysy&auml; k&auml;ytt&auml;j&auml;lt&auml; tietoa <code>input</code>-funktion avulla:</p>\r\n\r\n<pre>\r\n<code class=`language-python`>nimi = input(`Mikä on nimesi? `)\r\nprint(f`Hei, {nimi}!`)\r\n</code></pre>\r\n\r\n<p><strong>Sy&ouml;tteen muuttaminen numeroksi:</strong></p>\r\n\r\n<p>Oletuksena <code>input</code> palauttaa merkkijonon. Jos haluat k&auml;sitell&auml; sy&ouml;tteen numerona, sinun on muunnettava se. Liukuluvuksi muunto onnistuu <strong>float</strong>-funktiolla :</p>\r\n\r\n<pre>\r\n<code class=`language-python`>luku = input(`Anna luku: `)\r\nluku = float(luku)  # Muuntaa merkkijonon liukuluvuksi\r\n</code></pre>\r\n\r\n<p>Tai kokonaisluvuksi <strong>int</strong>-funktiolla :</p>\r\n\r\n<pre>\r\n<code class=`language-python`>ikä = input(`Kuinka vanha olet? `)\r\nikä = int(ikä)  # Muuntaa merkkijonon kokonaisluvuksi\r\n</code></pre>\r\n\r\n<p>Luvuista kerrotaan lis&auml;&auml; seuraavassa tutoriaalissa.</p>`,`\r`,char(13)),`\n`,char(10)),NULL,1,1,replace(replace(`<p style=`text-align:center`><strong>Aiheita</strong></p>\r\n\r\n<ul>\r\n	<li>Print ja input-funktioiden toiminta</li>\r\n	<li>&quot; ja &#39;-merkkien erot tulostuksessa</li>\r\n	<li>Usean rivin tulostus</li>\r\n	<li>Muuttujien lis&auml;&auml;minen tulostukseen</li>\r\n	<li>fstring</li>\r\n	<li>Tulostuksen muotoilu</li>\r\n</ul>`,`\r`,char(13)),`\n`,char(10)),`tuto_logos/python_basics_2_Slg3ztn.png`);
INSERT INTO main_app_tutorial VALUES(4,`Luvut Pythonissa`,replace(replace(`<h3><strong>Int (Kokonaisluku)</strong></h3>\r\n\r\n<p>Kokonaisluvut ovat positiivisia tai negatiivisia lukuja ilman desimaalipistett&auml;.</p>\r\n\r\n<pre>\r\n<code class=`language-python`>x = 5\r\ny = -3\r\n</code></pre>\r\n\r\n<h3><strong>Float (Liukuluku)</strong></h3>\r\n\r\n<p>Liukuluvut ovat lukuja, joilla on yksi tai useampi desimaali.</p>\r\n\r\n<pre>\r\n<code class=`language-python`>a = 5.5\r\nb = -3.7\r\n</code></pre>\r\n\r\n<h3><strong>Kompleksiluvut</strong></h3>\r\n\r\n<p>Kompleksiluvut koostuvat kahdesta osasta: reaaliosasta ja imagin&auml;&auml;riosasta. Kompleksiluvut esitet&auml;&auml;n muodossa <code>x + yj</code>, miss&auml; <code>x</code> on todellinen osa ja <code>y</code> on imaginaarinen osa.</p>\r\n\r\n<pre>\r\n<code class=`language-python`>z = 3 + 4j\r\nprint(z.real)  # Tulostaa todellisen osan: 3.0 type on float\r\nprint(z.imag)  # Tulostaa imaginaarisen osan: 4.0 type on float \r\nprint(type(z))  # Tulostaa: &lt;class ``complex``&gt;\r\n</code></pre>\r\n\r\n<p>HUOMIO. sek&auml; <code>real</code> ett&auml; <code>imag</code> palauttavat arvonsa liukulukutyypiss&auml;, vaikka m&auml;&auml;rittelisit ne kokonaislukuina kompleksiluvun luomisen yhteydess&auml;.</p>\r\n\r\n<h3>&nbsp;<strong>Laskutoimitukset:</strong></h3>\r\n\r\n<p>Pythonin luvuilla onnistuvat peruslaskutoimitukset</p>\r\n\r\n<h4><strong>Yhteen- ja v&auml;hennyslasku:</strong></h4>\r\n\r\n<pre>\r\n<code class=`language-python`>print(5 + 3)  # 8\r\nprint(5 - 3)  # 2\r\n</code></pre>\r\n\r\n<h4><strong>Kerto ja jakolasku </strong></h4>\r\n\r\n<pre>\r\n<code class=`language-python`>print(5 * 3)  # 15\r\nprint(5 / 3)  # 1.6666666666666667 (Tulos on float)\r\nprint(4 / 2)  # 2.0 (Tulos on float) </code></pre>\r\n\r\n<p>Huomioitavaa on, ett&auml; jakolaskun tulos on aina liukuluku. Jos jako menee tasan pilkun j&auml;lkeen lis&auml;t&auml;&auml;n nolla.</p>\r\n\r\n<h4><strong>Kokonaislukujako (<code>//</code>):</strong></h4>\r\n\r\n<p>Jos jakolaskun tuloksesksi halutaan kokonaisluku voidaan k&auml;ytt&auml;&auml; // merkint&auml;&auml;. T&auml;m&auml; jakaa kaksi lukua ja palauttaa kokonaisluvun ja hylk&auml;&auml; desimaalit.</p>\r\n\r\n<pre>\r\n<code class=`language-python`>print(5 // 3)  # 1\r\n</code></pre>\r\n\r\n<h4><strong>Modulo (<code>%</code>):</strong></h4>\r\n\r\n<p>Palauttaa jakoj&auml;&auml;nn&ouml;ksen.</p>\r\n\r\n<pre>\r\n<code class=`language-python`>print(5 % 3)  # 2\r\n</code></pre>\r\n\r\n<h4><strong>Potenssi (<code>**</code>):</strong></h4>\r\n\r\n<pre>\r\n<code class=`language-python`>print(5 ** 3)  # 125 (5^3)\r\n</code></pre>\r\n\r\n<h3><strong>Lukujen py&ouml;rist&auml;minen:</strong></h3>\r\n\r\n<p><strong><code>round()</code></strong>-funktiolla voit py&ouml;rist&auml;&auml; liukuluvun l&auml;himp&auml;&auml;n kokonaislukuun tai m&auml;&auml;ritettyyn desimaalitarkkuuteen</p>\r\n\r\n<pre>\r\n<code class=`language-python`>print(round(3.6789))     # 4\r\nprint(round(3.6789, 2))  # 3.68, pyöristetään kahteen desimaaliin\r\n</code></pre>\r\n\r\n<h3><strong>Tyypin muunnokset:</strong></h3>\r\n\r\n<p>&nbsp;<strong><code>int()</code></strong> Funktio uuntaa annetun arvon kokonaisluvuksi. Jos arvo on liukuluku, se leikkaa pois desimaaliosan eik&auml; py&ouml;rist&auml; sit&auml;.</p>\r\n\r\n<pre>\r\n<code class=`language-python`>x = int(3.9)\r\nprint(x)  # 3</code></pre>\r\n\r\n<p>Voit my&ouml;s muuntaa merkkijonoja, jotka sis&auml;lt&auml;v&auml;t kokonaislukuja, k&auml;ytt&auml;m&auml;ll&auml; <code>int()</code>-funktiota:</p>\r\n\r\n<pre>\r\n<code class=`language-python`>y = int(`5`)\r\nprint(y)  # 5\r\n</code></pre>\r\n\r\n<p><code><strong>float()</strong> </code>Muuntaa annetun arvon liukuluvuksi.</p>\r\n\r\n<pre>\r\n<code class=`language-python`>z = float(3)\r\nprint(z)  # 3.0</code></pre>\r\n\r\n<p>Samoin voit muuntaa merkkijonoja, jotka sis&auml;lt&auml;v&auml;t liukulukuja:</p>\r\n\r\n<pre>\r\n<code class=`language-python`>a = float(`3.14`)\r\nprint(a)  # 3.14\r\n</code></pre>\r\n\r\n<p><strong><code>str() </code></strong>Muuntaa annetun arvon merkkijonoksi.</p>\r\n\r\n<pre>\r\n<code class=`language-python`>b = str(3.14)\r\nprint(b)  # `3.14`\r\nc = str(5)\r\nprint(c)  # `5`\r\n</code></pre>\r\n\r\n<p>&nbsp;</p>`,`\r`,char(13)),`\n`,char(10)),NULL,1,1,replace(replace(`<p style=`text-align:center`><strong>Aiheita</strong></p>\r\n\r\n<ul>\r\n	<li>Lukujen tyypit</li>\r\n	<li>Lukujen muunnokset</li>\r\n	<li>Laskutoimitukset</li>\r\n	<li>Lukujen py&ouml;rist&auml;minen</li>\r\n</ul>`,`\r`,char(13)),`\n`,char(10)),`tuto_logos/python_basics_2_Vow8rt7.png`);
INSERT INTO main_app_tutorial VALUES(5,`Merkkijonot`,replace(replace(`<h2>Merkkijonojen alustus</h2>\r\n\r\n<p>Pythonissa merkkijonon alustus on yksinkertaista. Voit alustaa merkkijonon yksinkertaisesti sijoittamalla tekstin lainausmerkkien sis&auml;&auml;n. Python tukee sek&auml; yksitt&auml;isi&auml; (&#39;) ett&auml; kaksois(&quot;) lainausmerkkej&auml;.</p>\r\n\r\n<pre>\r\n<code class=`language-python`>str1 = `` # Tyhjä merkkijono \r\nstr2 = ``Hello, KoodiGuru!`` \r\nstr3 = `This is another string.` </code></pre>\r\n\r\n<h2>Merkkijonon pituuden selvitt&auml;minen</h2>\r\n\r\n<p>Pythonin sis&auml;&auml;nrakennettu <code>len()</code>-funktio antaa merkkijonon pituuden.</p>\r\n\r\n<pre>\r\n<code class=`language-python`>str1 = ``Hello, KoodiGuru!`` \r\nprint(len(str1)) # Tulostaa: 17 </code></pre>\r\n\r\n<h2>Merkkijonojen yhdist&auml;minen Pythonissa</h2>\r\n\r\n<p>Pythonissa merkkijonojen yhdist&auml;minen eli konkatenointi on helppoa. Katsotaanpa, kuinka se toimii!</p>\r\n\r\n<h3><strong><code>+</code>-operaattori</strong></h3>\r\n\r\n<p>Yksinkertaisin tapa yhdist&auml;&auml; merkkijonoja Pythonissa on k&auml;ytt&auml;&auml; <code>+</code>-operaattoria. T&auml;ss&auml; on esimerkki:</p>\r\n\r\n<pre>\r\n<code class=`language-python`>str1 = `Hello` \r\nstr2 = `World` \r\nstr3 = str1 + ` ` + str2 \r\nprint(str3) # Tulostaa: Hello World </code></pre>\r\n\r\n<p>T&auml;ss&auml; esimerkiss&auml; <code>str1</code> ja <code>str2</code> ovat merkkijonoja, jotka yhdistet&auml;&auml;n <code>+</code>-operaattorilla. Huomaa, ett&auml; v&auml;lily&ouml;nti on my&ouml;s merkkijono, jonka avulla saadaan aikaan v&auml;lily&ouml;nti yhdistetyss&auml; merkkijonossa.</p>\r\n\r\n<h3><strong><code>join()</code>-funktio</strong></h3>\r\n\r\n<p>Toinen tapa yhdist&auml;&auml; merkkijonoja Pythonissa on k&auml;ytt&auml;&auml; <code>join()</code>-funktiota. T&auml;m&auml; on hy&ouml;dyllinen erityisesti silloin, kun yhdistett&auml;vi&auml; merkkijonoja on paljon, sill&auml; se on tehokkaampi kuin <code>+</code>-operaattori. T&auml;ss&auml; on esimerkki, kuinka <code>join()</code>-funktiota k&auml;ytet&auml;&auml;n:</p>\r\n\r\n<pre>\r\n<code class=`language-python`>tr_list = [`Hello`, `World`] \r\ncombined_str = ` `.join(str_list) \r\nprint(combined_str)    # Tulostaa: Hello World </code></pre>\r\n\r\n<p>T&auml;ss&auml; esimerkiss&auml; <code>join()</code>-funktio yhdist&auml;&auml; <code>str_list</code>:ss&auml; olevat merkkijonot yhdeksi merkkijonoksi. <code>&quot; &quot;</code> on yhdist&auml;v&auml; merkkijono, joka lis&auml;t&auml;&auml;n jokaisen listan elementin v&auml;liin. T&auml;ss&auml; tapauksessa se on v&auml;lily&ouml;nti, mutta se voi olla mik&auml; tahansa merkkijono.</p>\r\n\r\n<h3><strong>Merkit Isoksi ja Pieniksi</strong></h3>\r\n\r\n<p>Pythonin merkkijonotyypill&auml; on <code>upper()</code> ja <code>lower()</code> metodeja, joilla muutetaan merkkijonon kaikki merkit isoiksi tai pieniksi kirjaimiksi.</p>\r\n\r\n<pre>\r\n<code class=`language-python`>str1 = ``Hello, KoodiGuru!`` \r\nprint(str1.upper()) # Tulostaa: ``HELLO, KOODIGURU!`` \r\nprint(str1.lower()) # Tulostaa: ``hello, koodiguru!`` </code></pre>\r\n\r\n<h3><strong>Trim</strong></h3>\r\n\r\n<p>Pythonissa voit k&auml;ytt&auml;&auml; <code>strip()</code>-metodia poistaaksesi alusta ja lopusta merkkijonosta whitespace-merkit (tyhj&auml;t merkit, rivinvaihdot, tabulaattorit).</p>\r\n\r\n<pre>\r\n<code class=`language-python`>str1 = `` Hello, KoodiGuru! ``\r\nprint(str1.strip()) # Tulostaa: ``Hello, KoodiGuru!`` </code></pre>\r\n\r\n<h3><strong>Merkkijonon indeksiin viittaaminen</strong></h3>\r\n\r\n<p>Pythonissa voit viitata merkkijonon tiettyyn merkkiin sen indeksin avulla. Pythonin indeksointi alkaa 0:sta.</p>\r\n\r\n<pre>\r\n<code class=`language-python`>str1 = ``Hello, KoodiGuru!`` \r\nprint(str1[7]) # Tulostaa: ``K`` </code></pre>\r\n\r\n<p>Voit viitata merkkijonon viimeiseen merkkiin indeksill&auml; -1.</p>\r\n\r\n<pre>\r\n<code>str1 = ``Hello, KoodiGuru!`` \r\nprint(str1[-1]) # Tulostaa : ``!`` </code></pre>\r\n\r\n<h3><strong>Merkkijonojen paloittelu</strong></h3>\r\n\r\n<p>Pythonissa voit paloitella merkkijonoja k&auml;ytt&auml;m&auml;ll&auml; niiden indeksien v&auml;lisi&auml; alueita. T&auml;t&auml; kutsutaan merkkijonojen siivuttamiseksi</p>\r\n\r\n<pre>\r\n<code class=`language-python`>str1 = ``Hello, KoodiGuru!``\r\nprint(str1[0:5]) # Tulostaa: ``Hello`` </code></pre>\r\n\r\n<p>&nbsp;</p>`,`\r`,char(13)),`\n`,char(10)),NULL,1,1,replace(replace(`<p style=`text-align:center`><strong>Aiheita</strong></p>\r\n\r\n<ul>\r\n	<li>Merkkijonon luonti</li>\r\n	<li>Pituuden selvittiminen</li>\r\n	<li>Indexseihin viitaminen</li>\r\n	<li>Merkkijonojen yhdistely ja muokkaminen</li>\r\n</ul>`,`\r`,char(13)),`\n`,char(10)),`tuto_logos/python_basics_2_tb2WZry.png`);
INSERT INTO main_app_tutorial VALUES(6,`Toistolauseet/silmukat`,replace(replace(`<h2>Pythonin Silmukat: For, For Range ja While</h2>\r\n\r\n<p>Pythonissa on kolme t&auml;rke&auml;&auml; silmukkarakennetta: <code>for</code>, <code>for range</code> ja <code>while</code>. Katsotaanpa, kuinka ne toimivat!</p>\r\n\r\n<h3><strong><code>for</code>-silmukka</strong></h3>\r\n\r\n<p>Pythonin <code>for</code>-silmukkaa k&auml;ytet&auml;&auml;n yleisesti iterointiin eli toistuvan toiminnon suorittamiseen. T&auml;ss&auml; on yksinkertainen esimerkki:</p>\r\n\r\n<pre>\r\n<code>fruits = [`apple`, `banana`, `cherry`]\r\nfor fruit in fruits:\r\n    print(fruit)\r\n</code></pre>\r\n\r\n<p>T&auml;ss&auml; esimerkiss&auml; <code class=`language-python`>for</code>-silmukka k&auml;y l&auml;pi jokaisen <code class=`language-python`>fruits</code>-listan elementin ja tulostaa sen. Output on:</p>\r\n\r\n<pre>\r\n<code class=`language-python`>apple\r\nbanana\r\ncherry\r\n</code></pre>\r\n\r\n<h3><strong><code>for range</code>-silmukka</strong></h3>\r\n\r\n<p><code>for</code>-silmukkaa voidaan my&ouml;s yhdist&auml;&auml; <code>range()</code>-funktion kanssa toistuvan toiminnon suorittamiseen tietyn m&auml;&auml;r&auml;n kertoja. T&auml;ss&auml; on esimerkki</p>\r\n\r\n<pre>\r\n<code class=`language-python`>for i in range(5):\r\n    print(i)\r\n</code></pre>\r\n\r\n<p>T&auml;ss&auml; esimerkiss&auml; <code>for</code>-silmukka tulostaa numerot 0-4. <code>range(5)</code> luo lukusarjan 0:sta 4:&auml;&auml;n.</p>\r\n\r\n<p>Output on:</p>\r\n\r\n<pre>\r\n<code class=`language-python`>0\r\n1\r\n2\r\n3\r\n4\r\n</code></pre>\r\n\r\n<h3><strong><code>﻿while</code>-silmukat</strong></h3>\r\n\r\n<p><code>while</code>-silmukkaa k&auml;ytet&auml;&auml;n toistuvan toiminnon suorittamiseen, kunnes tietty ehto ei en&auml;&auml; t&auml;yty. T&auml;ss&auml; on esimerkki:</p>\r\n\r\n<pre>\r\n<code class=`language-python`>i = 0\r\nwhile i &lt; 5:\r\n    print(i)\r\n    i += 1\r\n</code></pre>\r\n\r\n<p>T&auml;ss&auml; esimerkiss&auml; <code>while</code>-silmukka tulostaa numerot 0-4. Silmukka jatkuu niin kauan, kunnes <code>i</code> ei en&auml;&auml; ole pienempi kuin 5. okaisella silmukan kierroksella <code>i</code> kasvatetaan yhdell&auml; (<code>i += 1</code>), joten silmukka tulostaa samat numerot kuin edellinen <code>for</code>-silmukka.</p>\r\n\r\n<pre>\r\n<code class=`language-python`>0\r\n1\r\n2\r\n3\r\n4</code></pre>\r\n\r\n<p>Huomaa, ett&auml; <code>while</code>-silmukoissa on t&auml;rke&auml;&auml; varmistaa, ett&auml; ehto ei t&auml;yty jossain vaiheessa, jotta silmukka ei jatku ikuisesti.</p>\r\n\r\n<h3><strong>Pythonin Continue ja Break</strong></h3>\r\n\r\n<p>Pythonin <code>continue</code> ja <code>break</code> ovat ohjauslauseita, joita voidaan k&auml;ytt&auml;&auml; silmukoissa (kuten <code>for</code> ja <code>while</code>) ohjaamaan ohjelman toimintaa.</p>\r\n\r\n<p><strong>Continue</strong></p>\r\n\r\n<p><code>continue</code>-avainsanaa k&auml;ytet&auml;&auml;n ohjaamaan ohjelmaa takaisin silmukan alkuun. Se ohittaa silmukan loput lauseet ja jatkaa seuraavaan iteraatioon.</p>\r\n\r\n<p>T&auml;ss&auml; on esimerkki <code>continue</code>-avainsanan k&auml;yt&ouml;st&auml;:</p>\r\n\r\n<pre>\r\n<code class=`language-python`>for i in range(10):\r\n    if i == 5:\r\n        continue\r\n    print(i)\r\n</code></pre>\r\n\r\n<p>T&auml;ss&auml; esimerkiss&auml; ohjelma tulostaa numerot 0-9, mutta ohittaa numeron 5, koska <code>continue</code>-avainsanaa k&auml;ytet&auml;&auml;n ohittamaan silmukan loput lauseet, kun <code>i</code> on 5.</p>\r\n\r\n<p><strong>Break</strong></p>\r\n\r\n<p><code>break</code>-avainsanaa k&auml;ytet&auml;&auml;n lopettamaan silmukan suorittaminen kokonaan. Kun <code>break</code>-avainsana kohtaa, ohjelma poistuu silmukasta, ja silmukan j&auml;lkeinen koodi alkaa suorittua.</p>\r\n\r\n<p>T&auml;ss&auml; on esimerkki <code>break</code>-avainsanan k&auml;yt&ouml;st&auml;:</p>\r\n\r\n<pre>\r\n<code class=`language-python`>for i in range(10):\r\n    if i == 5:\r\n        break\r\n    print(i)</code></pre>\r\n\r\n<p>T&auml;ss&auml; esimerkiss&auml; ohjelma tulostaa numerot 0-4, ja kun <code>i</code> on 5, <code>break</code>-avainsana lopettaa silmukan. Toisin kuin <code>continue</code>, <code>break</code> ei vain ohita silmukan loput lauseet, vaan se lopettaa silmukan suorittamisen kokonaan.</p>\r\n\r\n<p>Yhteenvetona, <code>continue</code>-avainsanaa k&auml;ytet&auml;&auml;n ohittamaan silmukan loput lauseet ja jatkamaan seuraavaan iteraatioon, kun taas <code>break</code>-avainsanaa k&auml;ytet&auml;&auml;n lopettamaan silmukan suorittaminen kokonaan.</p>\r\n\r\n<h3><strong><code>enumerate()</code>-funktio</strong></h3>\r\n\r\n<p>Pythonin <code>enumerate()</code>-funktio on eritt&auml;in hy&ouml;dyllinen, kun haluat iteroida l&auml;pi listan ja tarvitset sek&auml; elementin ett&auml; sen indeksin. T&auml;ss&auml; on esimerkki siit&auml;, miten se toimii:</p>\r\n\r\n<pre>\r\n<code class=`language-python`>fruits = [`apple`, `banana`, `cherry`]\r\nfor i, fruit in enumerate(fruits):\r\n    print(f`Elementin indeksi on {i} ja sen arvo on {fruit}`)\r\n</code></pre>\r\n\r\n<p>T&auml;ss&auml; esimerkiss&auml; <code>enumerate()</code>-funktio palauttaa sek&auml; elementin ett&auml; sen indeksin. Tulostus on seuraavanlainen:</p>\r\n\r\n<pre>\r\n<code class=`language-python`>Elementin indeksi on 0 ja sen arvo on apple\r\nElementin indeksi on 1 ja sen arvo on banana\r\nElementin indeksi on 2 ja sen arvo on cherry</code></pre>\r\n\r\n<p>N&auml;in pystymme tulostamaan sek&auml; elementin arvon ett&auml; sen indeksin.</p>\r\n\r\n<p>Jos et jostain syyst&auml; halua k&auml;ytt&auml;&auml; <code>enumerate()</code>-funktiota jvoit k&ouml;ytt&auml;&auml; esimerkiksi:</p>\r\n\r\n<pre>\r\n<code class=`language-python`>fruits = [`apple`, `banana`, `cherry`]\r\nfor i in range(len(fruits)):\r\n    print(f`Elementin indeksi on {i} ja sen arvo on {fruits[i]}`)</code></pre>\r\n\r\n<p>T&auml;ss&auml; esimerkiss&auml; k&auml;ytet&auml;&auml;n <code>range()</code>-funktiota yhdess&auml; <code>len()</code>-funktion kanssa, joka palauttaa listan pituuden. T&auml;m&auml; luo silmukan, joka iteroi l&auml;pi listan indeksien. Tai vaihtoehtoisesti.</p>\r\n\r\n<pre>\r\n<code class=`language-python`>fruits = [`apple`, `banana`, `cherry`]\r\nindex = 0\r\nfor fruit in fruits:\r\n    print(f`Elementin indeksi on {index} ja sen arvo on {fruit}`)\r\n    index += 1\r\n</code></pre>\r\n\r\n<p>T&auml;ss&auml; esimerkiss&auml; luodaan erillinen indeksimuuttuja, joka kasvatetaan yhdell&auml; jokaisen iteraation j&auml;lkeen.</p>\r\n\r\n<p>My&ouml;s t&auml;ss&auml; esimerkeiss&auml; tulostus on sama kuin <code>enumerate()</code>-funktiolla:</p>\r\n\r\n<pre>\r\n<code class=`language-python`>Elementin indeksi on 0 ja sen arvo on apple\r\nElementin indeksi on 1 ja sen arvo on banana\r\nElementin indeksi on 2 ja sen arvo on cherry\r\n</code></pre>\r\n\r\n<h3><strong>Yhden rivin silmukat (List Comprehensions)</strong></h3>\r\n\r\n<p>Pythonin yhden rivin silmukat, tunnetaan my&ouml;s nimell&auml; List Comprehensions, ovat tehokas tapa suorittaa toimintoja yhdell&auml; rivill&auml;. Ne ovat erityisen hyvi&auml; luomaan uusia listoja vanhojen pohjalta.&nbsp; Itse en ole t&auml;m&auml;n merkinn&auml;n fani, mutta sit&auml; n&auml;kee paljon verkossa olevassa Python koodissa, joten sit&auml; on ainakin osatava lukea. &nbsp; T&auml;ss&auml; on esimerkki &#39;one linerin&#39; k&auml;yt&ouml;st&auml;:</p>\r\n\r\n<pre>\r\n<code>numbers = [1, 2, 3, 4, 5]\r\nsquares = [number**2 for number in numbers]\r\nprint(squares)\r\n</code></pre>\r\n\r\n<p>T&auml;ss&auml; esimerkiss&auml; luomme uuden listan, jossa jokainen alkio on <code>numbers</code>-listan alkion neli&ouml;. Tulostus on seuraavanlainen:</p>\r\n\r\n<pre>\r\n<code class=`language-python`>[1, 4, 9, 16, 25]</code></pre>\r\n\r\n<p>&nbsp;</p>`,`\r`,char(13)),`\n`,char(10)),NULL,1,1,replace(replace(`<p style=`text-align:center`><strong>Aiheita:</strong></p>\r\n\r\n<ul>\r\n	<li>For-lause</li>\r\n	<li>While-lause</li>\r\n	<li>Continue ja ja break sanat</li>\r\n	<li>Onelinerit Pythonissa ja niiden k&auml;ytt&ouml; listojen k&auml;sittelyss&auml;</li>\r\n</ul>`,`\r`,char(13)),`\n`,char(10)),`tuto_logos/python_basics_2_ek97jnH.png`);
INSERT INTO main_app_tutorial VALUES(7,`Ehtolauseet`,replace(replace(`<p>Pythonin ehtolauseet ovat loogisia lausekkeita, jotka suorittavat tiettyj&auml; toimintoja perustuen ehtojen totuusarvoihin. Pythonissa ehtolauseita k&auml;ytet&auml;&auml;n <code>if</code>, <code>elif</code> (else if), ja <code>else</code> avainsanojen kanssa. Lis&auml;ksi voit k&auml;ytt&auml;&auml; logiikkaoperaattoreita <code>and</code>, <code>or</code> ja <code>not</code> monimutkaisten ehtolausekkeiden luomiseen. Seuraavassa on esimerkkej&auml; n&auml;iden k&auml;yt&ouml;st&auml;:</p>\r\n\r\n<h2>If-lause</h2>\r\n\r\n<p><code>if</code>-lause tarkistaa, t&auml;yttyyk&ouml; annettu ehto. Jos ehto on totta, suoritetaan sen alla oleva lohko.</p>\r\n\r\n<pre>\r\n<code class=`language-python`>x = 10\r\nif x &gt; 5:\r\n    print(`x on suurempi kuin 5`)</code></pre>\r\n\r\n<p>T&auml;ss&auml; esimerkiss&auml;, koska x on suurempi kuin 5, tulostetaan &quot;x on suurempi kuin 5&quot;.</p>\r\n\r\n<h2>Elif-lause</h2>\r\n\r\n<p><code>elif</code> tarkoittaa &quot;else if&quot;. Sit&auml; k&auml;ytet&auml;&auml;n, kun haluat tarkistaa useita ehtoja ja suorittaa eri toimintoja niiden perusteella. T&auml;rke&auml;&auml; on, ett&auml; <code>elif</code>-lauseet tulevat aina <code>if</code>-lauseen j&auml;lkeen.</p>\r\n\r\n<pre>\r\n<code class=`language-python`>x = 10\r\n\r\nif x &gt; 10:\r\n    print(`x on suurempi kuin 10`)\r\nelif x == 10:\r\n    print(`x on 10`)\r\n</code></pre>\r\n\r\n<p>T&auml;ss&auml; esimerkiss&auml;, koska x ei ole suurempi kuin 10 mutta on yht&auml; suuri kuin 10, tulostetaan &quot;x on 10&quot;.</p>\r\n\r\n<h2>Else-lause</h2>\r\n\r\n<p><code>else</code>-lause suorittaa toiminnon, jos mik&auml;&auml;n edellisist&auml; ehdoista ei t&auml;yttynyt.</p>\r\n\r\n<pre>\r\n<code class=`language-python`>x = 10\r\n\r\nif x &gt; 10:\r\n    print(`x on suurempi kuin 10`)\r\nelif x &lt; 10:\r\n    print(`x on pienempi kuin 10`)\r\nelse:\r\n    print(`x on 10`)\r\n</code></pre>\r\n\r\n<p>T&auml;ss&auml; esimerkiss&auml;, koska x ei ole suurempi tai pienempi kuin 10, suoritetaan <code>else</code>-lohko ja tulostetaan &quot;x on 10&quot;.</p>\r\n\r\n<p>Huomaa, ett&auml; <code>elif</code> ja <code>else</code>-lauseet ovat valinnaisia. Voit kirjoittaa ehtolauseen, jossa on vain <code>if</code>, jos se riitt&auml;&auml; tarpeisiisi. My&ouml;s useita <code>elif</code>-lauseita voidaan k&auml;ytt&auml;&auml; per&auml;kk&auml;in tarkistamaan useita ehtoja. <code>else</code>-lauseen pit&auml;isi aina tulla viimeisen&auml;.</p>\r\n\r\n<h2>And-operaattori</h2>\r\n\r\n<p><code>and</code>-operaattori suorittaa lohkon, jos molemmat ehdot ovat tosia.</p>\r\n\r\n<pre>\r\n<code>x = 10\r\n\r\nif x &gt; 5 and x &lt; 15:\r\n    print(`x on suurempi kuin 5 ja pienempi kuin 15`)\r\n</code></pre>\r\n\r\n<h2>Or-operaattori</h2>\r\n\r\n<p><code>or</code>-operaattori suorittaa lohkon, jos jompikumpi tai molemmat ehdot ovat tosia.</p>\r\n\r\n<pre>\r\n<code class=`language-python`>x = 20\r\nif x &lt; 10 or x &gt; 15:\r\n    print(`x on pienempi kuin 10 tai suurempi kuin 15`)\r\n</code></pre>\r\n\r\n<h2>Not-operaattori</h2>\r\n\r\n<p><code>not</code>-operaattori k&auml;&auml;nt&auml;&auml; ehdossa olevan totuusarvon. Jos ehto on tosi, <code>not</code> muuttaa sen ep&auml;todeksi, ja p&auml;invastoin.</p>\r\n\r\n<pre>\r\n<code class=`language-python`>x = 10\r\n\r\nif not x &gt; 15:\r\n    print(`x ei ole suurempi kuin 15`)\r\n</code></pre>\r\n\r\n<p>Voit my&ouml;s yhdistell&auml; <code>and</code>, <code>or</code> ja <code>not</code> operaattoreita monimutkaisempien ehtolausekkeiden luomiseksi.</p>\r\n\r\n<pre>\r\n<code>x = 10\r\n\r\nif x &gt; 5 and not x &gt; 15:\r\n    print(`x on suurempi kuin 5, mutta ei suurempi kuin 15`)\r\n</code></pre>\r\n\r\n<p>Muista, ett&auml; operaattorien k&auml;ytt&ouml; ehtolauseissa vaatii, ett&auml; ymm&auml;rr&auml;t, miten eri operaattorit toimivat. Harjoittele Koodigurusta l&ouml;ytyvilkl&auml; teht&auml;vill&auml; ja kokeilemalla erilaisia ehtoja, jotta ymm&auml;rr&auml;t, miten n&auml;m&auml; operaattorit toimivat yhdess&auml;.</p>`,`\r`,char(13)),`\n`,char(10)),NULL,1,1,replace(replace(`<p style=`text-align:center`><strong>Aiheita</strong></p>\r\n\r\n<ul>\r\n	<li>If elif ja else lauseet</li>\r\n	<li>Vertailulauseet&nbsp;</li>\r\n	<li>And or ja not-sanat</li>\r\n</ul>`,`\r`,char(13)),`\n`,char(10)),`tuto_logos/python_basics_2_nVepc5C.png`);
INSERT INTO main_app_tutorial VALUES(8,`Pythonin tietorakenteet`,replace(replace(`<div>\r\n<div>\r\n<div>\r\n<h2>Python Listat</h2>\r\n\r\n<p>Listat ovat Pythonissa eritt&auml;in t&auml;rke&auml; tietorakenne. Ne ovat j&auml;rjestettyj&auml; kokoelmia, jotka voivat sis&auml;lt&auml;&auml; mink&auml; tahansa tyyppisi&auml; arvoja. T&auml;ss&auml; tutoriaalissa k&auml;yd&auml;&auml;n l&auml;pi Pythonin listojen perusteita.</p>\r\n\r\n<h3><strong>Merkkijonojen ja Listojen Erot</strong></h3>\r\n\r\n<p>Vaikka merkkijonot ja listat voivat n&auml;ytt&auml;&auml; samanlaisilta, koska molemmat sis&auml;lt&auml;v&auml;t j&auml;rjestettyj&auml; kokoelmia arvoja, ne ovat eritt&auml;in erilaisia. Merkkijonot ovat muuttumattomia, mik&auml; tarkoittaa, ett&auml; kerran luodun merkkijonon arvoja ei voida muuttaa. Toisaalta listat ovat muutettavissa, joten voit muuttaa listan arvoja sen luomisen j&auml;lkeen.</p>\r\n\r\n<h3><strong>Listojen Luonti</strong></h3>\r\n\r\n<p>Pythonissa listan luonti on yksinkertaista. Voit alustaa listan sijoittamalla arvot hakasulkujen sis&auml;&auml;n, erottaen ne pilkuilla.</p>\r\n\r\n<pre>\r\n<code class=`language-python`>lista = [``Hello``, ``KoodiGuru``, 1, 2.5] </code></pre>\r\n\r\n<h3><strong>Listan Pituuden Selvitt&auml;minen</strong></h3>\r\n\r\n<p>Pythonin sis&auml;&auml;nrakennettu <code>len()</code>-funktio antaa listan pituuden.</p>\r\n\r\n<pre>\r\n<code class=`language-python`>lista = [``Hello``, ``KoodiGuru``, 1, 2.5] \r\nprint(len(lista)) # Tulostaa: 4</code></pre>\r\n\r\n<h3><strong>Alkion Lis&auml;&auml;minen Listaan</strong></h3>\r\n\r\n<p>Pythonissa voit lis&auml;t&auml; arvoja listalle <code>append()</code> ja <code>insert()</code> metodien avulla. <code>append()</code> lis&auml;&auml; arvon listan loppuun, kun taas <code>insert()</code> voi lis&auml;t&auml; arvon mihin tahansa kohtaan listaa.</p>\r\n\r\n<pre>\r\n<code class=`language-python`>lista = [``Hello``, ``KoodiGuru``] lista.append(``!``) \r\nprint(lista) # Tulostaa: [``Hello``, ``KoodiGuru``, ``!``]\r\nlista.insert(2, ``World``) print(lista)   # Tulostaa: [``Hello``, ``KoodiGuru``, ``World``, ``!``] </code></pre>\r\n\r\n<h3><strong>Alkion Poisto listasta</strong></h3>\r\n\r\n<p>Voit poistaa arvon listalta <code>remove()</code> metodilla, joka poistaa ensimm&auml;isen esiintym&auml;n m&auml;&auml;ritetyst&auml; arvosta, <code>pop()</code> metodilla, joka poistaa arvon m&auml;&auml;ritetyst&auml; sijainnista listalla tai <code>del</code> lauseella, joka poistaa arvon suoralla indeksoinnilla.</p>\r\n\r\n<pre>\r\n<code class=`language-python`>Hello``, ``KoodiGuru``, ``World``, ``!``] \r\nlista.remove(``World``) \r\nprint(lista) # Tulostaa: [``Hello``, ``KoodiGuru``, ``!``]\r\n lista.pop(2) \r\nprint(lista) # Tulostaa: [``Hello``, ``KoodiGuru``] \r\ndel lista[1] \r\nprint(lista) # Tulostaa: [``Hello``] </code></pre>\r\n\r\n<h3><strong>Listojen J&auml;rjest&auml;minen</strong></h3>\r\n\r\n<p>Pythonin listat voidaan j&auml;rjest&auml;&auml; <code>sort()</code> metodin avulla.</p>\r\n\r\n<pre>\r\n<code class=`language-python`>numbers = [5, 1, 9, 3]\r\nnumbers.sort()\r\nprint(numbers) # Tulostaa: [1, 3, 5, 9] </code></pre>\r\n\r\n<h3><strong>Listat listojen sis&auml;ll&auml;</strong></h3>\r\n\r\n<p>Pythonissa voit luoda listoja, jotka sis&auml;lt&auml;v&auml;t muita listoja. N&auml;m&auml; ovat tunnettuja nimell&auml; moniulotteiset listat.</p>\r\n\r\n<pre>\r\n<code class=`language-python`>lista = [[``Hello``, ``KoodiGuru``], [1, 2.5]] </code></pre>\r\n\r\n<h3><strong>Listojen alkioihin viittaaminen</strong></h3>\r\n\r\n<p>Pythonin listat tukevat indeksointia, joten voit hakea yksitt&auml;isi&auml; arvoja listalta tai luoda uusia listoja listan osista. Pythonissa viittaus viimeiseen listan alkioon tapahtuu indeksill&auml; <code>-1</code>.</p>\r\n\r\n<pre>\r\n<code class=`language-python`>lista = [``Hello``, ``KoodiGuru``, ``World``, ``!``] \r\nprint(lista[1]) # Tulostaa: ``KoodiGuru`` \r\nprint(lista[-1]) # Tulostaa: ``!`` \r\nprint(lista[1:3]) # Tulostaa: [``KoodiGuru``, ``World``] </code></pre>\r\n\r\n<h3><strong>Listan muuttaminen merkkijonoksi</strong></h3>\r\n\r\n<p>Pythonissa voit helposti muuttaa listan merkkijonoksi <code>join()</code>-funktion avulla, joka on m&auml;&auml;ritelty <code>str</code>-luokassa. <code>join()</code>-funktiolla voit yhdist&auml;&auml; listan alkiot yhdeksi merkkijonoksi m&auml;&auml;ritellyll&auml; erottimella. Esimerkiksi:</p>\r\n\r\n<pre>\r\n<code class=`language-python`># Luodaan lista\r\nmy_list = [``T``, ``e``, ``r``, ``v``, ``e``, ``t``, ``u``, ``l``, ``o``, ``a``]\r\n\r\n# Muunnetaan lista merkkijonoksi käyttämällä join()-funktiota\r\nmy_string = ````.join(my_list)\r\n\r\n# Tulostetaan muunnettu merkkijono\r\nprint(my_string)\r\n</code></pre>\r\n\r\n<p>T&auml;m&auml;n koodin suorittaminen tulostaa: <code>Tervetuloa</code>.</p>\r\n\r\n<p>T&auml;ss&auml; esimerkiss&auml; merkkijonojen <code>join()</code>-funktio ottaa listan merkkijonoja (<code>my_list</code>) ja liitt&auml;&auml; ne yhteen. Tyhj&auml;t lainausmerkit (<code>&#39;&#39;</code>) ennen <code>join()</code>-funktiota tarkoittavat, ett&auml; listan alkiot liitet&auml;&auml;n yhteen ilman erottimia.</p>\r\n\r\n<p>Jos haluat lis&auml;t&auml; erottimen jokaisen merkin v&auml;lille, voit tehd&auml; sen seuraavasti:</p>\r\n\r\n<pre>\r\n<code class=`language-python`># Luodaan lista\r\nmy_list = [``O``, ``p``, ``i``, ``s``, ``k``, ``e``, ``l``, ``u``]\r\n\r\n# Muunnetaan lista merkkijonoksi käyttämällä join()-funktiota\r\n# Lisätään välilyönti (`` ``) erottimena\r\nmy_string = `` ``.join(my_list)\r\n\r\n# Tulostetaan muunnettu merkkijono\r\nprint(my_string)\r\n</code></pre>\r\n\r\n<p>T&auml;m&auml;n koodin suorittaminen tulostaa: <code>O p i s k e l u</code>.</p>\r\n\r\n<p>T&auml;ss&auml; esimerkiss&auml; v&auml;lily&ouml;nti (&#39; &#39;) ennen <code>join()</code>-funktiota toimii erottimena listan alkioiden v&auml;lill&auml;. Voit k&auml;ytt&auml;&auml; mit&auml; tahansa merkki&auml; tai merkkijonoa erottimena, esimerkiksi pilkkua (&#39;,&#39;), alaviivaa (&#39;_&#39;) tai mit&auml; tahansa muuta.</p>\r\n\r\n<p>Huomaa, ett&auml; <code>join()</code>-funktion argumentin on oltava merkkijonoja. Jos listan alkiot eiv&auml;t ole merkkijonoja, sinun on muunnettava ne merkkijonoiksi ennen <code>join()</code>-funktion k&auml;ytt&ouml;&auml;. T&auml;m&auml;n voit tehd&auml; esimerkiksi <code>map()</code>-funktion avulla:</p>\r\n\r\n<pre>\r\n<code class=`language-python`># Luodaan lista numeroista\r\nmy_list = [1, 2, 3, 4, 5]\r\n\r\n# Muunnetaan numerot merkkijonoiksi map()-funktion avulla\r\n# ja liitetään ne yhteen ``,``-erottimella\r\nmy_string = ``,``.join(map(str, my_list))\r\n\r\n# Tulostetaan muunnettu merkkijono\r\nprint(my_string)\r\n</code></pre>\r\n\r\n<p>T&auml;m&auml;n koodin suorittaminen tulostaa: <code>1,2,3,4,5</code>. T&auml;ss&auml; <code>map(str, my_list)</code> muuntaa jokaisen listan alkion merkkijonoksi, jonka j&auml;lkeen ne yhdistet&auml;&auml;n <code>join()</code>-funktion avulla.</p>\r\n\r\n<h2>Tuple-tietorakenne</h2>\r\n\r\n<p>Tuple on toinen tietotyyppi, joka on hyvin samanlainen kuin lista. Se on j&auml;rjestetty kokoelma arvoja. Ero on siin&auml;, ett&auml; tuple on muuttumaton, mik&auml; tarkoittaa, ett&auml; et voi muuttaa sen arvoja kerran kun se on luotu. Muuttumattomuus lis&auml;&auml; joissain tilaneissa turvallisuutta koska tuple ei voi muuttua k&auml;sitelt&auml;ess&auml;. Lis&auml;ksi tuple on yleens&auml; hieman tehokkaampi kuin lista, koska sen sis&auml;inen rakenne on yksinkertaisempi. Tupleja luodaan sijoittamalla arvot sulkeisiin <code>()</code> erottaen ne pilkuilla.</p>\r\n\r\n<pre>\r\n<code class=`language-python`>tuple_tyyppi = (``Hello``, ``KoodiGuru``, 1, 2.5) </code></pre>\r\n\r\n<h2>Set-tietorakenne</h2>\r\n\r\n<p>Set on my&ouml;s tietotyyppi, joka on kuin lista, mutta se ei ole j&auml;rjestetty ja se sis&auml;lt&auml;&auml; vain uniikkeja arvoja. Setit luodaan sijoittamalla arvot aaltosulkeisiin <code>{}</code> erottaen ne pilkuilla.</p>\r\n\r\n<pre>\r\n<code class=`language-python`>set_tyyppi = {``Hello``, ``KoodiGuru``, 1, 2.5} </code></pre>\r\n\r\n<h3><strong>Duplikaatien poisto listasta setin avulla </strong></h3>\r\n\r\n<p>Pythonin setin avulla voit poistaa duplikaatit listalta. T&auml;m&auml; johtuu siit&auml;, ett&auml; setit eiv&auml;t salli duplikaatteja, joten kun lista muunnetaan setiksi, kaikki duplikaatit poistetaan.</p>\r\n\r\n<pre>\r\n<code class=`language-python`>lista = [``Hello``, ``KoodiGuru``, ``Hello``, ``Hello``, ``!``\r\nlista = list(set(lista))\r\nprint(lista) # Tulostaa: [``KoodiGuru``, ``!``, ``Hello``] </code></pre>\r\n\r\n<p>Huomaa, ett&auml; setit eiv&auml;t ole j&auml;rjestettyj&auml;, joten kun lista muunnetaan setiksi, alkuper&auml;inen j&auml;rjestys saattaa h&auml;vit&auml;.</p>\r\n\r\n<h2>Dictionary-tietorakenne</h2>\r\n\r\n<p>Pythonin <code>dictionary</code> eli sanakirja on muuttumaton, j&auml;rjest&auml;m&auml;t&ouml;n tietorakenne, joka tallentaa arvoja avaimen mukaan. Sanakirjan avain-arvo-parit ovat erill&auml;&auml;n toisistaan kaksoispisteen <code>:</code> avulla ja kukin pari on erill&auml;&auml;n toisistaan pilkulla <code>,</code>. Sanakirjan avain-arvoparit tallennetaan sulkeisiin <code>{}</code>.</p>\r\n\r\n<p>T&auml;ss&auml; on esimerkki sanakirjan luomisesta:</p>\r\n\r\n<pre>\r\n<code class=`language-python`>my_dict = {\r\n    ``key1``: ``value1``,\r\n    ``key2``: ``value2``,\r\n    ``key3``: ``value3``,\r\n}</code></pre>\r\n\r\n<h3><strong>Sanakirjan k&auml;ytt&ouml;</strong></h3>\r\n\r\n<p>Arvojen hakeminen sanakirjasta tapahtuu avaimen avulla:</p>\r\n\r\n<pre>\r\n<code class=`language-python`>print(my_dict[``key1``])  # Tulostaa: value1</code></pre>\r\n\r\n<p>Jos yrit&auml;t hakea arvoa avaimella, jota ei ole sanakirjassa, Python heitt&auml;&auml; <code>KeyError</code>-poikkeuksen. Voit kuitenkin k&auml;ytt&auml;&auml; <code>get</code>-metodia, joka palauttaa <code>None</code> tai oletusarvon, jos avainta ei ole olemassa:</p>\r\n\r\n<pre>\r\n<code class=`language-python`>print(my_dict.get(``key4``))  # Tulostaa: None\r\nprint(my_dict.get(``key4``, ``default``))  # Tulostaa: default</code></pre>\r\n\r\n<h3><strong>Sanakirjan muokkaaminen</strong></h3>\r\n\r\n<p>Sanakirjaan voidaan lis&auml;t&auml; uusia avain-arvopareja suoraan:</p>\r\n\r\n<pre>\r\n<code>my_dict[``key4``] = ``value4``\r\nprint(my_dict) # Tulostaa: {``key1``: ``value1``, ``key2``: ``value2``, ``key3``: ``value3``, ``key4``:``value4``}</code></pre>\r\n\r\n<p>Sanakirjan arvoja voidaan my&ouml;s muuttaa viittaamalla niiden avaimeen:</p>\r\n\r\n<pre>\r\n<code>my_dict[``key1``] = ``new value``\r\nprint(my_dict) #Tulostaa:{``key1``: ``new value``, ``key2``: ``value2``, ``key3``: ``value3``, ``key4``:``value4``}\r\n</code></pre>\r\n\r\n<p>Avain-arvopari voidaan poistaa <code>del</code>-avainsanalla:</p>\r\n\r\n<pre>\r\n<code class=`language-python`>del my_dict[``key1``]\r\nprint(my_dict)  # Tulostaa: {``key2``: ``value2``, ``key3``: ``value3``, ``key4``: ``value4``}\r\n</code></pre>\r\n\r\n<h4><strong>Sanakirjan l&auml;pik&auml;ynti</strong></h4>\r\n\r\n<p>Sanakirjan avaimet, arvot tai avain-arvoparit voidaan k&auml;yd&auml; l&auml;pi <code>keys</code>, <code>values</code> tai <code>items</code> -metodeilla:</p>\r\n\r\n<pre>\r\n<code class=`language-python`># Käy läpi avaimet\r\nfor key in my_dict.keys():\r\n    print(key)\r\n\r\n# Käy läpi arvot\r\nfor value in my_dict.values():\r\n    print(value)\r\n\r\n# Käy läpi avain-arvoparit\r\nfor key, value in my_dict.items():\r\n    print(key, value)\r\n</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n</div>\r\n</div>\r\n</div>`,`\r`,char(13)),`\n`,char(10)),NULL,1,1,replace(replace(`<p style=`text-align:center`><strong>Aiheita</strong></p>\r\n\r\n<ul>\r\n	<li>Listojen perusasiat</li>\r\n	<li>Listojen ja merkkijonojen erot</li>\r\n	<li>Tuplet ja niiden erot listoihin</li>\r\n	<li>Setien perusk&auml;ytt&ouml;</li>\r\n</ul>`,`\r`,char(13)),`\n`,char(10)),`tuto_logos/python_basics_2_Y6K0VcW.png`);
INSERT INTO main_app_tutorial VALUES(9,`Python aliohjelmat`,replace(replace(`<h2>Pythonin funktiot eli aliohjelmat</h2>\r\n\r\n<p>Pythonissa funktioita tai aliohjelmia k&auml;ytet&auml;&auml;n koodin modularisointiin, mik&auml; tekee ohjelmasta helpommin ymm&auml;rrett&auml;v&auml;n, testattavan ja yll&auml;pidett&auml;v&auml;n. Funktiot voivat ottaa parametreja, palauttaa arvoja tai tehd&auml; molempia, riippuen siit&auml;, miten ne on m&auml;&auml;ritelty.</p>\r\n\r\n<h3><strong>Pythonin funktioiden rakenne</strong></h3>\r\n\r\n<p>Pythonissa funktio m&auml;&auml;ritell&auml;&auml;n k&auml;ytt&auml;m&auml;ll&auml; <code>def</code> avainsanaa, jonka j&auml;lkeen tulee funktion nimi ja sulkumerkit. Sulkumerkkien sis&auml;ll&auml; ilmoitetaan funktiolle mahdollisesti annettavat parametrit, eroteltuna toisistaan pilkulla. Funktiorakenne on seuraavanlainen:</p>\r\n\r\n<pre>\r\n<code class=`language-python`>def function_name(parameter1, parameter2, ..., parameterN):\r\n    # funktion toiminnallisuus\r\n    return result  # ei pakollinen</code></pre>\r\n\r\n<h3>Miksi k&auml;yt&auml;mme funktioita?</h3>\r\n\r\n<ol>\r\n	<li>\r\n	<p><strong>Koodin uudelleenk&auml;ytt&ouml;</strong>: Samaa koodia voi joutua k&auml;ytt&auml;m&auml;&auml;n useissa paikoissa ohjelmassa. Funktion avulla t&auml;m&auml;n koodin voi m&auml;&auml;ritt&auml;&auml; vain kerran ja kutsua sit&auml; tarvittaessa.</p>\r\n	</li>\r\n	<li>\r\n	<p><strong>Koodin modularisointi</strong>: Suuret ohjelmat voidaan jakaa pienempiin ja hallittavampiin osiin, joita kutsutaan funktioiksi. Jokaisella funktiolla on tietty teht&auml;v&auml;, mik&auml; tekee ohjelman ymm&auml;rt&auml;misest&auml; helpompaa.</p>\r\n	</li>\r\n	<li>\r\n	<p><strong>Piilottaminen ja abstraktio</strong>: Funktiot piilottavat toteutuksen yksityiskohdat ja antavat meille mahdollisuuden keskitty&auml; ohjelman korkeamman tason rakenteeseen. Voimme k&auml;ytt&auml;&auml;&auml; jonkun muun tekem&auml;&auml; py&ouml;r&auml;&auml; tiet&auml;m&auml;tt&auml; miten py&ouml;r&auml; toimii.</p>\r\n	</li>\r\n</ol>\r\n\r\n<h3><strong>Funktioiden argumentit</strong></h3>\r\n\r\n<p>Funktioiden argumentit, tai parametrit, ovat arvoja, jotka funktio ottaa vastaan suorituksen yhteydess&auml;. Ne m&auml;&auml;ritell&auml;&auml;n funktion nimen j&auml;lkeisiss&auml; sulkeissa ja ne erotetaan toisistaan pilkulla. Funktion sis&auml;ll&auml; argumentteja voidaan k&auml;ytt&auml;&auml; samoin kuin muitakin muuttujia.</p>\r\n\r\n<h3><strong>Funktioiden paluuarvot</strong></h3>\r\n\r\n<p>Funktio voi my&ouml;s palauttaa arvon k&auml;ytt&auml;en <code>return</code>-avainsanaa. T&auml;m&auml; arvo voidaan sitten ottaa talteen muuttujaan tai k&auml;ytt&auml;&auml; suoraan esimerkiksi lausekkeessa. <code>return</code>-avainsanan j&auml;lkeen oleva lauseke lasketaan, ja sen arvo palautetaan funktion kutsujalle.</p>\r\n\r\n<h3>Funktiot, jotka eiv&auml;t ota parametreja eiv&auml;tk&auml; palauta arvoa</h3>\r\n\r\n<p>T&auml;llaiset funktiot suorittavat jonkin toiminnon, mutta eiv&auml;t ota sy&ouml;tteen&auml; mit&auml;&auml;n arvoja eiv&auml;tk&auml; palauta mit&auml;&auml;n arvoa. Ne m&auml;&auml;ritell&auml;&auml;n seuraavasti:</p>\r\n\r\n<pre>\r\n<code class=`language-python`>def greet(): \r\nprint(`Hello, world!`) # Funktiota kutsutaan näin: greet() # Tulostaa: Hello, world!</code></pre>\r\n\r\n<h3><strong>Funktiot, jotka palauttavat arvon mutta eiv&auml;t ota parametreja</strong></h3>\r\n\r\n<p>N&auml;m&auml; funktiot suorittavat jonkin toiminnon ja palauttavat arvon, mutta eiv&auml;t ota sy&ouml;tteen&auml; mit&auml;&auml;n arvoja. Ne m&auml;&auml;ritell&auml;&auml;n seuraavasti:</p>\r\n\r\n<pre>\r\n<code class=`language-python`>def get_greeting():\r\n    return `Hello, world!`\r\n\r\n# Funktiota kutsutaan näin:\r\ngreeting = get_greeting()\r\nprint(greeting)  # Tulostaa: Hello, world!</code></pre>\r\n\r\n<h3>Funktiot, jotka ottavat parametreja, mutta eiv&auml;t palauta arvoa</h3>\r\n\r\n<p>N&auml;m&auml; funktiot ottavat sy&ouml;tteen&auml; yhden tai useampia arvoja, mutta eiv&auml;t palauta arvoa. Ne m&auml;&auml;ritell&auml;&auml;n seuraavasti:</p>\r\n\r\n<pre>\r\n<code class=`language-python`>def greet(name):\r\n    print(f`Hello, {name}!`)\r\n\r\n# Funktiota kutsutaan näin:\r\ngreet(`Alice`)  # Tulostaa: Hello, Alice!</code></pre>\r\n\r\n<h3>&nbsp;</h3>\r\n\r\n<h3><strong>Funktiot, jotka ottavat parametreja ja palauttavat arvon</strong></h3>\r\n\r\n<p>N&auml;m&auml; funktiot ottavat sy&ouml;tteen&auml; yhden tai useampia arvoja ja palauttavat arvon. Ne m&auml;&auml;ritell&auml;&auml;n seuraavasti:</p>\r\n\r\n<div>\r\n<pre>\r\n<code class=`language-python`>def greet(name):\r\n    return f`Hello, {name}!`\r\n\r\n# Funktiota kutsutaan näin:\r\ngreeting = greet(`Alice`)\r\nprint(greeting)  # Tulostaa: Hello, Alice!</code></pre>\r\n</div>\r\n\r\n<h2>Pythonin <code>__main__</code>-aliohjelma</h2>\r\n\r\n<p>Python-ohjelmointikieless&auml; <code>__main__</code> on erityinen, sis&auml;&auml;nrakennettu moduuli, joka viittaa nykyiseen suoritettavaan skriptiin tai komentorivik&auml;yt&ouml;ss&auml; suoritettavaan koodiin. Se on ohjelman p&auml;&auml;piste, jonka kautta muut moduulit ja paketit suoritetaan.</p>\r\n\r\n<p>Pythonissa jokaisella moduulilla on nimi, ja t&auml;m&auml; nimi on saatavilla moduulin sis&auml;ll&auml; erityisen&auml; globaalina muuttujana nimelt&auml; <code>__name__</code>. Kun suoritamme skriptin suoraan komentorivilt&auml; tai IDE:st&auml;, <code>__name__</code>-muuttujan arvoksi asetetaan <code>&quot;__main__&quot;</code>. Jos moduuli taas tuodaan toisesta moduulista, <code>__name__</code>-muuttujan arvoksi tulee sen moduulin nimi.</p>\r\n\r\n<p>T&auml;m&auml; ominaisuus mahdollistaa skriptien tai moduulien suorittamisen eri konteksteissa. Esimerkiksi, voit m&auml;&auml;ritt&auml;&auml; koodin, joka suoritetaan vain, jos moduuli suoritetaan p&auml;&auml;ohjelmana eik&auml; tuoda toisesta moduulista. T&auml;m&auml; on hy&ouml;dyllist&auml;, kun haluat m&auml;&auml;ritt&auml;&auml; koodin, joka suoritetaan vain, jos skripti&auml; k&auml;ytet&auml;&auml;n itsen&auml;isen&auml; ohjelmana.</p>\r\n\r\n<p>Seuraava esimerkki havainnollistaa t&auml;t&auml;:</p>\r\n\r\n<pre>\r\n<code class=`language-python`>def hello_world():\r\n    print(`Hello, world!`)\r\n\r\n# Tarkistetaan, onko tämä moduuli pääohjelma\r\nif __name__ == `__main__`:\r\n    hello_world()</code></pre>\r\n\r\n<p>T&auml;ss&auml; esimerkiss&auml; <code>hello_world</code>-funktion m&auml;&auml;rittely tapahtuu riippumatta siit&auml;, suoritetaanko skripti suoraan vai tuodaanko se moduulina toisessa koodissa. Kuitenkin <code>hello_world</code>-funktion suorittaminen tapahtuu vain, jos skripti&auml; suoritetaan suoraan p&auml;&auml;ohjelmana (<code>__name__ == &quot;__main__&quot;</code>).</p>\r\n\r\n<p>T&auml;m&auml; mahdollistaa koodin modulaarisen k&auml;yt&ouml;n, koska samaa kooditiedostoa voidaan k&auml;ytt&auml;&auml; sek&auml; itsen&auml;isen&auml; skriptin&auml; ett&auml; moduulina, joka tuodaan toisesta skriptist&auml;.</p>`,`\r`,char(13)),`\n`,char(10)),NULL,1,1,replace(replace(`<p style=`text-align:center`><strong>Aiheita:</strong></p>\r\n\r\n<ul>\r\n	<li>Aliohjelman esittely ja kutsuminen</li>\r\n	<li>Aliohjelmien paluuarvot</li>\r\n	<li>Aliohjelmien pareametrien v&auml;litys</li>\r\n	<li>main Python p&auml;&auml;ohjelma</li>\r\n</ul>`,`\r`,char(13)),`\n`,char(10)),`tuto_logos/python_basics_2_rG21uVp.png`);
INSERT INTO main_app_tutorial VALUES(10,`Tiedostojen käsittely Pythonissa`,replace(replace(`<h2>Tiedoston Avaaminen</h2>\r\n\r\n<p>Pythonissa tiedoston avaaminen on yksinkertaista <code>open()</code>-funktiolla:</p>\r\n\r\n<pre>\r\n<code class=`language-python`>file = open(``esimerkki.txt``, ``r``)</code></pre>\r\n\r\n<p>&nbsp;funktiossa voidaan k&auml;ytt&auml;&auml; erilaisia merkkej&auml; kuvaamaan tiedoston avaustilaa. T&auml;ss&auml; ovat yleisimm&auml;t:</p>\r\n\r\n<ul>\r\n	<li>\r\n	<p><strong>&#39;r&#39;:</strong> T&auml;m&auml; on oletustila. Se avaa tiedoston vain luku -tilassa. Jos tiedostoa ei ole olemassa, se palauttaa <code>FileNotFoundError</code>.</p>\r\n	</li>\r\n	<li>\r\n	<p><strong>&#39;w&#39;</strong>: T&auml;m&auml; tila avaa tiedoston vain kirjoitus -tilaan. Olemassa oleva tiedosto t&auml;ll&auml; nimell&auml; poistetaan ennen uuden luomista. Jos tiedostoa ei ole olemassa, se luo uuden.</p>\r\n	</li>\r\n	<li>\r\n	<p><strong>&#39;x&#39;</strong>: T&auml;m&auml; tila luo uuden tiedoston vain kirjoitus -tilaan. Jos tiedosto on jo olemassa, se palauttaa <code>FileExistsError</code>.</p>\r\n	</li>\r\n	<li>\r\n	<p><strong>&#39;a&#39;</strong>: T&auml;m&auml; tila avaa tiedoston kirjoitus -tilaan, mutta tiedoston loppuun. Jos tiedostoa ei ole, se luo uuden.</p>\r\n	</li>\r\n	<li>\r\n	<p>&#39;<strong>b&#39;</strong>: T&auml;m&auml; tila avaa tiedoston bin&auml;&auml;ritilassa. Se voidaan yhdist&auml;&auml; muiden tilojen kanssa (esim. &#39;rb&#39; avaa tiedoston bin&auml;&auml;ritilassa lukemista varten).</p>\r\n	</li>\r\n	<li>\r\n	<p><strong>&#39;t&#39;</strong>: T&auml;m&auml; tila avaa tiedoston tekstitilassa. Se on oletusarvoinen tila, ja voidaan yhdist&auml;&auml; muiden tilojen kanssa.</p>\r\n	</li>\r\n	<li>\r\n	<p><strong>&#39;+&#39;</strong>: T&auml;m&auml; tila avaa tiedoston p&auml;ivitt&auml;mist&auml; varten (luku ja kirjoitus). Se voidaan yhdist&auml;&auml; muiden tilojen kanssa (esim. &#39;r+&#39; avaa tiedoston lukemista ja kirjoittamista varten).</p>\r\n	</li>\r\n</ul>\r\n\r\n<h2>Tiedoston Lukeminen</h2>\r\n\r\n<p>Tiedostosta lukeminen on helppoa <code>read()</code>-metodilla:</p>\r\n\r\n<pre>\r\n<code class=`language-python`>file = open(``esimerkki.txt``, ``r``)\r\nprint(file.read())\r\nfile.close()</code></pre>\r\n\r\n<p><code>read()</code> lukee koko tiedoston. <code>close()</code>-metodi sulkee tiedoston ja vapauttaa j&auml;rjestelm&auml;resursseja.</p>\r\n\r\n<h2>Rivi kerrallaan lukeminen</h2>\r\n\r\n<p>Voimme lukea tiedoston rivi kerrallaan <code>readline()</code>-metodilla:</p>\r\n\r\n<pre>\r\n<code class=`language-python`>file = open(``esimerkki.txt``, ``r``)\r\nprint(file.readline())\r\nfile.close()</code></pre>\r\n\r\n<p>Huomaa, ett&auml; &#39;w&#39;-tila ylikirjoittaa tiedoston, jos se on olemassa. Jos haluat lis&auml;t&auml; teksti&auml; olemassa olevan tiedoston loppuun, k&auml;yt&auml; &#39;a&#39; (append) -tilaa.</p>\r\n\r\n<h2>Tiedoston sulkeminen</h2>\r\n\r\n<p>On eritt&auml;in t&auml;rke&auml;&auml; sulkea tiedostot <code>close()</code>-metodilla, kun olet valmis:</p>\r\n\r\n<pre>\r\n<code class=`language-python`>file = open(``esimerkki.txt``, ``r``)\r\nprint(file.read())\r\nfile.close()</code></pre>\r\n\r\n<h2><code>with</code> avainsana</h2>\r\n\r\n<p>Pythonin <code>with</code> avainsanaa voidaan k&auml;ytt&auml;&auml; tiedostojen kanssa. T&auml;m&auml; varmistaa, ett&auml; tiedosto suljetaan oikein, kun lohko suoritetaan:</p>\r\n\r\n<pre>\r\n<code class=`language-python`>with open(``esimerkki.txt``, ``r``) as file:\r\n    print(file.read())</code></pre>\r\n\r\n<p>T&auml;ss&auml; tiedoston avaamisen ja sulkemisen hoitaa <code>with</code>-lause, joten meid&auml;n ei tarvitse huolehtia siit&auml; itse.</p>`,`\r`,char(13)),`\n`,char(10)),NULL,1,1,replace(replace(`<p style=`text-align:center`><strong>Aiheita</strong></p>\r\n\r\n<ul>\r\n	<li>Tiedoston avaaminen</li>\r\n	<li>Tiedoston luku&nbsp;</li>\r\n	<li>Tiedoston kirjoitus</li>\r\n	<li>Tiedoston sulkeminen</li>\r\n	<li>with-rakenne</li>\r\n</ul>`,`\r`,char(13)),`\n`,char(10)),`tuto_logos/python_basics_2_f50P87E.png`);
INSERT INTO main_app_tutorial VALUES(11,`Luokat/Oliot Pythonissa`,replace(replace(`<p>Python on olio-ohjelmointikieli. T&auml;m&auml; tarkoittaa, ett&auml; Python tukee olioiden, luokkien, perinn&auml;n ja monipolisen k&auml;sitteit&auml;. T&auml;ss&auml; tutoriaalissa keskityt&auml;&auml;n luokkien perusasioihin. Luokan periminen ja muut monimutkaiset asiat j&auml;tet&auml;&auml;n tulevaisuuteen</p>\r\n\r\n<h2>Luokan m&auml;&auml;ritt&auml;minen</h2>\r\n\r\n<p>Pythonissa luokka m&auml;&auml;ritet&auml;&auml;n <code>class</code> avainsanalla. Seuraavassa esimerkiss&auml; m&auml;&auml;ritet&auml;&auml;n luokka nimelt&auml; <code>Auto</code>:</p>\r\n\r\n<pre>\r\n<code class=`language-python`>class Auto:\r\n    pass</code></pre>\r\n\r\n<p>T&auml;ss&auml; <code>pass</code> on paikkat&auml;ytt&ouml;operaattori, jota k&auml;ytet&auml;&auml;n, kun lohko ei sis&auml;ll&auml; mit&auml;&auml;n koodia.</p>\r\n\r\n<h2>Attribuutit</h2>\r\n\r\n<p>Luokan attribuutit ovat muuttujia, jotka on m&auml;&auml;ritelty luokan sis&auml;ll&auml;. Ne edustavat olion tilaa. T&auml;ss&auml; esimerkiss&auml; <code>Auto</code>-luokalla on kaksi attribuuttia: <code>merkki</code> ja <code>vuosi</code>:</p>\r\n\r\n<pre>\r\n<code class=`language-python`>class Auto:\r\n    merkki = ``Toyota``\r\n    vuosi = 2015</code></pre>\r\n\r\n<h2>Metodit</h2>\r\n\r\n<p>Luokan metodit ovat funktioita, jotka on m&auml;&auml;ritelty luokan sis&auml;ll&auml;. Ne edustavat olion k&auml;ytt&auml;ytymist&auml;. Esimerkiksi voimme m&auml;&auml;ritell&auml; <code>nayta_tiedot</code> metodin, joka tulostaa auton tiedot:</p>\r\n\r\n<pre>\r\n<code class=`language-python`>class Auto:\r\n    merkki = ``Toyota``\r\n    vuosi = 2015\r\n\r\n    def nayta_tiedot(self):\r\n        print(f``Merkki: {self.merkki}, Vuosi: {self.vuosi}``)</code></pre>\r\n\r\n<h2><code>__init__</code>-metodi</h2>\r\n\r\n<p><code>__init__</code> on erityinen metodi, jota kutsutaan luokan olion luomisen yhteydess&auml;. Sit&auml; k&auml;ytet&auml;&auml;n olion tilan alustamiseen. <code>self</code>-parametri viittaa luotavaan olioon:</p>\r\n\r\n<pre>\r\n<code class=`language-python`>class Auto:\r\n    def __init__(self, merkki, vuosi):\r\n        self.merkki = merkki\r\n        self.vuosi = vuosi\r\n\r\n    def nayta_tiedot(self):\r\n        print(f``Merkki: {self.merkki}, Vuosi: {self.vuosi}``)</code></pre>\r\n\r\n<p>Metodien argumenttien v&auml;litys on samanlaista kuin funktioiden kanssa toimimisessa. Ainoana erona on <em>self</em>-sana joka on jokaisen metodin ensimm&auml;inen argumentti. Self-sanasta lis&auml;&auml; seuraavaksi.</p>\r\n\r\n<h2>Self</h2>\r\n\r\n<p>Pythonissa &quot;self&quot; viittaa olion itseens&auml;. Se on tapa, jolla olio viittaa omiin attribuutteihinsa ja metodeihinsa. Se on my&ouml;s ensimm&auml;inen parametri, joka m&auml;&auml;ritell&auml;&auml;n luokan metodissa. &quot;self&quot; ei ole Pythonin avainsana, vaan se on vain yleisesti k&auml;ytetty nimitys t&auml;lle erityiselle parametrille. Voit itse asiassa k&auml;ytt&auml;&auml; mit&auml; tahansa nime&auml;, mutta &quot;self&quot; on yleinen tapa ja sit&auml; suositellaan Pythonin yhteis&ouml;ss&auml;.</p>\r\n\r\n<p>Esimerkiksi otetaan luokka &quot;Auto&quot;:</p>\r\n\r\n<pre>\r\n<code class=`language-python`>class Auto:\r\n    def __init__(self, merkki, vuosi):\r\n        self.merkki = merkki\r\n        self.vuosi = vuosi\r\n\r\n    def nayta_tiedot(self):\r\n        print(f``Merkki: {self.merkki}, Vuosi: {self.vuosi}``)</code></pre>\r\n\r\n<p>T&auml;ss&auml; <code>__init__</code>-metodissa &quot;self&quot; viittaa luotavaan olioon ja &quot;self.merkki&quot; ja &quot;self.vuosi&quot; ovat olion attribuutteja. &quot;self&quot; on my&ouml;s ensimm&auml;inen parametri <code>nayta_tiedot</code>-metodissa, ja sit&auml; k&auml;ytet&auml;&auml;n viittaamaan olion attribuutteihin.</p>\r\n\r\n<p>Kun luot uuden olion ja kutsut metodia, Python antaa automaattisesti ensimm&auml;isen &quot;self&quot;-parametrin:</p>\r\n\r\n<pre>\r\n<code class=`language-python`>auto = Auto(``Toyota``, 2015)\r\nauto.nayta_tiedot()  # Tulostaa: Merkki: Toyota, Vuosi: 2015</code></pre>\r\n\r\n<p>Vaikka &quot;nayta_tiedot&quot;-metodin m&auml;&auml;rittelyss&auml; on yksi parametri (self), emme anna sit&auml; kutsuttaessa, koska Python antaa sen automaattisesti.</p>\r\n\r\n<h2>Luokan k&auml;ytt&auml;minen</h2>\r\n\r\n<p>Seuraavaksi yksinkertainen esimerkki siit&auml;, miten luokkaa voidaan k&auml;ytt&auml;&auml; Pythonissa. T&auml;ss&auml; esimerkiss&auml; luomme <code>Auto</code>-luokan, jolla on attribuutteja ja metodeja, ja sitten luomme instanssin, eli olion, t&auml;st&auml; luokasta:</p>\r\n\r\n<pre>\r\n<code class=`language-python`>class Auto:\r\n    # __init__ on erityinen metodi, jota kutsutaan, kun luomme uuden olion luokasta.\r\n    # Se ottaa parametreina self (viittaus luotavaan olioon) ja mahdolliset muut parametrit.\r\n    def __init__(self, merkki, malli, vuosi):\r\n        # Tässä asetamme olion attribuutit.\r\n        self.merkki = merkki\r\n        self.malli = malli\r\n        self.vuosi = vuosi\r\n        self.kilometrit = 0  # Alustamme kilometrit nollaksi.\r\n\r\n    # Tämä on metodi, jonka avulla voimme lisätä ajettuja kilometrejä.\r\n    def aja(self, km):\r\n        if km &gt; 0:\r\n            self.kilometrit += km\r\n        else:\r\n            print(`Kilometrien määrän on oltava positiivinen luku.`)\r\n\r\n    # Tämä metodi tulostaa auton tiedot.\r\n    def tulosta_tiedot(self):\r\n        print(f`Auto: {self.merkki} {self.malli}, vuosimalli: {self.vuosi}, ajetut kilometrit: {self.kilometrit}`)\r\n\r\n\r\n# Nyt luomme olion luokasta.\r\nauto1 = Auto(`Toyota`, `Corolla`, 2012)# tämä kutsuu __init__ -metodia \r\n\r\n# Voimme kutsua olion metodeja käyttämällä pistenotaatiota.\r\nauto1.aja(15000)# huom kutsussa ei ole self se tulee autoaattisesti \r\nauto1.tulosta_tiedot()  # Tulostaa: Auto: Toyota Corolla, vuosimalli: 2012, ajetut kilometrit: 15000 taasen ei self:iä </code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>`,`\r`,char(13)),`\n`,char(10)),NULL,1,1,replace(replace(`<p style=`text-align:center`><strong>Aiheita</strong></p>\r\n\r\n<ul>\r\n	<li>Luokan esittely</li>\r\n	<li>Attribuutit</li>\r\n	<li>Metodit</li>\r\n	<li>__init__-metodi</li>\r\n	<li>Luokasta olio</li>\r\n</ul>`,`\r`,char(13)),`\n`,char(10)),`tuto_logos/python_basics_2_sWQ7bOO.png`);
INSERT INTO main_app_tutorial VALUES(12,`Lambda funktio Pythonissa`,replace(replace(`<p>Pythonin lambda-funktio on pieni anonyymi funktio, jota k&auml;ytet&auml;&auml;n yleens&auml; lyhyiss&auml;, yksinkertaisissa tapauksissa, kuten funktioiden parametreina tai silloin, kun tarvitset pienen funktion, mutta et halua m&auml;&auml;ritt&auml;&auml; sit&auml; erikseen <code>def</code>-avainsanalla.</p>\r\n\r\n<p>Lambda-funktion syntaksi on seuraava:</p>\r\n\r\n<pre>\r\n<code class=`language-python`>lambda arguments: expression</code></pre>\r\n\r\n<p>Lambda voi ottaa useita argumentteja, mutta se voi sis&auml;lt&auml;&auml; vain yhden ilmauksen.</p>\r\n\r\n<p><strong>Lambda-funktion esimerkki</strong></p>\r\n\r\n<p>Esimerkiksi, jos haluat luoda funktion, joka neli&ouml;i numeron, se tehd&auml;&auml;n n&auml;in:</p>\r\n\r\n<pre>\r\n<code class=`language-python`>square = lambda x: x * x\r\nprint(square(5))  # Tulostaa: 25</code></pre>\r\n\r\n<p><strong>Lambda ja filter-funktio</strong></p>\r\n\r\n<p>Lambda-funktioita k&auml;ytet&auml;&auml;n usein yhdess&auml; sis&auml;&auml;nrakennettujen funktioiden, kuten <code>filter()</code>- ja <code>map()</code>-funktioiden kanssa. Esimerkiksi, jos haluat suodattaa listan j&auml;senet, jotka ovat suurempia kuin 5, voit k&auml;ytt&auml;&auml; lambda-funktiota seuraavasti:</p>\r\n\r\n<pre>\r\n<code class=`language-python`>numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\nfiltered_numbers = list(filter(lambda x: x &gt; 5, numbers))\r\nprint(filtered_numbers)  # Tulostaa: [6, 7, 8, 9, 10]</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Lambda ja map-funktio </strong></p>\r\n\r\n<p>Samoin voit k&auml;ytt&auml;&auml; lambda-funktiota <code>map()</code>-funktion kanssa, joka suorittaa funktion jokaiselle listan j&auml;senelle. Esimerkiksi, jos haluat neli&ouml;id&auml; kaikki numerot listassa, voit tehd&auml; sen seuraavasti:</p>\r\n\r\n<pre>\r\n<code class=`language-python`>numbers = [1, 2, 3, 4, 5]\r\nsquared_numbers = list(map(lambda x: x ** 2, numbers))\r\nprint(squared_numbers)  # Tulostaa: [1, 4, 9, 16, 25]</code></pre>\r\n\r\n<p>Huomaa, ett&auml; vaikka lambda-funktiot ovat k&auml;tevi&auml; pieniss&auml; tapauksissa, niit&auml; ei pit&auml;isi k&auml;ytt&auml;&auml; monimutkaisten tai pitkien funktioiden korvaamiseen, koska ne voivat tehd&auml; koodista vaikeasti luettavaa.</p>`,`\r`,char(13)),`\n`,char(10)),NULL,1,1,replace(replace(`<p style=`text-align:center`><strong>Aiheita</strong></p>\r\n\r\n<ul>\r\n	<li>Mik&auml; ihmeen lambda-funktio</li>\r\n	<li>Syntaksi ja k&auml;ytt&ouml;</li>\r\n	<li>K&auml;ytt&ouml;kohteet</li>\r\n	<li>Kaytt&ouml; filter- ja map-funktioiden kanssa</li>\r\n</ul>`,`\r`,char(13)),`\n`,char(10)),`tuto_logos/python_basics_2_fINhnF7.png`);
INSERT INTO main_app_tutorial VALUES(13,`Poikkeuksien käsittely Pythonissa`,replace(replace(`<p>Pythonissa <code>try</code>/<code>except</code> -rakennetta k&auml;ytet&auml;&auml;n poikkeusten (virheiden) k&auml;sittelyyn ohjelman suorituksen aikana. T&auml;m&auml; mahdollistaa ohjelman jatkuvan toiminnan my&ouml;s virhetilanteissa, kunhan virheet k&auml;sitell&auml;&auml;n asianmukaisesti.</p>\r\n\r\n<p>Perus syntaksi on seuraava:</p>\r\n\r\n<pre>\r\n<code class=`language-python`>try:\r\n    # Koodi, joka voi aiheuttaa virheen\r\nexcept Exception:\r\n    # Koodi, joka suoritetaan, jos virhe tapahtuu</code></pre>\r\n\r\n<h3>Yksinkertainen esimerkki:</h3>\r\n\r\n<pre>\r\n<code class=`language-python`>try:\r\n    print(5/0)\r\nexcept Exception:\r\n    print(`Et voi jakaa luvulla nolla!`)</code></pre>\r\n\r\n<p>T&auml;ss&auml; esimerkiss&auml; yrit&auml;mme jakaa luvun viisi nollalla, mik&auml; aiheuttaa <code>ZeroDivisionError</code> -virheen. T&auml;m&auml; virhe k&auml;sitell&auml;&auml;n <code>except</code> -lohkossa ja tulostetaan virheilmoitus &quot;Et voi jakaa luvulla nolla!&quot;.</p>\r\n\r\n<h3>Useiden virheiden k&auml;sittely</h3>\r\n\r\n<p>Voimme my&ouml;s k&auml;sitell&auml; useita erityyppisi&auml; virheit&auml; eri <code>except</code> -lohkoissa:</p>\r\n\r\n<pre>\r\n<code class=`language-python`>try:\r\n    num = int(input(`Syötä kokonaisluku: `))\r\n    print(`Syöttämäsi luku oli: `, num)\r\nexcept ValueError:\r\n    print(`Syöttämäsi arvo ei ollut kokonaisluku.`)\r\nexcept Exception:\r\n    print(`Jokin meni pieleen!`)</code></pre>\r\n\r\n<p>T&auml;ss&auml; esimerkiss&auml; k&auml;yt&auml;mme <code>int(input())</code>-funktiota lukemaan kokonaisluvun k&auml;ytt&auml;j&auml;lt&auml;. Jos k&auml;ytt&auml;j&auml; sy&ouml;tt&auml;&auml; jotain, joka ei ole kokonaisluku, <code>int()</code>-funktion kutsu aiheuttaa <code>ValueError</code>-virheen, joka k&auml;sitell&auml;&auml;n ensimm&auml;isess&auml; <code>except</code> -lohkossa.</p>\r\n\r\n<h3><strong>Finally -lohko</strong></h3>\r\n\r\n<p>Pythonissa on my&ouml;s <code>finally</code> -lohko, joka suoritetaan riippumatta siit&auml;, tapahtuuko <code>try</code> -lohkossa virhe tai ei:</p>\r\n\r\n<pre>\r\n<code class=`language-python`>try:\r\n    print(5/0)\r\nexcept Exception:\r\n    print(`Et voi jakaa luvulla nolla!`)\r\nfinally:\r\n    print(`Tämä tulostetaan aina.`)</code></pre>\r\n\r\n<p>T&auml;ss&auml; <code>finally</code> -lohkon koodi tulostetaan riippumatta siit&auml;, tapahtuuko virhe tai ei.</p>\r\n\r\n<h3><strong>Else -lohko</strong></h3>\r\n\r\n<p>Pythonissa on my&ouml;s <code>else</code> -lohko, joka suoritetaan, jos <code>try</code>-lohkossa ei tapahdu virheit&auml;:</p>\r\n\r\n<pre>\r\n<code class=`language-python`>try:\r\n    print(5/1)\r\nexcept Exception:\r\n    print(`Jokin meni pieleen!`)\r\nelse:\r\n    print(`Kaikki meni hyvin.`)</code></pre>\r\n\r\n<p>T&auml;ss&auml; esimerkiss&auml; <code>else</code> -lohkon koodi tulostetaan, koska <code>try</code>-lohkossa ei tapahdu virhett&auml;.</p>\r\n\r\n<h3><strong>Poikkeuksen k&auml;sittely: except as e-rakenteella</strong></h3>\r\n\r\n<p>Usein on hy&ouml;dyllist&auml; saada lis&auml;tietoja siit&auml;, mit&auml; virhett&auml; tapahtui. Voit tehd&auml; t&auml;m&auml;n <code>as e</code> -syntaksin avulla:</p>\r\n\r\n<pre>\r\n<code class=`language-python`>try:\r\n    x = 1 / 0\r\nexcept ZeroDivisionError as e:\r\n    print(f`Poikkeus tapahtui: {e}`)</code></pre>\r\n\r\n<p>T&auml;ss&auml; <code>e</code> on olio, joka edustaa tapahtunutta poikkeusta. Voit k&auml;ytt&auml;&auml; t&auml;t&auml; oliota saadaksesi lis&auml;tietoja poikkeuksesta. Esimerkiksi, voit tulostaa virheviestin, joka liittyy poikkeukseen.</p>\r\n\r\n<p>Jos haluat pyydyst&auml;&auml; useita eri poikkeuksia, voit tehd&auml; sen lis&auml;&auml;m&auml;ll&auml; useita <code>except</code>-lohkoja:</p>\r\n\r\n<pre>\r\n<code class=`language-python`>try:\r\n    x = 1 / 0\r\nexcept ZeroDivisionError as e:\r\n    print(f`Nollalla jakamisen poikkeus: {e}`)\r\nexcept TypeError as e:\r\n    print(f`Tyypin virheellisyys: {e}`)</code></pre>\r\n\r\n<p>T&auml;m&auml; koodi pyydyst&auml;&auml; sek&auml; <code>ZeroDivisionError</code>- ett&auml; <code>TypeError</code>-poikkeukset, ja tulostaa kuhunkin liittyv&auml;n virheviestin.</p>\r\n\r\n<p>Lopuksi, voit pyydyst&auml;&auml; kaikki poikkeukset k&auml;ytt&auml;m&auml;ll&auml; <code>except</code>-lohkoa ilman poikkeuksen nime&auml;:</p>\r\n\r\n<pre>\r\n<code class=`language-python`>try:\r\n    x = 1 / 0\r\nexcept Exception as e:\r\n    print(f`Poikkeus tapahtui: {e}`)</code></pre>\r\n\r\n<p>T&auml;m&auml; pyydyst&auml;&auml; kaikki <code>Exception</code>-luokasta periytyv&auml;t poikkeukset. Huomaa, ett&auml; t&auml;m&auml; pyydyst&auml;&auml; my&ouml;s esimerkiksi <code>KeyboardInterrupt</code>-poikkeukset, jotka tapahtuvat, kun k&auml;ytt&auml;j&auml; keskeytt&auml;&auml; ohjelman suorituksen (esimerkiksi painamalla Ctrl+C), joten sit&auml; ei suositella k&auml;ytett&auml;v&auml;ksi ellei erityist&auml; tarvetta ole.</p>\r\n\r\n<h3><strong>K&auml;ytt&auml;j&auml;n m&auml;&auml;rittelem&auml;t poikkeukset</strong></h3>\r\n\r\n<p>Pythonissa <code>raise</code>-avainsanaa voidaan k&auml;ytt&auml;&auml; nostamaan poikkeuksia. T&auml;m&auml; antaa meille mahdollisuuden luoda omia virheilmoituksiamme ja nostaa ne tarpeen mukaan. Voimme joko nostaa olemassa olevan poikkeuksen tai luoda omia.</p>\r\n\r\n<pre>\r\n<code class=`language-python`>try:\r\n    x = -10\r\n    if x &lt; 0:\r\n        raise ValueError(`x ei voi olla negatiivinen`)\r\nexcept ValueError as e:\r\n    print(e)</code></pre>\r\n\r\n<p>T&auml;ss&auml; esimerkiss&auml; nostamme <code>ValueError</code>-poikkeuksen, jos <code>x</code> on negatiivinen. Sitten k&auml;sittelemme t&auml;m&auml;n poikkeuksen <code>except</code>-lohkossa ja tulostamme virheviestin.</p>\r\n\r\n<h3><strong>K&auml;ytt&auml;j&auml;n m&auml;&auml;rittelem&auml;t poikkeukset luokilla </strong></h3>\r\n\r\n<p>Voimme my&ouml;s luoda omia poikkeuksia luomalla uuden luokan, joka perii <code>Exception</code>-luokan. T&auml;m&auml; antaa meille mahdollisuuden m&auml;&auml;ritt&auml;&auml; poikkeukset, jotka sopivat paremmin ohjelmiimme.</p>\r\n\r\n<pre>\r\n<code class=`language-python`>class NegativeNumberError(Exception):\r\n    pass\r\n\r\ntry:\r\n    x = -10\r\n    if x &lt; 0:\r\n        raise NegativeNumberError(`x ei voi olla negatiivinen`)\r\nexcept NegativeNumberError as e:\r\n    print(e)</code></pre>\r\n\r\n<p>T&auml;ss&auml; esimerkiss&auml; loimme uuden poikkeusluokan nimelt&auml; <code>NegativeNumberError</code>, joka perii Pythonin sis&auml;&auml;nrakennetun <code>Exception</code>-luokan. Nostamme sitten t&auml;m&auml;n poikkeuksen, jos <code>x</code> on negatiivinen, ja k&auml;sittelemme sen <code>except</code>-lohkossa.</p>\r\n\r\n<p>Muistathan, ett&auml; poikkeuksia ei tulisi k&auml;ytt&auml;&auml; normaalin ohjelman ohjausvirran hallintaan. Ne on suunniteltu erityistilanteita varten, joissa normaali toiminta ei ole mahdollista.</p>`,`\r`,char(13)),`\n`,char(10)),NULL,1,1,replace(replace(`<p style=`text-align:center`><strong>Aiheita</strong></p>\r\n\r\n<ul>\r\n	<li>Perusteet poikeuksista</li>\r\n	<li>Try&nbsp; except-sanat</li>\r\n	<li>Monimutkaisemmat try-lohkot</li>\r\n	<li>except as e-rakenne</li>\r\n</ul>`,`\r`,char(13)),`\n`,char(10)),`tuto_logos/python_basics_2_xwqroLt.png`);
CREATE TABLE IF NOT EXISTS `user_task` (`id` integer NOT NULL PRIMARY KEY AUTO_INCREMENT, `status` varchar(10) NOT NULL, `task_id` bigint NOT NULL REFERENCES `main_app_task` (`id`) , `user_id` bigint NOT NULL REFERENCES `main_app_user` (`id`) , CONSTRAINT `user_task_uniq` UNIQUE (`user_id`, `task_id`));
INSERT INTO user_task VALUES(1,`solved`,1,1);
INSERT INTO user_task VALUES(2,`solved`,2,1);
INSERT INTO user_task VALUES(3,`solved`,4,1);
INSERT INTO user_task VALUES(4,`started`,1,3);
INSERT INTO user_task VALUES(5,`solved`,5,1);
INSERT INTO user_task VALUES(6,`started`,1,5);
INSERT INTO user_task VALUES(7,`started`,2,5);
INSERT INTO user_task VALUES(8,`solved`,7,1);
INSERT INTO user_task VALUES(9,`solved`,6,1);
INSERT INTO user_task VALUES(10,`started`,1,2);
INSERT INTO user_task VALUES(11,`solved`,8,1);
INSERT INTO user_task VALUES(12,`solved`,11,1);
INSERT INTO user_task VALUES(13,`solved`,12,1);
INSERT INTO user_task VALUES(14,`solved`,13,1);
INSERT INTO user_task VALUES(15,`started`,15,1);
INSERT INTO user_task VALUES(16,`solved`,18,1);
INSERT INTO user_task VALUES(17,`solved`,19,1);
INSERT INTO user_task VALUES(18,`solved`,9,1);
INSERT INTO user_task VALUES(19,`solved`,10,1);
INSERT INTO user_task VALUES(20,`solved`,14,1);
INSERT INTO user_task VALUES(21,`solved`,20,1);
INSERT INTO user_task VALUES(22,`solved`,21,1);
INSERT INTO user_task VALUES(23,`solved`,22,1);
INSERT INTO user_task VALUES(24,`solved`,23,1);
INSERT INTO user_task VALUES(25,`solved`,24,1);
INSERT INTO user_task VALUES(26,`solved`,25,1);
INSERT INTO user_task VALUES(27,`solved`,16,1);
INSERT INTO user_task VALUES(28,`solved`,26,1);
INSERT INTO user_task VALUES(29,`solved`,27,1);
INSERT INTO user_task VALUES(30,`solved`,4,2);
INSERT INTO user_task VALUES(31,`started`,5,2);
INSERT INTO user_task VALUES(32,`solved`,6,2);
INSERT INTO user_task VALUES(33,`started`,1,7);
INSERT INTO user_task VALUES(34,`solved`,1,6);
INSERT INTO user_task VALUES(35,`solved`,2,6);
INSERT INTO user_task VALUES(36,`solved`,4,6);
INSERT INTO user_task VALUES(37,`solved`,5,6);
INSERT INTO user_task VALUES(38,`solved`,6,6);
INSERT INTO user_task VALUES(39,`solved`,10,6);
INSERT INTO user_task VALUES(40,`started`,8,6);
INSERT INTO user_task VALUES(41,`solved`,7,6);
INSERT INTO user_task VALUES(42,`solved`,9,6);
INSERT INTO user_task VALUES(43,`solved`,23,6);
INSERT INTO user_task VALUES(44,`solved`,18,6);
INSERT INTO user_task VALUES(45,`solved`,22,6);
INSERT INTO user_task VALUES(46,`solved`,25,6);
INSERT INTO user_task VALUES(47,`solved`,24,6);
DELETE FROM sqlite_sequence;
INSERT INTO sqlite_sequence VALUES(`django_migrations`,35);
INSERT INTO sqlite_sequence VALUES(`django_content_type`,18);
INSERT INTO sqlite_sequence VALUES(`auth_permission`,72);
INSERT INTO sqlite_sequence VALUES(`auth_group`,0);
INSERT INTO sqlite_sequence VALUES(`django_admin_log`,513);
INSERT INTO sqlite_sequence VALUES(`main_app_tutorialcategory`,1);
INSERT INTO sqlite_sequence VALUES(`main_app_answer`,27);
INSERT INTO sqlite_sequence VALUES(`main_app_useranswer`,42);
INSERT INTO sqlite_sequence VALUES(`main_app_taskcategory`,11);
INSERT INTO sqlite_sequence VALUES(`main_app_user`,7);
INSERT INTO sqlite_sequence VALUES(`main_app_task`,27);
INSERT INTO sqlite_sequence VALUES(`main_app_usercourse`,7);
INSERT INTO sqlite_sequence VALUES(`main_app_tasktest`,29);
INSERT INTO sqlite_sequence VALUES(`main_app_course`,5);
INSERT INTO sqlite_sequence VALUES(`main_app_tutorial`,13);
INSERT INTO sqlite_sequence VALUES(`user_task`,47);
CREATE UNIQUE INDEX `django_content_type_app_label_model_76bd3d3b_uniq` ON `django_content_type` (`app_label`, `model`);
CREATE UNIQUE INDEX `auth_group_permissions_group_id_permission_id_0cd325b0_uniq` ON `auth_group_permissions` (`group_id`, `permission_id`);
CREATE INDEX `auth_group_permissions_group_id_b120cbf9` ON `auth_group_permissions` (`group_id`);
CREATE INDEX `auth_group_permissions_permission_id_84c5c92e` ON `auth_group_permissions` (`permission_id`);
CREATE UNIQUE INDEX `auth_permission_content_type_id_codename_01ab375a_uniq` ON `auth_permission` (`content_type_id`, `codename`);
CREATE INDEX `auth_permission_content_type_id_2f476e4b` ON `auth_permission` (`content_type_id`);
CREATE UNIQUE INDEX `main_app_user_groups_user_id_group_id_a7d7cd1b_uniq` ON `main_app_user_groups` (`user_id`, `group_id`);
CREATE INDEX `main_app_user_groups_user_id_8fd498e0` ON `main_app_user_groups` (`user_id`);
CREATE INDEX `main_app_user_groups_group_id_8a48b2df` ON `main_app_user_groups` (`group_id`);
CREATE UNIQUE INDEX `main_app_user_user_permissions_user_id_permission_id_04c23478_uniq` ON `main_app_user_user_permissions` (`user_id`, `permission_id`);
CREATE INDEX `main_app_user_user_permissions_user_id_0d3a2d75` ON `main_app_user_user_permissions` (`user_id`);
CREATE INDEX `main_app_user_user_permissions_permission_id_496a5f9a` ON `main_app_user_user_permissions` (`permission_id`);
CREATE INDEX `django_admin_log_content_type_id_c4bce8eb` ON `django_admin_log` (`content_type_id`);
CREATE INDEX `django_admin_log_user_id_c564eba6` ON `django_admin_log` (`user_id`);
CREATE INDEX `django_session_expire_date_a5c62663` ON `django_session` (`expire_date`);
CREATE INDEX `main_app_usercourse_course_id_baac2acf` ON `main_app_usercourse` (`course_id`);
CREATE INDEX `main_app_usercourse_user_id_a97cdd53` ON `main_app_usercourse` (`user_id`);
CREATE INDEX `main_app_answer_task_id_4e5d351e` ON `main_app_answer` (`task_id`);
CREATE UNIQUE INDEX `main_app_useranswer_user_id_task_id_b87cc924_uniq` ON `main_app_useranswer` (`user_id`, `task_id`);
CREATE INDEX `main_app_useranswer_task_id_8c4bd4a6` ON `main_app_useranswer` (`task_id`);
CREATE INDEX `main_app_useranswer_user_id_6de29ee2` ON `main_app_useranswer` (`user_id`);
CREATE INDEX `main_app_task_course_id_88c7fd05` ON `main_app_task` (`course_id`);
CREATE INDEX `main_app_task_tutorial_id_bf9946a3` ON `main_app_task` (`tutorial_id`);
CREATE INDEX `main_app_task_category_id_6f783958` ON `main_app_task` (`category_id`);
CREATE INDEX `main_app_performedcourse_course_id_dd297b6a` ON `main_app_performedcourse` (`course_id`);
CREATE INDEX `main_app_performedcourse_user_id_60e5bbdc` ON `main_app_performedcourse` (`user_id`);
CREATE INDEX `main_app_ongoingcourse_course_id_3bdd7cdc` ON `main_app_ongoingcourse` (`course_id`);
CREATE INDEX `main_app_ongoingcourse_user_id_91f71993` ON `main_app_ongoingcourse` (`user_id`);
CREATE INDEX `main_app_tasktest_answer_id_e606d4f1` ON `main_app_tasktest` (`answer_id`);
CREATE INDEX `main_app_tasktest_task_id_43c8c213` ON `main_app_tasktest` (`task_id`);
CREATE INDEX `main_app_course_creator_id_569462a8` ON `main_app_course` (`creator_id`);
CREATE INDEX `main_app_tutorial_category_id_6aa1741c` ON `main_app_tutorial` (`category_id`);
CREATE INDEX `main_app_tutorial_course_id_f945d5b8` ON `main_app_tutorial` (`course_id`);
CREATE UNIQUE INDEX `main_app_usertask_user_id_task_id_b4d474f0_uniq` ON `user_task` (`user_id`, `task_id`);
CREATE INDEX `main_app_usertask_task_id_48716d0f` ON `user_task` (`task_id`);
CREATE INDEX `main_app_usertask_user_id_85b31886` ON `user_task` (`user_id`);
COMMIT;
